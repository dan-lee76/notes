"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[2186],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),f=p(n),v=r,m=f["".concat(s,".").concat(v)]||f[v]||c[v]||l;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},95146:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={},o="6. Monads I",i={unversionedId:"Year2/2003/06",id:"Year2/2003/06",title:"6. Monads I",description:"23/02/23",source:"@site/docs/Year2/2003/06.md",sourceDirName:"Year2/2003",slug:"/Year2/2003/06",permalink:"/Year2/2003/06",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"5. Applicative Functors",permalink:"/Year2/2003/05"},next:{title:"7.  Monads II",permalink:"/Year2/2003/07"}},s={},p=[{value:"Refresh - Functor",id:"refresh---functor",level:2},{value:"Example: simple evaluator",id:"example-simple-evaluator",level:2},{value:"Safediv",id:"safediv",level:3},{value:"Template box",id:"template-box",level:3},{value:"do notation",id:"do-notation",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"6-monads-i"},"6. Monads I"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"23/02/23")),(0,r.kt)("h2",{id:"refresh---functor"},"Refresh - Functor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"-- f is a type like lists, tree\nclass Functor f where\n    fmap :: (a->b) -> f a -> f b -- f is a data structure\n")),(0,r.kt)("p",null,"If already have a functor, can be an Applicative (using ",(0,r.kt)("inlineCode",{parentName:"p"},"=>"),"). Have to follow a set of conditions using ",(0,r.kt)("inlineCode",{parentName:"p"},"where"),". "),(0,r.kt)("p",null,"Applicative functors - captures a basic form or a basic pattern with affect."),(0,r.kt)("p",null,"Applicative style is pure functions applied to effect for arguments"),(0,r.kt)("h2",{id:"example-simple-evaluator"},"Example: simple evaluator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"data Expr = Val Int | Div Expr Expr\n\neval :: Expr -> Int\neval (Val n) = n\neval (Div x y) = eval x `div` eval y -- could crash if x/y is 0\n")),(0,r.kt)("h3",{id:"safediv"},"Safediv"),(0,r.kt)("p",null,"This is a safe version of div"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"safediv :: Int -> Int -> Maybe Int\nsafediv _ 0 = Nothing\nsafediv n m = Just (n `div` m)\n")),(0,r.kt)("p",null,"Now rewrite Expr so it can use safediv"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"safediv :: Int -> Maybe Int\neval (Val n) = Just n\neval (Div x y) = case eval x of \n                Nothing -> Nothing\n                Just n -> case eval y of \n                    Nothing -> Nothing\n                    Just m -> safediv n m \n")),(0,r.kt)("p",null,"This function will never crash, however it is a bit complicated. But can simplify this further"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"eval :: Expr -> Maybe Int\neval (Val n) = pure n\neval (Div x y) = pure safediv (*) eval x (*) eval y -- Best, however this cause a type error\n")),(0,r.kt)("p",null,"Safediv is not a pure function as it returns a maybe type"),(0,r.kt)("h3",{id:"template-box"},"Template box"),(0,r.kt)("p",null,"This is a case analyses on something (",(0,r.kt)("inlineCode",{parentName:"p"},"[BOX]"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"case [BOX] of\n    Nothing -> Nothing\n    Just x -> [BOX] x\n")),(0,r.kt)("p",null,"Can turn this template into ->"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"mx >>= f = case mx of \n                Nothing -> Nothing\n                Just x -> f x\n(>>=) :: Maybe a -> (a -> )\n\neval :: Expr -> Maybe Int\neval (Val n) = Just n\neval (Div x y) = eval x >>= (\\n ->\n                 eval y >>= (\\m ->\n                 safediv n m)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},">>=")," is an into operator"),(0,r.kt)("h2",{id:"do-notation"},"do notation"),(0,r.kt)("p",null,"As this occurs frequently, can use the do notation.\nIts like a syntax sugar. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"eval :: Expr -> Maybe Int\neval (Val n) = Just n\neval (Div x y) = do n <- eval x\n                    m <- eval y\n                    safediv n m\n")))}c.isMDXComponent=!0}}]);