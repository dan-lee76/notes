"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[1840],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,h=d["".concat(i,".").concat(u)]||d[u]||m[u]||o;return a?n.createElement(h,s(s({ref:t},p),{},{components:a})):n.createElement(h,s({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4343:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={},s="2. OO and Java Programming Refresher (2)",l={unversionedId:"Year2/2013/2",id:"Year2/2013/2",title:"2. OO and Java Programming Refresher (2)",description:"10/10/21",source:"@site/docs/Year2/2013/2.md",sourceDirName:"Year2/2013",slug:"/Year2/2013/2",permalink:"/Year2/2013/2",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"1. OO and Java Programming Refresher (1)",permalink:"/Year2/2013/1"},next:{title:"IntelliJ + Java Releases + jShell",permalink:"/Year2/2013/3"}},i={},c=[{value:"Java collections framework",id:"java-collections-framework",level:2},{value:"TreeSet Class",id:"treeset-class",level:3},{value:"HashMap Class",id:"hashmap-class",level:3},{value:"Implementation of object oriented concepts in java",id:"implementation-of-object-oriented-concepts-in-java",level:2},{value:"Aggregation",id:"aggregation",level:3},{value:"Composition",id:"composition",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Polymorphism",id:"polymorphism",level:3},{value:"Abstract Methods and Classes",id:"abstract-methods-and-classes",level:3},{value:"Interfaces",id:"interfaces",level:3}],p={toc:c};function m(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2-oo-and-java-programming-refresher-2"},"2. OO and Java Programming Refresher (2)"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"10/10/21")),(0,r.kt)("h2",{id:"java-collections-framework"},"Java collections framework"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A collection is an object that represents a group of objects"),(0,r.kt)("li",{parentName:"ul"},"Java Collections Framework contains data structures (Arrays, lists, maps etc)"),(0,r.kt)("li",{parentName:"ul"},"Java Collection Framework contains algorithmic operations (searching, sorting)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Collection"),": Something that holds a dynamic collection of objects (Represents a group of objects/elements)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Map"),": Defines mapping between keys and objects (Maps keys to values; no duplication)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Iterable"),": Collections are able to return an iterator object that can scan over the contents of a collection one object at a time. (Represents an iterator object)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Queue"),": Represents FIFO queues or LIFO stacks"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Deque"),": Represents a double ended queue"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Set"),": A collection that cannot contain duplicate elements"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"List"),": An ordered sequence of elements that allows duplicate elements.")),(0,r.kt)("p",null,"Classes that implement the collection interfaces typically have names in the form of ",(0,r.kt)("inlineCode",{parentName:"p"},"<Implementation style><Interface>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Non typesafe collections (",(0,r.kt)("strong",{parentName:"li"},"DO NOT USE"),") - Collection constructors are not able to specify the type of objects the collection is intended to contain"),(0,r.kt)("li",{parentName:"ul"},"Typesafe collections with 'Generics' - Classes support generics by allowing a type variable to be included in their declaration; type are declared for the reference and constructor. Cannot type a collection using a primitive type (int -> Integer)")),(0,r.kt)("h3",{id:"treeset-class"},"TreeSet Class"),(0,r.kt)("p",null,"Provides an implementation of the Set interface that uses a tree for storage. Objects are stored in sorted, ascending order."),(0,r.kt)("h3",{id:"hashmap-class"},"HashMap Class"),(0,r.kt)("p",null,"HashMap is a Hash table implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key"),(0,r.kt)("h2",{id:"implementation-of-object-oriented-concepts-in-java"},"Implementation of object oriented concepts in java"),(0,r.kt)("h3",{id:"aggregation"},"Aggregation"),(0,r.kt)("p",null,"An object of class B ",(0,r.kt)("strong",{parentName:"p"},"is part of")," an object of class A (semantically) but the object of class B can be shared and if the object of class A is deleted, the object of class B is not deleted."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(6089).Z,width:"495",height:"135"})),(0,r.kt)("h3",{id:"composition"},"Composition"),(0,r.kt)("p",null,"An object of class A ",(0,r.kt)("strong",{parentName:"p"},"owns")," an object of class B and the object of class B cannot be shared and if the object of class A is deleted, the object of class B is also deleted"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(1491).Z,width:"603",height:"135"})),(0,r.kt)("h3",{id:"inheritance"},"Inheritance"),(0,r.kt)("p",null,'Forming new classes based on existing ones\nSuperclass: Parent class being extended\nSubclass: Child class that inherits behaviour from the parent class.\n"Is-A" relationship'),(0,r.kt)("h3",{id:"polymorphism"},"Polymorphism"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Polymorphism is an object oriented concept"),(0,r.kt)("li",{parentName:"ul"},"Method overloading and method overriding are two forms of polymorphism"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Method overloading"),": Methods with the same name co-exists in the same class but they must have different method signatures. Resolved during compile time"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Method overriding"),": Methods with the same name is declared in super and sub class. Resolved during runtime")),(0,r.kt)("h3",{id:"abstract-methods-and-classes"},"Abstract Methods and Classes"),(0,r.kt)("p",null,"Abstract classes cannot be used to instantiate objects but references to abstract classes are legal\nClasses can have instance methods that implement a default behaviour. May contain non-final variables"),(0,r.kt)("h3",{id:"interfaces"},"Interfaces"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Methods are implicitly abstract and most cannot have implementations. Variables declared are by default static and final"),(0,r.kt)("li",{parentName:"ul"},"Interface is an abstract type that is used to describe a behaviour that classes must implement. May only contain method signature and constant declarations"),(0,r.kt)("li",{parentName:"ul"},"Cannot be instantiated, but rather are implemented"),(0,r.kt)("li",{parentName:"ul"},"A class that implements an interface must implement all of the non-default methods described in the interface, or be an abstract class."),(0,r.kt)("li",{parentName:"ul"},"They are less restrictive when it comes to inheritance")))}m.isMDXComponent=!0},6089:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221010172148-3a14c5b16e80e0237192eed2e6b91441.png"},1491:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221010172329-6c055760c8cf30cbf51c70e0e8c0cefb.png"}}]);