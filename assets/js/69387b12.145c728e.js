"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3725],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},i="0. Introduction to AFP",l={unversionedId:"Year2/2003/00",id:"Year2/2003/00",title:"0. Introduction to AFP",description:"03/02/23",source:"@site/docs/Year2/2003/00.md",sourceDirName:"Year2/2003",slug:"/Year2/2003/00",permalink:"/Year2/2003/00",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"3.",permalink:"/Year2/2002/03"},next:{title:"Sudoku (2)",permalink:"/Year2/2003/01"}},s={},p=[{value:"Topics",id:"topics",level:2},{value:"Sudoku in Haskell",id:"sudoku-in-haskell",level:2}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0-introduction-to-afp"},"0. Introduction to AFP"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"03/02/23")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Functional languages represent the leading edge of programming language design, and the primary setting in which new programming concepts are introduced and studied")),(0,a.kt)("h2",{id:"topics"},"Topics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Programming with effects (Monoids)"),(0,a.kt)("li",{parentName:"ul"},"Reasoning about programs"),(0,a.kt)("li",{parentName:"ul"},"Improving program efficiency"),(0,a.kt)("li",{parentName:"ul"},"Recent and ongoing research")),(0,a.kt)("h2",{id:"sudoku-in-haskell"},"Sudoku in Haskell"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Need to make some basic declarations. Top down manner. Sudoku type")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"type Grid = Matrix Value -- Matrix is 2d array\ntype Matrix a = [Row a] -- list of rows with type a. Param\ntype Row a = [a] -- Row is a list of things\ntype Value = Char -- Makes it easier to display them in a grid\n")),(0,a.kt)("p",null,"Could define grid as ",(0,a.kt)("inlineCode",{parentName:"p"},"type Grid = [[Char]]"),". But its useful to break it up"),(0,a.kt)("p",null,"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},'easy :: Grid\neasy = ["2....1.38", "........5",".7...6...",...] -- Row is a string of characters. Represent a blank cell with a .\nblank :: Grid\n-- replicate :: Int -> a -> [a]. Part of a libirary\nblank = replicate 9 ( replicate 9 \'.\')\n\nrows :: Matrix a -> [Row a]\nrows = id -- identity function\n\nProperty : rows(rows m) = m -- applies rows function twice, get back to where started\nProperty : rows . rows = id -- taking rows function and composing it by itself\n\ncols :: Matrix a -> [Row a] -- \'rotates\' columns. Transpose them\n\nboxs :: Matrix a -> [Row a] -- converts boxes into rows\n\nvalid :: Grid -> Bool\nvalid g = all nodups (rows g) && all nodups (cols g) && all nodups (boxs g) -- ensures theres no duplicates\n')),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(34884).Z,width:"1309",height:"1008"}),"\n",(0,a.kt)("img",{src:n(42422).Z,width:"1309",height:"840"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"-- all, simple lib function\nall :: (a -> Bool) -> [a] -> Bool\nall p xs = and [p x | x <- xs] -- Taking each value of x in p, RE WATCH \n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"nodups :: Eq a => [a] -> Bool\nnodups [] = True\nnodups [x:xs] = not (elem x xs) && nodups xs\n")))}u.isMDXComponent=!0},34884:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/20230203160741-7e62db6f100af95fa3d4cc937b15f8f4.png"},42422:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/20230203160802-d44c6732f3cebc6c7480ddcaaf0ddf5e.png"}}]);