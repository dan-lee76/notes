"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[5128],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},44086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={},o="7.  Static members, this, references, const",l={unversionedId:"Year2/2006/07",id:"Year2/2006/07",title:"7.  Static members, this, references, const",description:"23/02/23",source:"@site/docs/Year2/2006/07.md",sourceDirName:"Year2/2006",slug:"/Year2/2006/07",permalink:"/Year2/2006/07",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"6. Classes, Constructors & inline functions",permalink:"/Year2/2006/06"},next:{title:"8. Inheritance and Virtual Functions",permalink:"/Year2/2006/08"}},s={},c=[{value:"this &amp; static methods",id:"this--static-methods",level:2},{value:"this",id:"this",level:3},{value:"Static methods",id:"static-methods",level:3},{value:"References",id:"references",level:2},{value:"Passing Parameters",id:"passing-parameters",level:3},{value:"References vs pointers",id:"references-vs-pointers",level:3},{value:"Uses",id:"uses",level:3},{value:"const",id:"const",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"7--static-members-this-references-const"},"7.  Static members, this, references, const"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"23/02/23")),(0,a.kt)("h2",{id:"this--static-methods"},"this & static methods"),(0,a.kt)("h3",{id:"this"},"this"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An object is a collection of data (its state)"),(0,a.kt)("li",{parentName:"ul"},"For functions to actually do something to an object, they need to know which object to affect. "),(0,a.kt)("li",{parentName:"ul"},"(Non-static) member functions have an implicit extra parameter saying which object to act on. ",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Parameter ",(0,a.kt)("em",{parentName:"li"},"type")," is a pointer to object"),(0,a.kt)("li",{parentName:"ul"},"And the parameter ",(0,a.kt)("em",{parentName:"li"},"name")," is ",(0,a.kt)("inlineCode",{parentName:"li"},"this"))))),(0,a.kt)("h3",{id:"static-methods"},"Static methods"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"static")," members are shared between all objects of that class"),(0,a.kt)("li",{parentName:"ul"},"NOT associated with a specific object"),(0,a.kt)("li",{parentName:"ul"},"Static member functions ",(0,a.kt)("strong",{parentName:"li"},"do not")," have a ",(0,a.kt)("inlineCode",{parentName:"li"},"this")," pointer")),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"References give a new name to an existing item"),(0,a.kt)("li",{parentName:"ul"},"Look like normal variables "),(0,a.kt)("li",{parentName:"ul"},"Act like pointers. "),(0,a.kt)("li",{parentName:"ul"},"References are labelled with an ",(0,a.kt)("inlineCode",{parentName:"li"},"&"))),(0,a.kt)("h3",{id:"passing-parameters"},"Passing Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When a function is called, the values of the parameters are copied into the stack frame for the new function"),(0,a.kt)("li",{parentName:"ul"},"Functions get a copy of the variable")),(0,a.kt)("h3",{id:"references-vs-pointers"},"References vs pointers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pointers can be made to point to something else"),(0,a.kt)("li",{parentName:"ul"},"References always bind to a single object at creation, cannot be bounded to a new object"),(0,a.kt)("li",{parentName:"ul"},"References always have to refer to something, must give them a thing to refer to on initialisation. No such thing as ",(0,a.kt)("inlineCode",{parentName:"li"},"NULL")," reference"),(0,a.kt)("li",{parentName:"ul"},"Pointers need ",(0,a.kt)("inlineCode",{parentName:"li"},"*")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"->")," to deference them, to access the thing pointed to"),(0,a.kt)("li",{parentName:"ul"},"Java object references act like C/C++ pointers, NOT C++ references")),(0,a.kt)("h3",{id:"uses"},"Uses"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Need to keep same syntax. "),(0,a.kt)("li",{parentName:"ul"},"Useful as return values, to chain functions together. "),(0,a.kt)("li",{parentName:"ul"},"References are necessary for operator overloading")),(0,a.kt)("h2",{id:"const"},"const"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"const")," cannot be changed"),(0,a.kt)("li",{parentName:"ul"},"The thing pointer at through a pointer to const cannot be changed using the pointer. (",(0,a.kt)("inlineCode",{parentName:"li"},"const")," before ",(0,a.kt)("inlineCode",{parentName:"li"},"*"),")"),(0,a.kt)("li",{parentName:"ul"},"Can also prevent the pointer itself from being changed (",(0,a.kt)("inlineCode",{parentName:"li"},"const")," after ",(0,a.kt)("inlineCode",{parentName:"li"},"*"),")")))}m.isMDXComponent=!0}}]);