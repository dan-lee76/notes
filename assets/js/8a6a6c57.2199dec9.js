"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3254],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1500:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={},i="1. OO and Java Programming Refresher (1)",l={unversionedId:"Year2/2013/1",id:"Year2/2013/1",title:"1. OO and Java Programming Refresher (1)",description:"07/10/22",source:"@site/docs/Year2/2013/1.md",sourceDirName:"Year2/2013",slug:"/Year2/2013/1",permalink:"/Year2/2013/1",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"0. Introduction to Developing Maintainable Software",permalink:"/Year2/2013/0"},next:{title:"Year in Industry",permalink:"/Year2/Misc/Industry"}},s={},c=[{value:"Basic OO Concepts",id:"basic-oo-concepts",level:2},{value:"Encapsulation",id:"encapsulation",level:2},{value:"&quot;this&quot;",id:"this",level:2},{value:"Constructors",id:"constructors",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1-oo-and-java-programming-refresher-1"},"1. OO and Java Programming Refresher (1)"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"07/10/22")),(0,a.kt)("h2",{id:"basic-oo-concepts"},"Basic OO Concepts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Abstraction: Simple things like objects represent more complex underlying code and data"),(0,a.kt)("li",{parentName:"ul"},"Encapsulation: The ability to protect some components of the object from external access"),(0,a.kt)("li",{parentName:"ul"},"Inheritance: The ability for a class to extend or override functionality of another class"),(0,a.kt)("li",{parentName:"ul"},"Polymorphism: The provision of a single interface to entities of different types",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Compile time polymorphism: Method overloading"),(0,a.kt)("li",{parentName:"ul"},"Run time polymorphism: Method overriding")))),(0,a.kt)("h2",{id:"encapsulation"},"Encapsulation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Hiding the implementation details of a class (all fields and helper methods private)"),(0,a.kt)("li",{parentName:"ul"},"Helps with program maintenance: a change in one class does not affect other classes"),(0,a.kt)("li",{parentName:"ul"},"A client of a class interacts with the class only through well-documented public constructors and methods; this facilitates team development")),(0,a.kt)("h2",{id:"this"},'"this"'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Refers to the implicit parameter inside the class")),(0,a.kt)("h2",{id:"constructors"},"Constructors"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'Constructors of a class can call each other using the keyword "this" (this can avoid code duplicating)'),(0,a.kt)("li",{parentName:"ul"},"Constructors are invoked using the operator new."),(0,a.kt)("li",{parentName:"ul"},'Parameters passed to "new" must match the number, types and order of parameters expected by one of the constructors')))}u.isMDXComponent=!0}}]);