"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[1868],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=u(n),c=i,k=d["".concat(o,".").concat(c)]||d[c]||p[c]||r;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},20429:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));const r={},l="Anti-Disassembly",s={unversionedId:"Year3/4101/06",id:"Year3/4101/06",title:"Anti-Disassembly",description:"- Look at the disassembled instructions and start to understand the program",source:"@site/docs/Year3/4101/06.md",sourceDirName:"Year3/4101",slug:"/Year3/4101/06",permalink:"/Year3/4101/06",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year3",previous:{title:"Process of Malware Analysis",permalink:"/Year3/4101/05"},next:{title:"Data Encoding",permalink:"/Year3/4101/07"}},o={},u=[{value:"Anti-Disassembly",id:"anti-disassembly-1",level:2},{value:"Assembly",id:"assembly",level:2},{value:"Disassembly",id:"disassembly",level:2},{value:"Anti-Disassembly",id:"anti-disassembly-2",level:2},{value:"Disassembly Techniques",id:"disassembly-techniques",level:2},{value:"Linear disassembly",id:"linear-disassembly",level:2},{value:"Method",id:"method",level:3},{value:"Thoughts",id:"thoughts",level:3},{value:"Breaking",id:"breaking",level:3},{value:"Flow Disassembly",id:"flow-disassembly",level:2},{value:"Instruction Flow",id:"instruction-flow",level:3}],m={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"anti-disassembly"},"Anti-Disassembly"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Look at the disassembled instructions and start to understand the program"),(0,i.kt)("li",{parentName:"ul"},"But malware authors use the same tools as malware analysts"),(0,i.kt)("li",{parentName:"ul"},"They use anti-disassembly techniques to stop us analysing the code")),(0,i.kt)("h2",{id:"anti-disassembly-1"},"Anti-Disassembly"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Aims is to slow down the analyst")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Make the job of disassembly as hard as possible")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Reality is that any code that can be executed can be disassembled")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Malware authors aim is to push the skill required up as much as possible")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Same techniques also help prevent anti-virus heuristics from analysing the code too")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Not talking about trying to camouflage code or data")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Will see ways to do that")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Rather looking at how code can be written"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"So the disassembler misinterprets it"),(0,i.kt)("li",{parentName:"ul"},"But the CPU can still execute it without any issue")))),(0,i.kt)("h2",{id:"assembly"},"Assembly"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Assembler is relatively straight-forward"),(0,i.kt)("li",{parentName:"ul"},"Take an instruction, convert it into the relevant machine code opcodes"),(0,i.kt)("li",{parentName:"ul"},"Move onto the next instruction"),(0,i.kt)("li",{parentName:"ul"},"Result is a stream of bytes for the CPU to execute")),(0,i.kt)("h2",{id:"disassembly"},"Disassembly"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Harder problem"),(0,i.kt)("li",{parentName:"ul"},"Easy to convert a single instruction, once we know where it starts"),(0,i.kt)("li",{parentName:"ul"},"Program is a stream of bytes, one after the other"),(0,i.kt)("li",{parentName:"ul"},"x86 instructions can vary in length from 1-15 bytes"),(0,i.kt)("li",{parentName:"ul"},"Cannot decode an instruction, until we know where it starts"),(0,i.kt)("li",{parentName:"ul"},"Cannot know where an instruction starts, until we decode the previous instruction")),(0,i.kt)("h2",{id:"anti-disassembly-2"},"Anti-Disassembly"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Key to understanding the techniques"),(0,i.kt)("li",{parentName:"ul"},"Understand they are trying to force disassembler to make the wrong decisions about where instructions start"),(0,i.kt)("li",{parentName:"ul"},"So disassemble phoney instructions made up of bytes from the middle of real instructions"),(0,i.kt)("li",{parentName:"ul"},"Need to understand how a disassembler is implemented"),(0,i.kt)("li",{parentName:"ul"},"CPU dependent")),(0,i.kt)("h2",{id:"disassembly-techniques"},"Disassembly Techniques"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Take in one or more bytes (depending on the length)"),(0,i.kt)("li",{parentName:"ul"},"Convert that to the assembly code that would generate that instruction"),(0,i.kt)("li",{parentName:"ul"},"Move onto the next instruction"),(0,i.kt)("li",{parentName:"ul"},"Repeat\nBut next instruction might not be correct")),(0,i.kt)("p",null,"Two approach generally used to determine next instruction; linear disassembly or flow disassembly\nFlow disassembly generally gives better results than linear."),(0,i.kt)("h2",{id:"linear-disassembly"},"Linear disassembly"),(0,i.kt)("h3",{id:"method"},"Method"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Decode first instruction at start address"),(0,i.kt)("li",{parentName:"ul"},"Then know the length (in bytes) of that instruction"),(0,i.kt)("li",{parentName:"ul"},"Add length to address of that instruction to give address of next instruction"),(0,i.kt)("li",{parentName:"ul"},"Repeat")),(0,i.kt)("h3",{id:"thoughts"},"Thoughts"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Generally works"),(0,i.kt)("li",{parentName:"ul"},"Can go wrong even with non-malicious binaries"),(0,i.kt)("li",{parentName:"ul"},"Tempting to think that the ",(0,i.kt)("inlineCode",{parentName:"li"},".text")," section will only contain code"),(0,i.kt)("li",{parentName:"ul"},"Not necessarily the case, sometimes data is intermingled"),(0,i.kt)("li",{parentName:"ul"},"Linear disassembler would treat....")),(0,i.kt)("h3",{id:"breaking"},"Breaking"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Very easy to break a linear disassembler")),(0,i.kt)("h2",{id:"flow-disassembly"},"Flow Disassembly"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Aims to improve the detection of instructions (and rejection of data)"),(0,i.kt)("li",{parentName:"ul"},"Follows the flow of the program rather than linearly processing instructions")),(0,i.kt)("h3",{id:"instruction-flow"},"Instruction Flow"),(0,i.kt)("p",null,"Break instructions down into groups based on what instruction will execute next"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Always execute the next instruction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Can execute either the next instruction of a specified one (",(0,i.kt)("inlineCode",{parentName:"p"},"call"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"jz"),",",(0,i.kt)("inlineCode",{parentName:"p"},"jnz"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Always execute instructions at a specified address e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"jmp"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Next instruction unknown, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"ret"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For simple instructions works just like linear disassembly ")),(0,i.kt)("li",{parentName:"ul"})))}p.isMDXComponent=!0}}]);