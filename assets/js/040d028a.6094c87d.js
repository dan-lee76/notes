"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8578],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(r),d=a,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return r?n.createElement(g,s(s({ref:t},p),{},{components:r})):n.createElement(g,s({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var m=2;m<o;m++)s[m]=r[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1497:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var n=r(7462),a=(r(7294),r(3905));const o={},s="25. Revision",i={unversionedId:"Year2/2007/25",id:"Year2/2007/25",title:"25. Revision",description:"Computer Design",source:"@site/docs/Year2/2007/25.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/25",permalink:"/Year2/2007/25",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"24.  Virtualisation & the Cloud",permalink:"/Year2/2007/24"},next:{title:"0. Introduction to Algorithms Correctness and Efficiency",permalink:"/Year2/2009/00"}},l={},m=[{value:"Computer Design",id:"computer-design",level:2},{value:"Registers",id:"registers",level:3},{value:"Memory Management Unit",id:"memory-management-unit",level:3},{value:"Moors Law",id:"moors-law",level:3},{value:"Multi-core, hyper-threaded processors",id:"multi-core-hyper-threaded-processors",level:3},{value:"Micro Kernels",id:"micro-kernels",level:3},{value:"Introduction to processes",id:"introduction-to-processes",level:2},{value:"Context Switching",id:"context-switching",level:3},{value:"Multi-Programming",id:"multi-programming",level:4},{value:"Process",id:"process",level:4},{value:"Process implementation",id:"process-implementation",level:3},{value:"States and Transitions",id:"states-and-transitions",level:3},{value:"System Calls",id:"system-calls",level:3},{value:"Process Scheduling",id:"process-scheduling",level:2},{value:"Time Horizon",id:"time-horizon",level:3},{value:"Process Schedulers",id:"process-schedulers",level:3},{value:"Performance Assessment",id:"performance-assessment",level:3},{value:"Scheduling Algorithms",id:"scheduling-algorithms",level:3}],p={toc:m};function c(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"25-revision"},"25. Revision"),(0,a.kt)("h2",{id:"computer-design"},"Computer Design"),(0,a.kt)("h3",{id:"registers"},"Registers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Data Registers")," - Any sort of data for special functions. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Program Counter-")," Holds the next instruction."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Program status word"),"  - admin, stores the mode bit. Which mode the CPU is in, kernel mode or user mode."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"User Mode")," - Direct access to a subset of instructions the CPU can carry out"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Kernel mode")," - Access to the full set of instructions. Including privileged memory locations. "),(0,a.kt)("li",{parentName:"ul"},"Normally compiler decides which mode to use")),(0,a.kt)("h3",{id:"memory-management-unit"},"Memory Management Unit"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Location of an address"),"\nDoesn't know where in memory an executable will run. Variables require memory, they need to have a memory space"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Logic Address Space")," -  Used by the processor and the compiler (starts at 0). What you use when you write code. Every process has one ","[0,MAX^64]"," "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Physical Address Space")," - Seen by the hardware/OS ","[0,MAX]"," (Determined by the amount of physical memory)\nAlso responsible for address translation ",(0,a.kt)("inlineCode",{parentName:"li"},"physical = locgical + x"))),(0,a.kt)("h3",{id:"moors-law"},"Moors Law"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Moore's law")," - The number of transistors on an integrated circuit doubles roughly every two years. ")),(0,a.kt)("p",null,"Closely linked but necessarily related to performance.\nStill continuing but the power wall slows performance improvements of single core\nCan extract parallelism automatically, can implement it at the lowest level"),(0,a.kt)("h3",{id:"multi-core-hyper-threaded-processors"},"Multi-core, hyper-threaded processors"),(0,a.kt)("p",null,"Evolution in hardware has implications on OS design\nThe process scheduling needs to account for load balancing and CPU affinity. Need to decide ",(0,a.kt)("strong",{parentName:"p"},"when")," and ",(0,a.kt)("strong",{parentName:"p"},"where")," it is going to run"),(0,a.kt)("h3",{id:"micro-kernels"},"Micro Kernels"),(0,a.kt)("p",null,"All non-essential functionality is extracted from the kernel. These are easier to extend, more portable and more reliable.\nFrequent system calls cause mode switches/overhead"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Monolithic Systems")," - All procedures into one single executable running in kernel mode. However, they are difficult to maintain. Current versions of Windows, and Linux are implemented as this."),(0,a.kt)("h2",{id:"introduction-to-processes"},"Introduction to processes"),(0,a.kt)("p",null,"Running instance of a program. This has 'control structures' - they store all the necessary information related to the management of the process"),(0,a.kt)("h3",{id:"context-switching"},"Context Switching"),(0,a.kt)("p",null,"Process control box contains:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Process identification")," (PID, UID, Parent PID)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Process control information")," (process state, scheduling information)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Process state information")," (user registers, program counter, stack pointer, program status word, memory management information, files)\nThe ",(0,a.kt)("strong",{parentName:"li"},"process control block")," is ",(0,a.kt)("strong",{parentName:"li"},"necessary")," for ",(0,a.kt)("strong",{parentName:"li"},"context switching")," in ",(0,a.kt)("strong",{parentName:"li"},"multi-programmed systems"),"\nProcess control blocks are kernel data structures, which are stored in the ",(0,a.kt)("strong",{parentName:"li"},"process table")," and are accessible in the ",(0,a.kt)("strong",{parentName:"li"},"kernel mode")," only (system calls), otherwise this would compromise their integrity.")),(0,a.kt)("h4",{id:"multi-programming"},"Multi-Programming"),(0,a.kt)("p",null,"Achieved by alternating processes and context switching"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Single processor systems results in concurrent execution"),(0,a.kt)("li",{parentName:"ul"},"True parallelism requires multiple processors")),(0,a.kt)("p",null,"Slow time slices - good response times, low utilisation\nLong time slices - poor response times, better utilisation"),(0,a.kt)("h4",{id:"process"},"Process"),(0,a.kt)("p",null,"Memory image contains: the program (shared) code, data segment (stack/heap)\nEvery process has own logical address space\nSome OS address space layout are randomised "),(0,a.kt)("h3",{id:"process-implementation"},"Process implementation"),(0,a.kt)("p",null,'Information about the status of "resources" is maintained in tables. These are in kernel space and cross referenced'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Process tables")," - process control blocks"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Memory tables")," - memory allocation, protection, virtual memory "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"I/O tables")," - Availability, status, transfer information"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"File tables")," - Location, status")),(0,a.kt)("h3",{id:"states-and-transitions"},"States and Transitions"),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(4780).Z,width:"929",height:"454"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"New")," process has just been created and is waiting to be admitted"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ready")," process is waiting for the CPU to become available"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Running")," process 'owns' the CPU"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Blocked")," process cannot continue (waiting for IO)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Terminated")," process is no longer executable"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Suspended")," process is swapped out")),(0,a.kt)("h3",{id:"system-calls"},"System Calls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'True system calls are "wrapped" in the OS libraries following a well defined interface'),(0,a.kt)("li",{parentName:"ul"},"These are necessary to notify the OS that the process has terminated"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fork()")," - creates an exact copy of the current process")),(0,a.kt)("h2",{id:"process-scheduling"},"Process Scheduling"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"New -> ready: when to admit processes to the system"),(0,a.kt)("li",{parentName:"ul"},"Ready -> running: decide which process to run next"),(0,a.kt)("li",{parentName:"ul"},"Running -> ready: when to interrupt process"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scheduler")," - decides which process to run next"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Type of operating system")," - determines which algorithms are appropriate")),(0,a.kt)("h3",{id:"time-horizon"},"Time Horizon"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Long term")," - admits new processes and controls the degree of multi programming. Good mix of CPU and IO bound processes. Usually absent in popular modern "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Medium term")," - controls swapping. Looks to see how busy the system currently is. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Short term")," - which process to run next. Manages the ready queue, runs frequently (must be fast). Called following clock interrupts or blocking system calls.")),(0,a.kt)("h3",{id:"process-schedulers"},"Process Schedulers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Non-Preemptive")," - Processes are interrupted voluntarily"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Preemptive")," - Processes are interrupted forcefully or voluntarily. Requires context switches. Prevents process from monopolising the CPU. Most popular OS are preemptive")),(0,a.kt)("h3",{id:"performance-assessment"},"Performance Assessment"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"User Oriented Criteria",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Response time"),": time between creating the job and its first execution"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Turnaround time"),": time between creating the job and finishing it"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Predictability"),": variance in processing times"))),(0,a.kt)("li",{parentName:"ul"},"System oriented criteria:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Throughput: number of jobs processed per hour"),(0,a.kt)("li",{parentName:"ul"},"Fairness: Equally distributed processing.")))),(0,a.kt)("h3",{id:"scheduling-algorithms"},"Scheduling Algorithms"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Algorithm"),(0,a.kt)("th",{parentName:"tr",align:null},"Concept"),(0,a.kt)("th",{parentName:"tr",align:null},"Advantage"),(0,a.kt)("th",{parentName:"tr",align:null},"Disadvantage"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"First Come First Served/First in First out"),(0,a.kt)("td",{parentName:"tr",align:null},"Non-preemptive algorithm that operates as a strict queuing mechanism."),(0,a.kt)("td",{parentName:"tr",align:null},"Positional fairness an easy to implement"),(0,a.kt)("td",{parentName:"tr",align:null},"Favours long processes over short ones. Could compromise resource utilisation.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Shortest Job First"),(0,a.kt)("td",{parentName:"tr",align:null},"A non-preemptive algorithm that starts processes in order of ascending processing time"),(0,a.kt)("td",{parentName:"tr",align:null},"Always result in the optimal turnaround time"),(0,a.kt)("td",{parentName:"tr",align:null},"Starvation might occur. Fairness and predictability are compromised. Processing times have to be known beforehand")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Round Robin"),(0,a.kt)("td",{parentName:"tr",align:null},"A preemptive version of FCFS. Processes run in the order they were added but they only get a max amount of time at once. Forces context switches at periodic intervals"),(0,a.kt)("td",{parentName:"tr",align:null},"Improved response time. Effective for general purpose interactive/time sharing systems"),(0,a.kt)("td",{parentName:"tr",align:null},"Increased context switching and overhead. Favours CPU bound processes over IO. Can reduce to FCFS.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Priority Queue"),(0,a.kt)("td",{parentName:"tr",align:null},"A preemptive algorithm that schedules processes by priority. Round robin is used within the same priority levels. Saved by the process control block"),(0,a.kt)("td",{parentName:"tr",align:null},"Can priorities IO bound jobs"),(0,a.kt)("td",{parentName:"tr",align:null},"Low priority may suffer from starvation")))))}c.isMDXComponent=!0},4780:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/20221007111037-7da3e50e02a7213e1f6b3b47a20902e1.png"}}]);