"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[9795],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),g=a,d=m["".concat(u,".").concat(g)]||m[g]||p[g]||o;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3437:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={},u=void 0,s={unversionedId:"Year1/Programming Paradigms/Haskell/22.02.02 - Functional Language",id:"Year1/Programming Paradigms/Haskell/22.02.02 - Functional Language",title:"22.02.02 - Functional Language",description:"Functional Language",source:"@site/docs/Year1/1009 - Programming Paradigms/Haskell/22.02.02 - Functional Language.md",sourceDirName:"Year1/1009 - Programming Paradigms/Haskell",slug:"/Year1/Programming Paradigms/Haskell/22.02.02 - Functional Language",permalink:"/notes/docs/Year1/Programming Paradigms/Haskell/22.02.02 - Functional Language",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Haskell",permalink:"/notes/docs/Year1/Programming Paradigms/22.04.01 - Wrap up lecture"},next:{title:"The Standard Prelude",permalink:"/notes/docs/Year1/Programming Paradigms/Haskell/22.02.07 - First Steps"}},c={},p=[{value:"Functional Language",id:"functional-language",level:2}],m={toc:p};function g(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"functional-language"},"Functional Language"),(0,o.kt)("p",null,"Functional programming is style of programming maths"),(0,o.kt)("p",null,"Easier to program functional than using computation method with assignments (java/c/for loop)"),(0,o.kt)("p",null,"Instead of doing for loop can do. This builds a list 1 - 10\n",(0,o.kt)("inlineCode",{parentName:"p"},"sum [1..10]")),(0,o.kt)("p",null,"1987 - An international committee starts the development of Haskell, the standard lazy functional language"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"f(x:xs) = f ys ++ [x] ++ f zs")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"++")," - appends lists together\n",(0,o.kt)("inlineCode",{parentName:"p"},":")," - Takes single item(number) and moves it into the list. Can also be used to break apart the list. ",(0,o.kt)("inlineCode",{parentName:"p"},"x:xs")," always adds a new element ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," to the start of a list ",(0,o.kt)("inlineCode",{parentName:"p"},"xs")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[a | a \u2190 xs, a \u2264 x]"),"\nBuilding a set of all values ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),", such that is is element of ",(0,o.kt)("inlineCode",{parentName:"p"},"xs")," and a is ",(0,o.kt)("inlineCode",{parentName:"p"},"\u2264")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"x")))}g.isMDXComponent=!0}}]);