"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8604],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,f=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const a={},o="Representation and Similarity",l={unversionedId:"Year3/3074/05",id:"Year3/3074/05",title:"Representation and Similarity",description:"Fixed size representation - Bag of words model",source:"@site/docs/Year3/3074/05.md",sourceDirName:"Year3/3074",slug:"/Year3/3074/05",permalink:"/Year3/3074/05",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year3",previous:{title:"Biases in AI(2)",permalink:"/Year3/3074/04"},next:{title:"README",permalink:"/Year3/"}},s={},c=[{value:"Fixed size representation - Bag of words model",id:"fixed-size-representation---bag-of-words-model",level:2},{value:"Distance and Similarity in Vector Space",id:"distance-and-similarity-in-vector-space",level:3},{value:"Similarity in vector spaces",id:"similarity-in-vector-spaces",level:3},{value:"Representation",id:"representation",level:3},{value:"Applications",id:"applications",level:3},{value:"Variable-length representations - One hot encoding, and word embeddings",id:"variable-length-representations---one-hot-encoding-and-word-embeddings",level:2},{value:"One-hot encoding",id:"one-hot-encoding",level:3},{value:"Word Embeddings",id:"word-embeddings",level:3},{value:"Applications of similarity",id:"applications-of-similarity",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"representation-and-similarity"},"Representation and Similarity"),(0,i.kt)("h2",{id:"fixed-size-representation---bag-of-words-model"},"Fixed size representation - Bag of words model"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NLP algorithms don't understand words"),(0,i.kt)("li",{parentName:"ul"},"Several algorithms work with fixed-size vectors"),(0,i.kt)("li",{parentName:"ul"},"Relies on comparing documents")),(0,i.kt)("p",null,"Those documents need to be represented in a common space\nA vector space is a natural fit to represent this space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each word/term is a dimension of that vector space"),(0,i.kt)("li",{parentName:"ul"},"Each document is a vector in that vector space")),(0,i.kt)("h3",{id:"distance-and-similarity-in-vector-space"},"Distance and Similarity in Vector Space"),(0,i.kt)("p",null,"Similarity measures"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"At the core of many algorithms",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Information retrieval algorithms (search by similarity)"),(0,i.kt)("li",{parentName:"ul"},"Clustering algorithms (cluster by similarity)"),(0,i.kt)("li",{parentName:"ul"},"Some classifiers, recommender systems, etc"))),(0,i.kt)("li",{parentName:"ul"},"Intrinsically related to distance measures")),(0,i.kt)("h3",{id:"similarity-in-vector-spaces"},"Similarity in vector spaces"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Jaccard index - Works with binary weights"),(0,i.kt)("li",{parentName:"ul"},"Euclidean distance - Standard geometry distance"),(0,i.kt)("li",{parentName:"ul"},"Cosine similarity - Angle of the document vectors. Dot product of those vectors divided by the multiplication of their norms")),(0,i.kt)("h3",{id:"representation"},"Representation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Binary term weighting - ...."),(0,i.kt)("li",{parentName:"ul"},"Log-frequency term weighting"),(0,i.kt)("li",{parentName:"ul"},"TF-IDF(Term Frequency - Inverse Document Frequency) term weighting - Modification of the log frequency. Adding "),(0,i.kt)("li",{parentName:"ul"},"There are more advanced and specialised representations")),(0,i.kt)("h3",{id:"applications"},"Applications"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Can be fed into ML algorithms (classifiers, clustering etc)"),(0,i.kt)("li",{parentName:"ul"},"Can be used for search engines. Gives us the notion of distance and similarity")),(0,i.kt)("h2",{id:"variable-length-representations---one-hot-encoding-and-word-embeddings"},"Variable-length representations - One hot encoding, and word embeddings"),(0,i.kt)("h3",{id:"one-hot-encoding"},"One-hot encoding"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Assumptions: all words are equally unrelated"),(0,i.kt)("li",{parentName:"ul"},"No semantics"),(0,i.kt)("li",{parentName:"ul"},"Large sparse matrices (mostly 0s)")),(0,i.kt)("h3",{id:"word-embeddings"},"Word Embeddings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Semantics - the study of meaning"),(0,i.kt)("li",{parentName:"ul"},"Distributional semantics - modelling meaning based on the distribution of language in large samples of data"),(0,i.kt)("li",{parentName:"ul"},"A word embedding is a dense vector representation of words"),(0,i.kt)("li",{parentName:"ul"},"Tend to preserve some properties of words\n...\nLarger the NN the more expensive\n....")),(0,i.kt)("h2",{id:"applications-of-similarity"},"Applications of similarity"))}p.isMDXComponent=!0}}]);