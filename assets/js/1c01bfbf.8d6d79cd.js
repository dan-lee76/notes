"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[6203],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),o=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=o(a),c=n,h=m["".concat(p,".").concat(c)]||m[c]||d[c]||l;return a?r.createElement(h,i(i({ref:t},u),{},{components:a})):r.createElement(h,i({ref:t},u))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var o=2;o<l;o++)i[o]=a[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2473:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var r=a(7462),n=(a(7294),a(3905));const l={},i="4. Threads",s={unversionedId:"Year2/2007/4",id:"Year2/2007/4",title:"4. Threads",description:"11/10/22",source:"@site/docs/Year2/2007/4.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/4",permalink:"/Year2/2007/4",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"3. Process Scheduling",permalink:"/Year2/2007/3"},next:{title:"0. Introduction to Algorithms Correctness and Efficiency",permalink:"/Year2/2009/0"}},p={},o=[{value:"OS perspective",id:"os-perspective",level:2},{value:"Why use threads",id:"why-use-threads",level:2},{value:"User Threads",id:"user-threads",level:2},{value:"Kernel Threads",id:"kernel-threads",level:2},{value:"Performance",id:"performance",level:2},{value:"Hybrid Implementations",id:"hybrid-implementations",level:2},{value:"Thread Management",id:"thread-management",level:2},{value:"POSIX Threads",id:"posix-threads",level:2}],u={toc:o};function d(e){let{components:t,...l}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"4-threads"},"4. Threads"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"11/10/22")),(0,n.kt)("h2",{id:"os-perspective"},"OS perspective"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A process consists of two ",(0,n.kt)("strong",{parentName:"li"},"fundamental units"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Resources"),": All related resources are grouped together"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Execution trace"),": an entity that gets executed"))),(0,n.kt)("li",{parentName:"ul"},"A process can share its resources between multiple execution traces/threads")),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(8110).Z,width:"1103",height:"641"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Single threaded process(left), multi-threaded process(Right)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Every thread has its own execution context (program counter, stack registers)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"All threads have access to the process shared resources. Global variables, memory etc")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"The execution of a process has states. ",(0,n.kt)("strong",{parentName:"p"},"States")," and ",(0,n.kt)("strong",{parentName:"p"},"transitions")," (new, running, blocked, ready, terminated). Multiple threads can be in different states. They relate to the process of the execution")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Every thread has a ",(0,n.kt)("strong",{parentName:"p"},"thread control block"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Threads incur less overhead to create/terminate/switch. They have shared resources (address space etc)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Hyper threaded cores have hardware support for multi-threading. Don't need to save each thread when switching ")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Threading is easier than having multiple processes. Due to threads sharing the same physical memory address, can interact with one another.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Inter-thread communication"),": Easier/faster than interprocess communication (memory is shared)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"No protection boundaries"),": Required in the address space )threads are cooperating, belong to the same user, and have a common goal")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Synchronisation"),": Has to be considered carefully"))),(0,n.kt)("h2",{id:"why-use-threads"},"Why use threads"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Multiple ",(0,n.kt)("strong",{parentName:"li"},"related activities")," apply to the same resources, these resources should be accessible/shared"),(0,n.kt)("li",{parentName:"ul"},"Processes will often contain multiple blocking tasks",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"IO operations"),(0,n.kt)("li",{parentName:"ul"},"Memory access: page faults"))),(0,n.kt)("li",{parentName:"ul"},"Such activities should be carried out in parallel/concurrently"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Application examples"),": webservers, make program etc interprocess"),(0,n.kt)("li",{parentName:"ul"},"Benefit of using threads rather than putting everything sequential has to do with blocking system calls. Can do save whilst reading in user input instead of skipping it")),(0,n.kt)("h2",{id:"user-threads"},"User Threads"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Many-to-One")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Thread management")," (creating, destroying, scheduling, thread control block manipulation) is carried out in user space with the help of a user library"),(0,n.kt)("li",{parentName:"ul"},"The process maintains a thread table managed by the runtime system without the kernels knowledge."),(0,n.kt)("li",{parentName:"ul"},"Application itself and the library that you're using is responsible for implementing the practice completely."),(0,n.kt)("li",{parentName:"ul"},"Kernel can see 1 process, but user space can see multiple threads"),(0,n.kt)("li",{parentName:"ul"},"Advantages:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Threads are in user space (cannot switch to kernel space)"),(0,n.kt)("li",{parentName:"ul"},"Full control over the thread scheduler"),(0,n.kt)("li",{parentName:"ul"},"OS independent (run on OS that doesn't support it)"))),(0,n.kt)("li",{parentName:"ul"},"Disadvantages:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Blocking system calls suspend the entire process (user threads are mapped onto a single process, managed by the kernel)"),(0,n.kt)("li",{parentName:"ul"},"No true parallelism (process is scheduled on a single CPU)"),(0,n.kt)("li",{parentName:"ul"},"Clock interrupts are non-existent (non-preemptive)"),(0,n.kt)("li",{parentName:"ul"},"Page faults result in blocking the process")))),(0,n.kt)("h2",{id:"kernel-threads"},"Kernel Threads"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"One-to-One")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The kernel manages threads - user applications access threading through system calls",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Thread table is maintained by the kernel"),(0,n.kt)("li",{parentName:"ul"},"If a thread blocks, the kernel chooses thread from same or different process"))),(0,n.kt)("li",{parentName:"ul"},"Advantages:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"True parallelism can be achieved"),(0,n.kt)("li",{parentName:"ul"},"No run-time needed"))),(0,n.kt)("li",{parentName:"ul"},"Frequent mode switches take place"),(0,n.kt)("li",{parentName:"ul"},"Scheduling of kernel threads is all done by the OS")),(0,n.kt)("h2",{id:"performance"},"Performance"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Null fork: the overhead is creating, scheduling, running and terminating a null process/thread"),(0,n.kt)("li",{parentName:"ul"},"Signal wait: overhead is synchronising threads")),(0,n.kt)("h2",{id:"hybrid-implementations"},"Hybrid Implementations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"User threads are multiplexed onto kernel threads"),(0,n.kt)("li",{parentName:"ul"},"Kernel sees and schedules the kernel threads"),(0,n.kt)("li",{parentName:"ul"},"User application sees user threads and creates/schedules these"),(0,n.kt)("li",{parentName:"ul"},"Implements best of both worlds.")),(0,n.kt)("h2",{id:"thread-management"},"Thread Management"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Thread libraries provide an API/interface for managing threads"),(0,n.kt)("li",{parentName:"ul"},"Thread libraries can be implemented:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Entirely in user space"),(0,n.kt)("li",{parentName:"ul"},"Based on system calls"))),(0,n.kt)("li",{parentName:"ul"},"Examples of thread APIs include POSIX's PThreads, Windows Threads, and Java threads"),(0,n.kt)("li",{parentName:"ul"},"API - table of contents which tells you what functions can be executed. Can be executed as user or kernel threads. Linux will create kernel threads.")),(0,n.kt)("h2",{id:"posix-threads"},"POSIX Threads"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"POSIX threads are a specification that anyone can implement."),(0,n.kt)("li",{parentName:"ul"},"Core functions of PThreads:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Function Call"),(0,n.kt)("th",{parentName:"tr",align:null},"Summary"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"pthread_create")),(0,n.kt)("td",{parentName:"tr",align:null},"Create new thread")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"pthread_exit")),(0,n.kt)("td",{parentName:"tr",align:null},"Exit existing thread")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"pthread_join")),(0,n.kt)("td",{parentName:"tr",align:null},"Wait for thread with ID")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"pthread_yield")),(0,n.kt)("td",{parentName:"tr",align:null},"Release CPU")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"pthread_attr_init")),(0,n.kt)("td",{parentName:"tr",align:null},"Thread attributes (priority)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"pthread_attr_destory")),(0,n.kt)("td",{parentName:"tr",align:null},"Release attributes")))))}d.isMDXComponent=!0},8110:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/20221011131748-fb5f901e1a0f2dc8b8dc946836e552d7.png"}}]);