"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[5175],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,g=u["".concat(l,".").concat(d)]||u[d]||p[d]||i;return r?n.createElement(g,o(o({ref:t},m),{},{components:r})):n.createElement(g,o({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2624:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={},o=void 0,s={unversionedId:"Year1/Programming Paradigms/Haskell/22.03.16 - Interactive Programming",id:"Year1/Programming Paradigms/Haskell/22.03.16 - Interactive Programming",title:"22.03.16 - Interactive Programming",description:"So far seen how Haskell can be used to write batch programs.",source:"@site/docs/Year1/1009 - Programming Paradigms/Haskell/22.03.16 - Interactive Programming.md",sourceDirName:"Year1/1009 - Programming Paradigms/Haskell",slug:"/Year1/Programming Paradigms/Haskell/22.03.16 - Interactive Programming",permalink:"/Year1/Programming Paradigms/Haskell/22.03.16 - Interactive Programming",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"22.03.09 - The Countdown Problem",permalink:"/Year1/Programming Paradigms/Haskell/22.03.09 - The Countdown Problem"},next:{title:"22.03.21 - Exercises on interaction",permalink:"/Year1/Programming Paradigms/Haskell/22.03.21 - Exercises on interaction"}},l={},c=[{value:"Basic Actions",id:"basic-actions",level:2},{value:"Sequencing",id:"sequencing",level:2},{value:"Derived Primitives",id:"derived-primitives",level:2}],m={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"So far seen how Haskell can be used to write batch programs.\nToday, will see how to do interactive programs"),(0,a.kt)("p",null,"Problem:\nHaskell programs have no side effects\nHowever interactive programs have side effects"),(0,a.kt)("p",null,"Solution:\nCan be written in Haskell by using types to distinguish pure expressions from impure actions that may involve side effects\n",(0,a.kt)("inlineCode",{parentName:"p"},"IO a")," - returns the value of type a"),(0,a.kt)("h2",{id:"basic-actions"},"Basic Actions"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getChar"),"Adjugate - reads a character from the keyboard, echos it to the screen and returns the character as a result\n",(0,a.kt)("inlineCode",{parentName:"p"},"putChar c")," - writes the character c to the screen and returns no result value\n",(0,a.kt)("inlineCode",{parentName:"p"},"return v")," - returns the value v without performing any interaction"),(0,a.kt)("h2",{id:"sequencing"},"Sequencing"),(0,a.kt)("p",null,"Sequence of actions can be combined as a single composite action using the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"do")),(0,a.kt)("h2",{id:"derived-primitives"},"Derived Primitives"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getLine")," - reads an entire string. Haskell reads each character one by one, then returns it as a list. Need to have an action in the do block\n",(0,a.kt)("inlineCode",{parentName:"p"},"putStr")," - Writes a string to the screen\n",(0,a.kt)("inlineCode",{parentName:"p"},"putStrLn")," - Writes a string and moving to a new line"),(0,a.kt)("p",null,"Evaluating an action executes its side effects, with the final result value being discarded"))}p.isMDXComponent=!0}}]);