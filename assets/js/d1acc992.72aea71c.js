"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[729],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(r),d=a,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},73709:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={},o="3. Process Scheduling",s={unversionedId:"Year2/2007/03",id:"Year2/2007/03",title:"3. Process Scheduling",description:"10/10/22",source:"@site/docs/Year2/2007/03.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/03",permalink:"/Year2/2007/03",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"2. Processes",permalink:"/Year2/2007/02"},next:{title:"4. Threads",permalink:"/Year2/2007/04"}},l={},p=[{value:"Process Scheduling",id:"process-scheduling",level:2},{value:"Time Horizon",id:"time-horizon",level:3},{value:"Classification by approach",id:"classification-by-approach",level:3},{value:"Performance assessment",id:"performance-assessment",level:2},{value:"Scheduling Algorithms",id:"scheduling-algorithms",level:2},{value:"Multi-level feedback queues",id:"multi-level-feedback-queues",level:3}],u={toc:p};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"3-process-scheduling"},"3. Process Scheduling"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"10/10/22")),(0,a.kt)("h2",{id:"process-scheduling"},"Process Scheduling"),(0,a.kt)("p",null,"The OS manages and schedules processes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"New -> ready: when to admit processes to the system"),(0,a.kt)("li",{parentName:"ul"},"Ready -> running: decide which process to run next"),(0,a.kt)("li",{parentName:"ul"},"Running -> ready: when to interrupt process\nThe scheduler decided which process to run next. There's no one size fits all.\nThe type of operating system determines which algorithms are appropriate")),(0,a.kt)("h3",{id:"time-horizon"},"Time Horizon"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Long term"),": admits new processes and controls the degree of multi programming. Good mix of CPU and IO bound processes. Usually absent in popular modern\n",(0,a.kt)("strong",{parentName:"p"},"Medium term"),": controls swapping. Looks to see how busy the system currently is.\n",(0,a.kt)("strong",{parentName:"p"},"Short term"),": which process to run next. Manages the ready queue, runs frequently (must be fast). Called following clock interrupts or blocking system calls."),(0,a.kt)("h3",{id:"classification-by-approach"},"Classification by approach"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Non-preemptive"),": Processes are interrupted voluntarily"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Preemptive"),": Processes are interrupted forcefully or voluntarily. Requires context switches which generate. Prevents processes from monopolising the CPU. Most popular OS are preemptive. ")),(0,a.kt)("h2",{id:"performance-assessment"},"Performance assessment"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"User Oriented Criteria",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Response time"),": time between creating the job and its first execution"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Turnaround time"),": time between creating the job and finishing it"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Predictability"),": variance in processing times"))),(0,a.kt)("li",{parentName:"ul"},"System oriented criteria:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Throughput: number of jobs processed per hour"),(0,a.kt)("li",{parentName:"ul"},"Fairness: Equally distributed processing.")))),(0,a.kt)("h2",{id:"scheduling-algorithms"},"Scheduling Algorithms"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"First Come First Served/First in First out",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Concept: Non-preemptive algorithm that operates as a strict queuing mechanism."),(0,a.kt)("li",{parentName:"ul"},"Advantages: Positional fairness an easy to implement"),(0,a.kt)("li",{parentName:"ul"},"Disadvantages: Favours long processes over short ones. Could compromise resource utilisation."))),(0,a.kt)("li",{parentName:"ol"},"Shortest Job First",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Concept: A non-preemptive algorithm that starts processes in order of ascending processing time"),(0,a.kt)("li",{parentName:"ul"},"Advantages: Always result in the optimal turnaround time"),(0,a.kt)("li",{parentName:"ul"},"Disadvantages: Starvation might occur. Fairness and predictability are compromised. Processing times have to be known beforehand"))),(0,a.kt)("li",{parentName:"ol"},"Round Robin",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Concept: A preemptive version of FCFS. Processes run in the order they were added but they only get a max amount of time at once. Forces context switches at periodic intervals"),(0,a.kt)("li",{parentName:"ul"},"Advantages: Improved response time. Effective for general purpose interactive/time sharing systems"),(0,a.kt)("li",{parentName:"ul"},"Disadvantages: Increased context switching and overhead. Favours CPU bound processes over IO. Can reduce to FCFS."),(0,a.kt)("li",{parentName:"ul"},"Length of time slice must be considered. Good low response time is achieved with a small time slice. High throughput is achieved with a large time slice. If time slice is only used partially, next process starts immediately "))),(0,a.kt)("li",{parentName:"ol"},"Priority Queue",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Concept: A preemptive algorithm that schedules processes by priority. Round robin is used within the same priority levels. Saved by the process control block"),(0,a.kt)("li",{parentName:"ul"},"Advantages: Can priorities IO bound jobs"),(0,a.kt)("li",{parentName:"ul"},"Disadvantages: Low priority may suffer from starvation")))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Algorithm"),(0,a.kt)("th",{parentName:"tr",align:null},"Concept"),(0,a.kt)("th",{parentName:"tr",align:null},"Advantage"),(0,a.kt)("th",{parentName:"tr",align:null},"Disadvantage"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"First Come First Served/First in First out"),(0,a.kt)("td",{parentName:"tr",align:null},"Non-preemptive algorithm that operates as a strict queuing mechanism."),(0,a.kt)("td",{parentName:"tr",align:null},"Positional fairness an easy to implement"),(0,a.kt)("td",{parentName:"tr",align:null},"Favours long processes over short ones. Could compromise resource utilisation.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Shortest Job First"),(0,a.kt)("td",{parentName:"tr",align:null},"A non-preemptive algorithm that starts processes in order of ascending processing time"),(0,a.kt)("td",{parentName:"tr",align:null},"Always result in the optimal turnaround time"),(0,a.kt)("td",{parentName:"tr",align:null},"Starvation might occur. Fairness and predictability are compromised. Processing times have to be known beforehand")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Round Robin"),(0,a.kt)("td",{parentName:"tr",align:null},"A preemptive version of FCFS. Processes run in the order they were added but they only get a max amount of time at once. Forces context switches at periodic intervals"),(0,a.kt)("td",{parentName:"tr",align:null},"Improved response time. Effective for general purpose interactive/time sharing systems"),(0,a.kt)("td",{parentName:"tr",align:null},"Increased context switching and overhead. Favours CPU bound processes over IO. Can reduce to FCFS.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Priority Queue"),(0,a.kt)("td",{parentName:"tr",align:null},"A preemptive algorithm that schedules processes by priority. Round robin is used within the same priority levels. Saved by the process control block"),(0,a.kt)("td",{parentName:"tr",align:null},"Can priorities IO bound jobs"),(0,a.kt)("td",{parentName:"tr",align:null},"Low priority may suffer from starvation")))),(0,a.kt)("h3",{id:"multi-level-feedback-queues"},"Multi-level feedback queues"),(0,a.kt)("p",null,"Different algorithms can be used for the individual queues.\nFeedback queues allow priorities to change dynamically, jobs can move between queues. Move priorities to increase fairness"))}m.isMDXComponent=!0}}]);