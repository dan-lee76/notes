"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[9663],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},24168:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={},l="3.  Coursework - Connect 4",i={unversionedId:"Year2/2003/03",id:"Year2/2003/03",title:"3.  Coursework - Connect 4",description:"13/02/23",source:"@site/docs/Year2/2003/03.md",sourceDirName:"Year2/2003",slug:"/Year2/2003/03",permalink:"/Year2/2003/03",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"2. Sudoku (3)",permalink:"/Year2/2003/02"},next:{title:"0.  Introduction",permalink:"/Year2/2006/00"}},p={},s=[{value:"The Board",id:"the-board",level:2},{value:"What is deriving?",id:"what-is-deriving",level:2},{value:"Game Trees",id:"game-trees",level:2},{value:"Strategy (minimax)",id:"strategy-minimax",level:2}],c={toc:s};function u(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"3--coursework---connect-4"},"3.  Coursework - Connect 4"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"13/02/23")),(0,a.kt)("p",null,"Run the Haskell code as ",(0,a.kt)("inlineCode",{parentName:"p"},"ghc -02 connect4.ls")),(0,a.kt)("h2",{id:"the-board"},"The Board"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"rows = 6\ncols = 7\nwin = 4\ndepth = 6 --search depth\n\ntype Board = [Row]\ntype Row = [Player]\n\ndata Player = O  | B | X deriving (Ord, Eq, Show) -- Gives class instances for free\n")),(0,a.kt)("h2",{id:"what-is-deriving"},"What is deriving?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"class Eq a where \n    (==) :: a -> a -> Bool--infix operator. True if =, false if not\n    (/=) :: a -> a -> Bool--Not equal, true if not equal\nx /= y = not (x == y)\n")),(0,a.kt)("p",null,"Class is a collection of related types"),(0,a.kt)("p",null,"What happens when you do ",(0,a.kt)("inlineCode",{parentName:"p"},"deriving eq")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Eq Player where\n    O == O = True\n    B == B = True\n    X == X = True\n    _ == _ = False\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Ord")," - Ordering of values on type. Is dependent on the order you write the constructors.\n",(0,a.kt)("inlineCode",{parentName:"p"},"Show")," - Displays the requested item"),(0,a.kt)("h2",{id:"game-trees"},"Game Trees"),(0,a.kt)("p",null,"Essence in writing a strong computer player for connect 4.\n",(0,a.kt)("img",{src:r(62270).Z,width:"1728",height:"1138"}),"\nCan have up to a million boards"),(0,a.kt)("h2",{id:"strategy-minimax"},"Strategy (minimax)"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Produce the game tree to specified depth"),(0,a.kt)("li",{parentName:"ol"},"Label each leaf with winner, or Blank if game not over or draw"),(0,a.kt)("li",{parentName:"ol"},"Then work up the tree(propagate) ",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If O to play, take min of children. (O<B<X)"),(0,a.kt)("li",{parentName:"ul"},"If X to play, take max of children (O<B<X)"))),(0,a.kt)("li",{parentName:"ol"},"Best move is one with same label as root")))}u.isMDXComponent=!0},62270:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/20230214215520-ecabe28bd184523a58debd227d7ef45c.png"}}]);