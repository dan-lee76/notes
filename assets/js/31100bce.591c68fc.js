"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[2541],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),c=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,k=u["".concat(o,".").concat(d)]||u[d]||p[d]||i;return a?r.createElement(k,l(l({ref:t},m),{},{components:a})):r.createElement(k,l({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var c=2;c<i;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},80631:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const i={},l="9. Physical and Architectural Models",s={unversionedId:"Year2/2014/09",id:"Year2/2014/09",title:"9. Physical and Architectural Models",description:"07/03/23",source:"@site/docs/Year2/2014/09.md",sourceDirName:"Year2/2014",slug:"/Year2/2014/09",permalink:"/Year2/2014/09",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"8.  HTTP Servers and APIs",permalink:"/Year2/2014/08"},next:{title:"10. Indirect Communication (1)",permalink:"/Year2/2014/10"}},o={},c=[{value:"Physical Models",id:"physical-models",level:2},{value:"Generations of distributed systems",id:"generations-of-distributed-systems",level:3},{value:"Architectural Models",id:"architectural-models",level:2},{value:"1. Communicating entities",id:"1-communicating-entities",level:3},{value:"2. Communication Paradigms",id:"2-communication-paradigms",level:3},{value:"3. Roles and Responsibilities",id:"3-roles-and-responsibilities",level:3},{value:"4. Placement",id:"4-placement",level:3},{value:"Common strategies",id:"common-strategies",level:4},{value:"Architectural Patterns",id:"architectural-patterns",level:2},{value:"Layering",id:"layering",level:3},{value:"Tiered Architectures",id:"tiered-architectures",level:3},{value:"Some more patterns",id:"some-more-patterns",level:3},{value:"Middleware",id:"middleware",level:3}],m={toc:c};function p(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"9-physical-and-architectural-models"},"9. Physical and Architectural Models"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"07/03/23")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://moodle.nottingham.ac.uk/pluginfile.php/9410761/mod_page/content/1/11%20Physical%20and%20Architectural%20Models.pdf"},"MoodlePDF")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Physical")," models - Hardware components and networks"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Architectural")," models - Computation and communication tasks and their relationships"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Fundamental")," models - Abstract, specialised models",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Interaction")," models"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Failure")," models"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Security")," models")))),(0,n.kt)("h2",{id:"physical-models"},"Physical Models"),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(55376).Z,width:"899",height:"508"})),(0,n.kt)("h3",{id:"generations-of-distributed-systems"},"Generations of distributed systems"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Early")," - Late 1970s/early 1980s, 10-100 nodes on a local area network"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Internet Scale")," - 1990s/early 2000s, many nodes but mainly desktop/server computers"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Contemporary")," - Late 2000s+, plus mobile devices, ubiquitous computing/IoT (embedded devices) and cloud computing")),(0,n.kt)("h2",{id:"architectural-models"},"Architectural Models"),(0,n.kt)("h3",{id:"1-communicating-entities"},"1. Communicating entities"),(0,n.kt)("p",null,"From a system perspective"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Communicating entities are usually processess managed by operating system"),(0,n.kt)("li",{parentName:"ul"},"Simple computing nodes may have no operating system")),(0,n.kt)("p",null,"From a programming perspective"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Objects: as in Object-Oriented programming, present well-defined interfaces made up of methods"),(0,n.kt)("li",{parentName:"ul"},"Components: Have interfaces similar to objects, also describe their dependencies"),(0,n.kt)("li",{parentName:"ul"},"Web Services: With interfaces defined in terms of WWW technologies and standards")),(0,n.kt)("h3",{id:"2-communication-paradigms"},"2. Communication Paradigms"),(0,n.kt)("p",null,"From system perspective"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Message-passing primitives"),(0,n.kt)("li",{parentName:"ul"},"Sockets interface for messages and streams (UDP, TCPIP)"),(0,n.kt)("li",{parentName:"ul"},"Multicast (1-M) physical communication"),(0,n.kt)("li",{parentName:"ul"},"Direct Communication = Message exchange between specific identified (and addressed) entities",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Remote invocation - direct imperative-style message exchange"))),(0,n.kt)("li",{parentName:"ul"},"Request-reply protocols - Client server stype (HTTP)"),(0,n.kt)("li",{parentName:"ul"},"Remote Procedure Call (RPC) and Remote Method Invocation (RMI)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"make remote communication like local code execution"))),(0,n.kt)("li",{parentName:"ul"},"Internet Communication - where a message is ",(0,n.kt)("em",{parentName:"li"},"not")," addressed to one specific entity ")),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(7789).Z,width:"899",height:"508"})),(0,n.kt)("h3",{id:"3-roles-and-responsibilities"},"3. Roles and Responsibilities"),(0,n.kt)("p",null,"Client Server"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Cleint initaites requests "),(0,n.kt)("li",{parentName:"ul"},"Server handles requests against the resources that it manages and responds with a result"),(0,n.kt)("li",{parentName:"ul"},"A server can be a client for other servers")),(0,n.kt)("p",null,"Peer-to-peer"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"No distinction between entities in the network - every node or peer is essentially the same"),(0,n.kt)("li",{parentName:"ul"},"Each node typically runs the same program, and manages some local resources")),(0,n.kt)("h3",{id:"4-placement"},"4. Placement"),(0,n.kt)("p",null,"Can affect: performance, reliability, security, scalability"),(0,n.kt)("h4",{id:"common-strategies"},"Common strategies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Mapping of a service of multiple servers - several processes on different machines can work together to provide a single logical service (WWW, DNS)"),(0,n.kt)("li",{parentName:"ul"},"Caching - Temporarily storing recently used data closer to where it was"),(0,n.kt)("li",{parentName:"ul"},"Mobile Code - Moving code to another process to run rather than moving data"),(0,n.kt)("li",{parentName:"ul"},"Mobile agents - Moving complete running processes to another node")),(0,n.kt)("h2",{id:"architectural-patterns"},"Architectural Patterns"),(0,n.kt)("p",null,"Ways of organising distributed systems that are found to be useful in many different systems"),(0,n.kt)("h3",{id:"layering"},"Layering"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Partitioned into a number of layers, with a given layer making use of the services offered by the layer below"),(0,n.kt)("li",{parentName:"ul"},"E.g. network protocol stacks"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("img",{src:a(82999).Z,width:"642",height:"354"}))),(0,n.kt)("h3",{id:"tiered-architectures"},"Tiered Architectures"),(0,n.kt)("p",null,"Functions of the system are divided into distinct layers or tiers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Each of which is comprised of specific processes\ne.g. "),(0,n.kt)("li",{parentName:"ul"},"Two-tier client server system, distributed printing, thin-client/remote desktop"),(0,n.kt)("li",{parentName:"ul"},"Three-tier web system, with separate (dedicated) database server, web (application) servers and clients (browsers)")),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(2979).Z,width:"653",height:"643"})),(0,n.kt)("h3",{id:"some-more-patterns"},"Some more patterns"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#4.Placement"},"Caching")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Proxy")," - An object (or service) presents the same interface as a remote service but more locally, and passes on requests (perhaps with some added functionality)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Broker")," - A common point where service providers can register their existence so that clients can find them")),(0,n.kt)("h3",{id:"middleware"},"Middleware"),(0,n.kt)("p",null,"A common software layer, above the operating system but common to many applications, that supports particular communication paradigm(s)\nTailored to mix and match"))}p.isMDXComponent=!0},55376:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/20230307111145-20bfbdb4485daff2ffcf641e08b465a8.png"},7789:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/20230307112405-7d4107b43448d40937dbff1fbb57d68f.png"},82999:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/20230307113332-51ce8c1a29a6bd320e2e522e84e2b07f.png"},2979:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/20230307113652-d69516c90f31fe6da54b35461160153a.png"}}]);