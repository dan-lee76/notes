"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[605],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},73953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},l="11. Casting and Operator overloading",i={unversionedId:"Year2/2006/11",id:"Year2/2006/11",title:"11. Casting and Operator overloading",description:"09/03/23",source:"@site/docs/Year2/2006/11.md",sourceDirName:"Year2/2006",slug:"/Year2/2006/11",permalink:"/Year2/2006/11",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"10. Default class members, conversion constructors, conversion operators",permalink:"/Year2/2006/10"},next:{title:"0. Introduction to Operating systems and Concurrency",permalink:"/Year2/2007/00"}},s={},p=[{value:"Casting",id:"casting",level:2},{value:"Operator Overloading",id:"operator-overloading",level:2},{value:"Restrictions",id:"restrictions",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"11-casting-and-operator-overloading"},"11. Casting and Operator overloading"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"09/03/23")),(0,a.kt)("h2",{id:"casting"},"Casting"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"const_cast<newtype>(?)")," - Get rid of ",(0,a.kt)("inlineCode",{parentName:"li"},"const"),"ness or ",(0,a.kt)("inlineCode",{parentName:"li"},"volatile"),"ness"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dynamic_cast<newtype>(?)")," - Safely cast a pointer or reference from base-class to sub-class. Checks that it really IS a sub-class object"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"static_cast<newtype>(?)")," - Cast between types, converting the type"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"reinterpret_cast<newtype>(?)")," - Interpret the bits in one type as another, mainly needed for low-level code, effects are often platform-dependent")),(0,a.kt)("p",null,"This syntax makes the presence/purpose of casts more obvious"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"static_cast<type>(var)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Commonly used cast"),(0,a.kt)("li",{parentName:"ul"},"Attempts to convert correctly between two types"),(0,a.kt)("li",{parentName:"ul"},"Usually use this when not removing ",(0,a.kt)("inlineCode",{parentName:"li"},"const"),"-ness and there is no need to check the sub-class type at runtime")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dynamic_cast<type(var)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Casting from derived class to base class is easy."),(0,a.kt)("li",{parentName:"ul"},"Safely convert from a base-class pointer or reference to a sub-class pointer or reference"),(0,a.kt)("li",{parentName:"ul"},"Checks the type at run-time rather than compile-time"),(0,a.kt)("li",{parentName:"ul"},"Returns NULL if the type conversion of a pointer cannot take place"),(0,a.kt)("li",{parentName:"ul"},"There is no such thing as a NULL reference.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"reinterpret_cast<type>(var)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Treat the value as if it was a different tyoe"),(0,a.kt)("li",{parentName:"ul"},"Interpret the bits in one type as another"),(0,a.kt)("li",{parentName:"ul"},"Including platform dependent conversions"),(0,a.kt)("li",{parentName:"ul"},"Hardly ever needed, apart from with low-level code")),(0,a.kt)("h2",{id:"operator-overloading"},"Operator Overloading"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Function overloading")," - Change the meaning of a function according to the types of the parameters"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Operator Overloading")," - Change the meaning of an operator according to the types of the parameters ")),(0,a.kt)("h3",{id:"restrictions"},"Restrictions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cannot change an operators precedence"),(0,a.kt)("li",{parentName:"ul"},"Cannot create new operators"),(0,a.kt)("li",{parentName:"ul"},"Cannot provide default parameter values"),(0,a.kt)("li",{parentName:"ul"},"Cannot change number of parameters (operands)"),(0,a.kt)("li",{parentName:"ul"},"Cannot override some operators"),(0,a.kt)("li",{parentName:"ul"},"Must overload +, += etc separately")))}u.isMDXComponent=!0}}]);