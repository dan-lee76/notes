"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[5392],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),c=i,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||l;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80361:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));const l={},r="Data Encoding",o={unversionedId:"Year3/4101/07",id:"Year3/4101/07",title:"Data Encoding",description:"- Malware needs to hide its intent",source:"@site/docs/Year3/4101/07.md",sourceDirName:"Year3/4101",slug:"/Year3/4101/07",permalink:"/Year3/4101/07",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year3",previous:{title:"Anti-Disassembly",permalink:"/Year3/4101/06"},next:{title:"Programs",permalink:"/Year3/4101/08-01"}},s={},u=[{value:"Confusing a flow disassembler",id:"confusing-a-flow-disassembler",level:2},{value:"Techniques",id:"techniques",level:3},{value:"Anti-Anti-Disassembly",id:"anti-anti-disassembly",level:2},{value:"Data Encoding",id:"data-encoding-1",level:2},{value:"Malware data encoding",id:"malware-data-encoding",level:2},{value:"Mechanisms for Data Encoding",id:"mechanisms-for-data-encoding",level:2},{value:"XOR Cipher",id:"xor-cipher",level:2},{value:"Brute forcing XOR encoding",id:"brute-forcing-xor-encoding",level:2},{value:"Null-preserving single byte XOR encoding",id:"null-preserving-single-byte-xor-encoding",level:2},{value:"XOR encoding",id:"xor-encoding",level:2},{value:"Variations on a theme",id:"variations-on-a-theme",level:2}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"data-encoding"},"Data Encoding"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Malware needs to hide its intent"),(0,i.kt)("li",{parentName:"ul"},"Applies to both its operation (code) but also the data it uses"),(0,i.kt)("li",{parentName:"ul"},"Malware authors use anti-disassembly techniques to stop us analysing the code"),(0,i.kt)("li",{parentName:"ul"},"And data encoding to stop us from seeing any data")),(0,i.kt)("h2",{id:"confusing-a-flow-disassembler"},"Confusing a flow disassembler"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Need to get disassembler to decode the wrong bytes as instructions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"But also need to confuse its attempt to follow the flow")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Flow disassembler will decode both execution flows")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Those two flows refer to the same set of bytes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Need a way to force the disassembler to decode the instructions one way")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"But ",(0,i.kt)("em",{parentName:"p"},"not")," the way the CPU would decode them")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Code runs fine, but the disassembler shows us the wrong instructions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Can do this relatively easily by inserting code, which looks conditional to the disassembler"))),(0,i.kt)("h3",{id:"techniques"},"Techniques"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Jumps to the same target"),(0,i.kt)("li",{parentName:"ul"},"Unconditional Conditional jumps"),(0,i.kt)("li",{parentName:"ul"},"Impossible disassembly"),(0,i.kt)("li",{parentName:"ul"},"Function Pointers"),(0,i.kt)("li",{parentName:"ul"},"Manipulating the return address from subroutines")),(0,i.kt)("h2",{id:"anti-anti-disassembly"},"Anti-Anti-Disassembly"),(0,i.kt)("p",null,"Any code that can be executed can be disassembled\nMay just have to guide the process a bit"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Explicitly choosing which parts of the program are code and data"),(0,i.kt)("li",{parentName:"ul"},"May have to patch the code with ",(0,i.kt)("inlineCode",{parentName:"li"},"nop")," instructions to get it to disassemble correctly")),(0,i.kt)("h2",{id:"data-encoding-1"},"Data Encoding"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Malware needs to hide its intent"),(0,i.kt)("li",{parentName:"ul"},"Applies to both its operation but also the data it uses"),(0,i.kt)("li",{parentName:"ul"},"Data encoding refers to any form of content modification used for the purpose of hiding intent"),(0,i.kt)("li",{parentName:"ul"},"Need to understand the encoding techniques used to understand what malware does")),(0,i.kt)("h2",{id:"malware-data-encoding"},"Malware data encoding"),(0,i.kt)("p",null,"Malware will use data encoding to"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Hide configuration information"),(0,i.kt)("li",{parentName:"ul"},"Save information to a staging file before stealing it"),(0,i.kt)("li",{parentName:"ul"},"Store strings used by the malware"),(0,i.kt)("li",{parentName:"ul"},"Disguise itself as a legitimate tool")),(0,i.kt)("h2",{id:"mechanisms-for-data-encoding"},"Mechanisms for Data Encoding"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Malware could (and does) use standard cryptographic algorithms for data encoding"),(0,i.kt)("li",{parentName:"ul"},"But malware is just as likely to use simple techniques as complex ones",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Small enough to be used in space-constrained enviroments"),(0,i.kt)("li",{parentName:"ul"},"Less obvious than more complex ciphers"),(0,i.kt)("li",{parentName:"ul"},"Low overhead, little impact on performance"))),(0,i.kt)("li",{parentName:"ul"},"Not expecting immunity from being cracked, rather simply looking for an easy way to prevent basic analysis")),(0,i.kt)("h2",{id:"xor-cipher"},"XOR Cipher"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Common mechanism used by malware authors is to use it"),(0,i.kt)("li",{parentName:"ul"},"XOR each byte of the data with a known value"),(0,i.kt)("li",{parentName:"ul"},"Convenient to use",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Simple to implement (One instruction)"),(0,i.kt)("li",{parentName:"ul"},"Reversible")))),(0,i.kt)("h2",{id:"brute-forcing-xor-encoding"},"Brute forcing XOR encoding"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Very easy to brute force crack simple XOR encoding"),(0,i.kt)("li",{parentName:"ul"},"Only one of 255 possible values used to encode the data"),(0,i.kt)("li",{parentName:"ul"},"Simple take a portion of the encoding data and attempt to decode it using each of the 255 possible keys"),(0,i.kt)("li",{parentName:"ul"},"Look at the result and see if something recognisable pops out"),(0,i.kt)("li",{parentName:"ul"},"Can also be precomputed if knowing a string could be present")),(0,i.kt)("h2",{id:"null-preserving-single-byte-xor-encoding"},"Null-preserving single byte XOR encoding"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Malware authors sometimes use a technique to mitigate this"),(0,i.kt)("li",{parentName:"ul"},"Use NULL=preserving single byte encoding scheme"),(0,i.kt)("li",{parentName:"ul"},"Rather than XOR every byte, this has two rules",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If byte is zero, or the key then the byte is skipped"),(0,i.kt)("li",{parentName:"ul"},"If byte is neither zero or the key, then XOR byte with key"))),(0,i.kt)("li",{parentName:"ul"},"Still a reversible algorithm")),(0,i.kt)("h2",{id:"xor-encoding"},"XOR encoding"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Strait-forward to find this code in the disassembler"),(0,i.kt)("li",{parentName:"ul"},"Search for ",(0,i.kt)("inlineCode",{parentName:"li"},"xor")," instructions"),(0,i.kt)("li",{parentName:"ul"},"XOR with a constant value"),(0,i.kt)("li",{parentName:"ul"},"XOR a register with another different register"),(0,i.kt)("li",{parentName:"ul"},"Look out for small loops containing ",(0,i.kt)("inlineCode",{parentName:"li"},"xor")," instructions")),(0,i.kt)("h2",{id:"variations-on-a-theme"},"Variations on a theme"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Single byte encoding is relatively weak"),(0,i.kt)("li",{parentName:"ul"},"Malware authors have implemented more involved encoding schemes"),(0,i.kt)("li",{parentName:"ul"},"Less susceptible to brute-force, but just as simple to implement",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Using addition/subtraction"),(0,i.kt)("li",{parentName:"ul"},"Bit rotation"),(0,i.kt)("li",{parentName:"ul"},"ROT-n"),(0,i.kt)("li",{parentName:"ul"},"Multibyte")))))}d.isMDXComponent=!0}}]);