"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8741],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(t),f=i,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||a;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2916:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],s={},u=void 0,l={unversionedId:"Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions",id:"Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions",title:"22.02.21 - Recursive Functions",description:"Many functions can be defined in terms of other functions",source:"@site/docs/Year1/1009 - Programming Paradigms/Haskell/22.02.21 - Recursive Functions.md",sourceDirName:"Year1/1009 - Programming Paradigms/Haskell",slug:"/Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions",permalink:"/docs/Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"22.02.16 - List Comprehensions",permalink:"/docs/Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions"},next:{title:"22.02.28 - Higher-Order Functions",permalink:"/docs/Year1/Programming Paradigms/Haskell/22.02.28 - Higher-Order Functions"}},c={},p=[{value:"Recursive Function",id:"recursive-function",level:2},{value:"Recursion on Lists",id:"recursion-on-lists",level:2},{value:"Multiple Arguments",id:"multiple-arguments",level:2},{value:"Quicksort",id:"quicksort",level:2}],m={toc:p};function f(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Many functions can be defined in terms of other functions"),(0,a.kt)("h2",{id:"recursive-function"},"Recursive Function"),(0,a.kt)("p",null,"Recursive - Functions can also be defined in terms of themselves"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"fac 0 = 1\nfac n = n * fac(n-1)\n")),(0,a.kt)("p",null,"Reasons why recursion are useful:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Some are simpler to define in terms of other functions (factorial)"),(0,a.kt)("li",{parentName:"ul"},"Many can naturally be defined in terms of themselves"),(0,a.kt)("li",{parentName:"ul"},"Properties of functions defined using recursion can be proved using the simple but powerful mathematical technique of induction")),(0,a.kt)("h2",{id:"recursion-on-lists"},"Recursion on Lists"),(0,a.kt)("p",null,"Recursion not restricted to numbers, can also be used to define functions on lists"),(0,a.kt)("h2",{id:"multiple-arguments"},"Multiple Arguments"),(0,a.kt)("p",null,"Functions with more than one argument can also be defined using recursion "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"zip :: [a] -> [b -> [(a,b)] -- Defines type\nzip []    _    = [] -- Base Case -- If either lists are empty, cant merge, so return empty list\nzip _    []    = [] -- Base Case  \nzip (x:xs) (y:ys) = (x,y) : zip xs ys -- pair up the first values of the list\n")),(0,a.kt)("h2",{id:"quicksort"},"Quicksort"),(0,a.kt)("p",null,"Quicksort algorithm can be specified by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The empty list is already sorted; - base case"),(0,a.kt)("li",{parentName:"ul"},"Non empty lists can be sorted by the tail values $\\le$ the head, sorting the tail values > the head, and then appending the resulting lists on either side of the head value")))}f.isMDXComponent=!0}}]);