"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[7909],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=m(a),c=i,k=u["".concat(o,".").concat(c)]||u[c]||p[c]||l;return a?n.createElement(k,r(r({ref:t},d),{},{components:a})):n.createElement(k,r({ref:t},d))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var m=2;m<l;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},62868:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var n=a(87462),i=(a(67294),a(3905));const l={},r="21. I-Nodes & File Systems",s={unversionedId:"Year2/2007/21",id:"Year2/2007/21",title:"21. I-Nodes & File Systems",description:"02/12/22",source:"@site/docs/Year2/2007/21.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/21",permalink:"/Year2/2007/21",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"20. File System Implementations",permalink:"/Year2/2007/20"},next:{title:"22. File System Recovery & Defag",permalink:"/Year2/2007/22"}},o={},m=[{value:"I-nodes",id:"i-nodes",level:2},{value:"Hard Links",id:"hard-links",level:3},{value:"Soft Links",id:"soft-links",level:3},{value:"Log Structured File System",id:"log-structured-file-system",level:2},{value:"Context",id:"context",level:3},{value:"Concept",id:"concept",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3},{value:"File System Implementations",id:"file-system-implementations",level:2},{value:"Concept",id:"concept-1",level:3},{value:"Virtual File Systems",id:"virtual-file-systems",level:3},{value:"Summary",id:"summary",level:2}],d={toc:m};function p(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"21-i-nodes--file-systems"},"21. I-Nodes & File Systems"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"02/12/22")),(0,i.kt)("h2",{id:"i-nodes"},"I-nodes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Two approaches to share a file",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Hard Links:")," Maintain two (or multiple) references to the same i-node in B and C"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Symbolic/soft links"),": Owner maintains a reference to the i-node. The 'referencer' maintains a small file (has its own i-node) that contains the location and name of the shared file in directory")))),(0,i.kt)("h3",{id:"hard-links"},"Hard Links"),(0,i.kt)("p",null,"Fastest way of linking files!"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Disadvantages:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If the i-node is deleted, any hard link will point to an invalid i-node"),(0,i.kt)("li",{parentName:"ul"},"If the i-node gets deleted and recycled to point to an other file, the hard links will point to the wrong file!"))),(0,i.kt)("li",{parentName:"ul"},"Only solution is to delete the file, and leave the i-node intact if the 'reference count' is larger than 0\n",(0,i.kt)("img",{src:a(13650).Z,width:"857",height:"422"}))),(0,i.kt)("h3",{id:"soft-links"},"Soft Links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Disadvantages:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"They result in an extra file lookup (once the link file has been found, the original file needs to be found as well)"),(0,i.kt)("li",{parentName:"ul"},"They require an extra i-node for the link file"))),(0,i.kt)("li",{parentName:"ul"},"Advantages:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"No problems with deleting the original file -> the file simply does not exist any more"),(0,i.kt)("li",{parentName:"ul"},"They can cross the boundaries of machines. Linked file can be located on a different machine")))),(0,i.kt)("h2",{id:"log-structured-file-system"},"Log Structured File System"),(0,i.kt)("h3",{id:"context"},"Context"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Consider the creation of a new file"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Allocate, initialise and write the i-node for the file"),(0,i.kt)("li",{parentName:"ol"},"Update and writ the directory entry for the file"),(0,i.kt)("li",{parentName:"ol"},"Write the data to the disk"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The corresponding blocks are not necessarily in adjacent locations!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Also in linked lists/FAT file systems blocks can be distributed all over the disk")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Due to seek and rotational delays, hard disks are slow compared to other components in a computer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A log structured file system aims to improve the speed of a file system on a traditional hard disk by minimising head movements and rotational delays using the entire disk as a great big log")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A log is a data structure that is written only at the end"))),(0,i.kt)("h3",{id:"concept"},"Concept"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Log structured file systems buffer read and write operations (i-nodes) in memory, enabling us to write 'larger volumes' in one go")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Once the buffer is full it is 'flushed' to the disk and written as one contiguous segment and the end of a log"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"I-nodes and data are all written to the same segment"),(0,i.kt)("li",{parentName:"ul"},"Finding -nodes (normally at the start of the partition) becomes more difficuly"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"An i-node map is maintained in memory to quickly find the address of i-nodes on the disk\n",(0,i.kt)("img",{src:a(733).Z,width:"787",height:"502"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A cleaner thread is running in the background and spends its time scanning the log circularly and compacting it.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Hard drive is treated as a circular buffer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It removes deleted files and files being used right now are marked as free segments as they will be later written at the end"))),(0,i.kt)("h3",{id:"advantages"},"Advantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Greatly increases disk performance on writes, file creates, deletes"),(0,i.kt)("li",{parentName:"ul"},"Writes are more robust as they are done as a single operation(multiple small writes are more likely to expose the file system to serious inconsistency)")),(0,i.kt)("h3",{id:"disadvantages"},"Disadvantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Not been widely used because it is highly incompatible with existing file systems"),(0,i.kt)("li",{parentName:"ul"},"In addition, the cleaner thread takes additional CPU time")),(0,i.kt)("h2",{id:"file-system-implementations"},"File System Implementations"),(0,i.kt)("p",null,"Deleting a file consists of:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Remove the files directory entry"),(0,i.kt)("li",{parentName:"ol"},"Add the files i-node to the pool of free i-nodes"),(0,i.kt)("li",{parentName:"ol"},"Add the files disk blocks to the free list")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Where does it go wrong:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Directory entry has been deleted and a crash occurs -> i-nodes and disk blocks become inaccessible"),(0,i.kt)("li",{parentName:"ul"},"The directory entry and i-nodes have been released and a crash occurs -> disk blocks become inaccessible"))),(0,i.kt)("li",{parentName:"ul"},"Changing the order of the events does not necessarily resolve the issues"),(0,i.kt)("li",{parentName:"ul"},"Journaling file systems aim at increasing the resilience of file systems against crashes by recording each update to the file system as a transaction")),(0,i.kt)("h3",{id:"concept-1"},"Concept"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Key idea behind a journaling file system is to log all events (transactions) before they take place",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Write the actions that should be undertaken to a log file"),(0,i.kt)("li",{parentName:"ul"},"Carry them out"),(0,i.kt)("li",{parentName:"ul"},"Remove/commit the entries once completed"))),(0,i.kt)("li",{parentName:"ul"},"If a crash happens in the middle of an action the entry in the log file will remain present after the crash"),(0,i.kt)("li",{parentName:"ul"},"The log can be examined after the crash and used to restore the consistency of the file system"),(0,i.kt)("li",{parentName:"ul"},"NTFS and EXT3-4 are examples of journaling file systems")),(0,i.kt)("h3",{id:"virtual-file-systems"},"Virtual File Systems"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Multiple file systems usually coexists on the same computer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"These file systems can be seamlessly integrated by the operating system")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Usually achieved by using virtual file systems (VFS)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"VFS relies on standard object oriented principles (polymorphism)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Can define a generic interface ",(0,i.kt)("inlineCode",{parentName:"p"},"public DataObject readData();")," This would be the POSIX interface containing reads, writes, closes etc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Unix and LInux unify different file systems and present them as a single hierarchy and hides away/abstracts the implementation specific details for the user")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The VFS presents a unified interface to the 'outside'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"File system specific code is dealt with in an ",(0,i.kt)("strong",{parentName:"p"},"implementation layer")," that is ",(0,i.kt)("strong",{parentName:"p"},"clearly seperated from the interface")))),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(37472).Z,width:"715",height:"405"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each VFS interface commonly contains the POSIX system calls"),(0,i.kt)("li",{parentName:"ul"},"Each file system that meets the VFS requirements provides an implementation for the system calls contained in the interface"),(0,i.kt)("li",{parentName:"ul"},"Implementations can be for remote file systems")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Logs - store everything as close as possible"),(0,i.kt)("li",{parentName:"ul"},"Journaling - apply the transaction principle"),(0,i.kt)("li",{parentName:"ul"},"VFS - apply good software design")))}p.isMDXComponent=!0},13650:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221202180950-ca7cdd515a46c4f71da7b4352813f0e5.png"},733:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221202182626-5a421ff6f1baea95eb41358202beeadb.png"},37472:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221202183813-a1ee8c92cf603ba2c27f6258eacdc1ed.png"}}]);