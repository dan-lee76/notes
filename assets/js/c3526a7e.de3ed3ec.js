"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[9551],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return a?n.createElement(g,o(o({ref:t},c),{},{components:a})):n.createElement(g,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8498:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={},o="Haskell",l={unversionedId:"Year1/Programming Paradigms/22.04.01 - Wrap up lecture",id:"Year1/Programming Paradigms/22.04.01 - Wrap up lecture",title:"Haskell",description:"Key Concepts",source:"@site/docs/Year1/1009 - Programming Paradigms/22.04.01 - Wrap up lecture.md",sourceDirName:"Year1/1009 - Programming Paradigms",slug:"/Year1/Programming Paradigms/22.04.01 - Wrap up lecture",permalink:"/Year1/Programming Paradigms/22.04.01 - Wrap up lecture",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"Introduction",permalink:"/Year1/Programming Paradigms/22.01.31 - Introduction"},next:{title:"22.02.02 - Functional Language",permalink:"/Year1/Programming Paradigms/Haskell/22.02.02 - Functional Language"}},s={},p=[{value:"Key Concepts",id:"key-concepts",level:2},{value:"Main Drawbacks",id:"main-drawbacks",level:2},{value:"Key OO features",id:"key-oo-features",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"haskell"},"Haskell"),(0,r.kt)("h2",{id:"key-concepts"},"Key Concepts"),(0,r.kt)("p",null,"Saying what to compute rather than how\n",(0,r.kt)("inlineCode",{parentName:"p"},"sum . map (^2) . filter even"),"\nSeparating pure and inpure code:\n",(0,r.kt)("inlineCode",{parentName:"p"},"Int -> Bool")," vs ",(0,r.kt)("inlineCode",{parentName:"p"},"Int -> IO Bool"),"\nFunctions as first-class citizens:\n",(0,r.kt)("inlineCode",{parentName:"p"},"map :: (a->b) -> [a] -> [b]"),"\nEquational reasoning\n",(0,r.kt)("inlineCode",{parentName:"p"},"map f . map g")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"map (f . g)")),(0,r.kt)("h2",{id:"main-drawbacks"},"Main Drawbacks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Difficult to reason about efficiency "),(0,r.kt)("li",{parentName:"ul"},"Limited tool support for developers"),(0,r.kt)("li",{parentName:"ul"},"Requires ability to think abstractly ")),(0,r.kt)("h1",{id:"java"},"Java"),(0,r.kt)("h2",{id:"key-oo-features"},"Key OO features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Objects"),": This we create using new"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Classes"),": Specify what is in an object and what we can do to them"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Encapsulation (methods and data together"),": Put the methods which act on the data in the class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Abstraction (and interfaces)"),": Only worry about what methods do, not how they are implemented"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Data hiding (restrict access to data"),": Make data private and the 'interface' methods public"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Composition (stronger than aggregation)"),": Objects can contain other objects - and use them to do the work"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inheritance(specialisation, reuse, 'is-a'"),": Reuse things like JButton and JLabel behaviour"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(Sub-type) Polymorphism (dynamic dispatch, late binding"),": Behaviour only known at runtime, also the reason that Lambdas can 'wrap up' a function"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Generics (parametric polymorphism)"),": Implemented using sub-type polymorphism")),(0,r.kt)("p",null,"Everything is an object in Java.\nState is usually mutable\nPrefer iteration as being more efficient"))}u.isMDXComponent=!0}}]);