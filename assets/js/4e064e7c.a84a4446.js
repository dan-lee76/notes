"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[4388],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5754:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={},l=void 0,c={unversionedId:"Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions",id:"Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions",title:"22.02.16 - List Comprehensions",description:"Set Comprehensions",source:"@site/docs/Year1/1009 - Programming Paradigms/Haskell/22.02.16 - List Comprehensions.md",sourceDirName:"Year1/1009 - Programming Paradigms/Haskell",slug:"/Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions",permalink:"/notes/docs/Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/notes/docs/Year1/Programming Paradigms/Haskell/22.02.14 - Defining Functions"},next:{title:"22.02.21 - Recursive Functions",permalink:"/notes/docs/Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions"}},u={},p=[{value:"Set Comprehensions",id:"set-comprehensions",level:2},{value:"Dependant generators",id:"dependant-generators",level:2},{value:"Guards",id:"guards",level:2},{value:"The zip function",id:"the-zip-function",level:2},{value:"String Comprehensions-",id:"string-comprehensions-",level:2}],m={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"set-comprehensions"},"Set Comprehensions"),(0,o.kt)("p",null," Comprehension notation can be used to construct new sets from old sets\n${x^2 | x \\in {1..5}}$"),(0,o.kt)("p",null," In haskell can be done with list comprehension"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"[x^2 | x <- [1..5]]\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The expression ",(0,o.kt)("inlineCode",{parentName:"li"},"x <- [1..5]")," is a generator, states how to generate values for x. Can be used multiple times separated by commas."),(0,o.kt)("li",{parentName:"ul"},"Changing the order of the generators changes the order of the elements in the final list."),(0,o.kt)("li",{parentName:"ul"},"Multiple generators are like nested loops, with later generators being more deeply nested loops")),(0,o.kt)("h2",{id:"dependant-generators"},"Dependant generators"),(0,o.kt)("p",null,"Later generators can depend on the variables that are introduced by earlier generators\nUsing a dependent generator we can define the library function that concatenates a lists of lists"),(0,o.kt)("h2",{id:"guards"},"Guards"),(0,o.kt)("p",null,"Use guards to restrict the values produced by earlier generators\n",(0,o.kt)("inlineCode",{parentName:"p"},"[x | x <- [1..10], even x]"),"\nUsing a guard we can define a function that maps a positive integer to its list of factors"),(0,o.kt)("h2",{id:"the-zip-function"},"The zip function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"zip :: [a] -> [b] -> [(a,b)]\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Maps two lists to a lists of pairs of their corresponding elements."),(0,o.kt)("li",{parentName:"ul"},"Define a function that returns the list of app pairs of adjacent elements from a list "),(0,o.kt)("li",{parentName:"ul"},"Using pairs can define a function that decides if the elements in a list are sorted"),(0,o.kt)("li",{parentName:"ul"},"Using zip can define a function that returns the list of all positions of a value in a list")),(0,o.kt)("h2",{id:"string-comprehensions-"},"String Comprehensions-"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A string is a sequence of characters enclosed in double quotes. Internally, strings are represented as a lists of characters. "),(0,o.kt)("li",{parentName:"ul"},"Any polymorphic function that operates on lists can also be applied to strings"),(0,o.kt)("li",{parentName:"ul"},"List comprehensions can also work them")))}d.isMDXComponent=!0}}]);