"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[5369],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(a),d=n,h=c["".concat(s,".").concat(d)]||c[d]||p[d]||i;return a?r.createElement(h,l(l({ref:t},m),{},{components:a})):r.createElement(h,l({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},58968:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=a(87462),n=(a(67294),a(3905));const i={},l="16.  Heuristics and dynamic programming",o={unversionedId:"Year2/2009/ADE/16",id:"Year2/2009/ADE/16",title:"16.  Heuristics and dynamic programming",description:"27/03/23",source:"@site/docs/Year2/2009/ADE/16.md",sourceDirName:"Year2/2009/ADE",slug:"/Year2/2009/ADE/16",permalink:"/Year2/2009/ADE/16",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"14. Map ADT and hashtables",permalink:"/Year2/2009/ADE/14"},next:{title:"Coursework 02 Revision",permalink:"/Year2/2009/ADE/cw02"}},s={},u=[{value:"General Methods",id:"general-methods",level:2},{value:"Brute Force",id:"brute-force",level:3},{value:"Divide and Conquer",id:"divide-and-conquer",level:3},{value:"Heuristics",id:"heuristics",level:3},{value:"In exact methods",id:"in-exact-methods",level:4},{value:"Inexact Methods",id:"inexact-methods",level:4},{value:"Greedy Algorithms",id:"greedy-algorithms",level:3},{value:"Optimal",id:"optimal",level:4},{value:"Non-optimal",id:"non-optimal",level:4},{value:"Dynamic Programming",id:"dynamic-programming",level:2}],m={toc:u};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"16--heuristics-and-dynamic-programming"},"16.  Heuristics and dynamic programming"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"27/03/23")),(0,n.kt)("h2",{id:"general-methods"},"General Methods"),(0,n.kt)("p",null,"Various general methods (paradigms) for finding solutions to problems\nCommon ones includes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'Brute force - "generate and test"'),(0,n.kt)("li",{parentName:"ul"},"Divide-and-conquer"),(0,n.kt)("li",{parentName:"ul"},"Heuristics"),(0,n.kt)("li",{parentName:"ul"},"Dynamic Programming")),(0,n.kt)("h3",{id:"brute-force"},"Brute Force"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Roughly generate and test",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Generate all potential solutions"),(0,n.kt)("li",{parentName:"ul"},"Test for which ones are actual solutions"))),(0,n.kt)("li",{parentName:"ul"},"Can be useful in some (small) cases")),(0,n.kt)("h3",{id:"divide-and-conquer"},"Divide and Conquer"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recursively, break the problem into smaller pieces, solve them, and put them back together"),(0,n.kt)("li",{parentName:"ul"},"Merge-sort and quick sort are classic example")),(0,n.kt)("h3",{id:"heuristics"},"Heuristics"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Heuristic = rule of thumb"),(0,n.kt)("li",{parentName:"ul"},"Generally, mean to mean something that gives better decisions, than the naive methods, but still not necessarily optimal"),(0,n.kt)("li",{parentName:"ul"},"Two common type (the term is over-loaded)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Decisions within a procedure that gives exact/optimal answers are designed to make it go faster"),(0,n.kt)("li",{parentName:"ul"},"Decisions within a procedure that might not give optimal answers, but are designed to give good answers that are impractical to obtain otherwise")))),(0,n.kt)("h4",{id:"in-exact-methods"},"In exact methods"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"General methods that works in an algorithm that does give exact or optimal answers",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"But need the heuristics to decrease the (average/typical) runtime"),(0,n.kt)("li",{parentName:"ul"},"Examples = Admissible heuristic in A* search")))),(0,n.kt)("h4",{id:"inexact-methods"},"Inexact Methods"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"These are general methods that (generally) are not be guaranteed to give the best possible answer, but that can give good answers quickly"),(0,n.kt)("li",{parentName:"ul"},"Used on problems when the exact methods are too slow"),(0,n.kt)("li",{parentName:"ul"},"It is a vast research area")),(0,n.kt)("h3",{id:"greedy-algorithms"},"Greedy Algorithms"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Common heuristic is to be greedy"),(0,n.kt)("li",{parentName:"ul"},"Take the decision that looks best in the short term - without looking ahead")),(0,n.kt)("h4",{id:"optimal"},"Optimal"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Sometimes greedy algorithms can still give optimal answers"),(0,n.kt)("li",{parentName:"ul"},"Prims algorithm for constructing a minimal spanning tree is a greedy algorithm:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Just adds the shortest edge without worrying about the overall structure, without looking ahead"),(0,n.kt)("li",{parentName:"ul"},"Makes a locally optimal choice at each step"),(0,n.kt)("li",{parentName:"ul"},"Turns out that this is sufficient for the final answer to be optimal")))),(0,n.kt)("h4",{id:"non-optimal"},"Non-optimal"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Usually greedy algorithms cannot guarantee to give optimal answers"),(0,n.kt)("li",{parentName:"ul"},"Often still give (nearly) optimal answers in practice")),(0,n.kt)("h2",{id:"dynamic-programming"},"Dynamic Programming"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"DP is a general method that can be suitable when the optimal solutions satisfy a decomposition property"),(0,n.kt)("li",{parentName:"ul"},"General idea is roughly:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Splitting an optimal solution into sub-solutions corresponds to splitting the problem into sub-problems and the sub-solutions are optimal for the sub-problems"),(0,n.kt)("li",{parentName:"ul"},"So optimal solutions can be built out of optimal solutions of (smaller) sub-problems"),(0,n.kt)("li",{parentName:"ul"},"Hence: ",(0,n.kt)("em",{parentName:"li"},"solve small sub-problems first, then build up towards the full solution"))))))}p.isMDXComponent=!0}}]);