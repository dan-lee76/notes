"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3759],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,k=u["".concat(s,".").concat(d)]||u[d]||p[d]||i;return a?r.createElement(k,l(l({ref:t},m),{},{components:a})):r.createElement(k,l({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5083:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const i={},l="4. RPCs & RMI",o={unversionedId:"Year2/2014/04",id:"Year2/2014/04",title:"4. RPCs & RMI",description:"14/02/23",source:"@site/docs/Year2/2014/04.md",sourceDirName:"Year2/2014",slug:"/Year2/2014/04",permalink:"/Year2/2014/04",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"3. (Network) Security",permalink:"/Year2/2014/03"},next:{title:"Lab Work Answers",permalink:"/Year2/2014/lab_work"}},s={},c=[{value:"Remote Procedure Calls",id:"remote-procedure-calls",level:2},{value:"Programming with Interfaces",id:"programming-with-interfaces",level:3},{value:"Local vs Remote procedure calls",id:"local-vs-remote-procedure-calls",level:3},{value:"RPC call semantics",id:"rpc-call-semantics",level:3},{value:"Transparency",id:"transparency",level:3},{value:"Remote Method Invocation",id:"remote-method-invocation",level:2},{value:"Distributed Objects",id:"distributed-objects",level:3},{value:"Implementing RMI",id:"implementing-rmi",level:3},{value:"Java RMI",id:"java-rmi",level:2},{value:"Serialisable vs Remote",id:"serialisable-vs-remote",level:3},{value:"RMI Registry",id:"rmi-registry",level:3}],m={toc:c};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"4-rpcs--rmi"},"4. RPCs & RMI"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"14/02/23")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://moodle.nottingham.ac.uk/pluginfile.php/9375263/mod_page/content/2/05%20RPC%20and%20RMI.pdf"},"MoodlePDF")),(0,n.kt)("h2",{id:"remote-procedure-calls"},"Remote Procedure Calls"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Concept that programmers should be able to invoke remote operations in the same way as local procedure calls"),(0,n.kt)("li",{parentName:"ul"},"The starting point is the programmers perspective"),(0,n.kt)("li",{parentName:"ul"},"Three key considerations; Interfaces, Semantics, Transparency")),(0,n.kt)("h3",{id:"programming-with-interfaces"},"Programming with Interfaces"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Many languages support modularisation with programmer-defined interfaces. Defines a public contract"),(0,n.kt)("li",{parentName:"ul"},"Code external to the module can only use things in the interface. Need to understand the interface, not the implementation"),(0,n.kt)("li",{parentName:"ul"},"A module can be replaced by another with the same interface and nothing else needs to be changed")),(0,n.kt)("h3",{id:"local-vs-remote-procedure-calls"},"Local vs Remote procedure calls"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Different modules may be running in different processes but can still have defined interfaces"),(0,n.kt)("li",{parentName:"ul"},"Not normally possible for code in one process to access variables in another process. Single machine blocks of shared memory can be created to share variables between processes"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Call by reference")," parameter passing is not possible between processes over networks"),(0,n.kt)("li",{parentName:"ul"},"A reference or pointer is not meaningful in another process",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Reference = an address in local process memory"))),(0,n.kt)("li",{parentName:"ul"},"Parameters need to be clearly identifiable as passed ",(0,n.kt)("strong",{parentName:"li"},"to")," the procedure ",(0,n.kt)("strong",{parentName:"li"},"(in)"),", returned ",(0,n.kt)("strong",{parentName:"li"},"from")," it ",(0,n.kt)("strong",{parentName:"li"},"(out)")," or ",(0,n.kt)("strong",{parentName:"li"},"both (inout)"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Interface definition languages (IDLs)")," - Interfaces defined using a language built-in interface."),(0,n.kt)("h3",{id:"rpc-call-semantics"},"RPC call semantics"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Local procedure call semantics are always exactly one"),(0,n.kt)("li",{parentName:"ul"},"Remote procedure calls can have different semantics",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Maybe")," semantics - executed once or not at all"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"At-least-once")," semantics - the caller receives a result or an exception is raised"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"At-most-once")," semantics - the caller receives a result or an exception is raised")))),(0,n.kt)("h3",{id:"transparency"},"Transparency"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"RPCs are a good example of access (and location) transparency"),(0,n.kt)("li",{parentName:"ul"},"In practice is often limited. Remote operations can ",(0,n.kt)("strong",{parentName:"li"},"fail")," in more and different ways. Also typically slower"),(0,n.kt)("li",{parentName:"ul"},"Most RPC systems will strongly resemble local procedure calls but with some additional elements")),(0,n.kt)("h2",{id:"remote-method-invocation"},"Remote Method Invocation"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Applies the concept of RPC to distributed objects"),(0,n.kt)("li",{parentName:"ul"},"Same as RPC in terms of interfaces, call semantics and transparency"),(0,n.kt)("li",{parentName:"ul"},"Also allows object-oriented concepts to be used"),(0,n.kt)("li",{parentName:"ul"},"Also allows references to objects to passed over the network, giving more options for parameter passing")),(0,n.kt)("h3",{id:"distributed-objects"},"Distributed Objects"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Since each object encapsulates its own state, different objects in the same system can be hosted by different processes"),(0,n.kt)("li",{parentName:"ul"},"Adopting the client-server paradigm, invoking a method on an object in another process is a RMI"),(0,n.kt)("li",{parentName:"ul"},"A remote object reference represents a particular object anywhere with a distributed system"),(0,n.kt)("li",{parentName:"ul"},"A remote interface specifies which of an object methods can be invoked remotely")),(0,n.kt)("h3",{id:"implementing-rmi"},"Implementing RMI"),(0,n.kt)("h2",{id:"java-rmi"},"Java RMI"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Java-specific RMI middle-ware, and specific to the Java language."),(0,n.kt)("li",{parentName:"ul"},"Many similarities with other distributed object systems (COBRA)")),(0,n.kt)("p",null,"Remote interfaces in Java RMI - Defines using Javas ",(0,n.kt)("inlineCode",{parentName:"p"},"interface")," mechanism. However has to extend ",(0,n.kt)("inlineCode",{parentName:"p"},"java.rmi.remote")," and throw a ",(0,n.kt)("inlineCode",{parentName:"p"},"RemoteException"),". Arguments and return values must be serialisable "),(0,n.kt)("h3",{id:"serialisable-vs-remote"},"Serialisable vs Remote"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Primitive types - converted to a standard external representation and sent to the other processes"),(0,n.kt)("li",{parentName:"ul"},"Instances which implement ",(0,n.kt)("inlineCode",{parentName:"li"},"java.io.Serializable")," - converted to a standard external representation (send a copy)"),(0,n.kt)("li",{parentName:"ul"},"Instances which implement ",(0,n.kt)("inlineCode",{parentName:"li"},"java.rmi.Remote")," - Causes a new remote reference to be created and sent (send a remote reference)")),(0,n.kt)("p",null,"Implementing a Remote Object - Each remote interfaces needs an implementation that will be run in the server process. Implementation extends ",(0,n.kt)("inlineCode",{parentName:"p"},"java.rmi.server.UnicastRemoteObject")," and constructor throws ",(0,n.kt)("inlineCode",{parentName:"p"},"java.rmi.RemoteException")),(0,n.kt)("h3",{id:"rmi-registry"},"RMI Registry"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"RMI provides a standard broker application called the rmiregistry"),(0,n.kt)("li",{parentName:"ul"},"Remote objects are identified using URL-like strings"),(0,n.kt)("li",{parentName:"ul"},"Before a remote object can be found its hosting process must register it using ",(0,n.kt)("inlineCode",{parentName:"li"},"bind")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"rebind")),(0,n.kt)("li",{parentName:"ul"},"A client can then ",(0,n.kt)("inlineCode",{parentName:"li"},"list")," registered objects and/or obtain a remote reference to a registered object with lookup")))}p.isMDXComponent=!0}}]);