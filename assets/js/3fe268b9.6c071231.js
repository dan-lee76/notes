"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[2901],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=n,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return a?r.createElement(k,l(l({ref:t},u),{},{components:a})):r.createElement(k,l({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},78583:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const i={},l="Revision",o={unversionedId:"Year2/2014/revision",id:"Year2/2014/revision",title:"Revision",description:"Things to go over for DS",source:"@site/docs/Year2/2014/revision.md",sourceDirName:"Year2/2014",slug:"/Year2/2014/revision",permalink:"/Year2/2014/revision",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"Lab Work Answers",permalink:"/Year2/2014/lab_work"},next:{title:"Year in Industry",permalink:"/Year2/Misc/Industry"}},s={},p=[{value:"Things to go over for DS",id:"things-to-go-over-for-ds",level:2},{value:"Content to revise from exam paper",id:"content-to-revise-from-exam-paper",level:2},{value:"Things to look over",id:"things-to-look-over",level:2}],u={toc:p};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"revision"},"Revision"),(0,n.kt)("h2",{id:"things-to-go-over-for-ds"},"Things to go over for DS"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Nameserver - Stores the records of a DNS")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Marshalling - Process of converting program data to network form (JSON)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"NAT - Device change the local IP addresses and ports when they pass on packets")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"RPC - Pretend remote device is actually local. It is an interface. Call by reference parameter passing is ",(0,n.kt)("strong",{parentName:"p"},"not")," possible. (Must be pass by copy). Typically defined as an interface. Memory is not shared. Much slower and subject to failures")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"RMI - Applies RPC to objects."),(0,n.kt)("p",{parentName:"li"}," ",(0,n.kt)("img",{parentName:"p",src:"https://notes.danlee.uk/assets/images/20230214221906-461b0a1215d5bb10372090163cc37ee0.png",alt:null})))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"REST"),(0,n.kt)("li",{parentName:"ul"},"Handling Requests",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Static file serving - the web server uses the URL path to identify a file which is copied back as the response body"),(0,n.kt)("li",{parentName:"ul"},"CGI - the server executes a program (identified by the URL) in a separate process to handle the request"),(0,n.kt)("li",{parentName:"ul"},"Dynamically loadable module - the server loads a runtime engine to execute a file in a scripting language"),(0,n.kt)("li",{parentName:"ul"},"Reverse proxy - the original server becomes an HTTP client to pass the request onto another web server"),(0,n.kt)("li",{parentName:"ul"},"Custom web server written using a language-specific web server framework - the web server includes the code to handle specific requests"))),(0,n.kt)("li",{parentName:"ul"},"Architectural Models ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Proxy - Object/Service presents the same interface as a remote service but more locally, and passes on requests"),(0,n.kt)("li",{parentName:"ul"},"Broker - Common point where service providers can register their existence so that clients can find them"),(0,n.kt)("li",{parentName:"ul"},"Layering - Partitioned into a number of layers, with a given layer making use of the services offered by the layer below"),(0,n.kt)("li",{parentName:"ul"},"Tiered - System divided into distinct layers of tiers, each of which is comprised of specific processes"))),(0,n.kt)("li",{parentName:"ul"},"Distributed System failures",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Heterogeneity - Coping with system component variability"),(0,n.kt)("li",{parentName:"ul"},"Failure Handling - Coping with partial failure"),(0,n.kt)("li",{parentName:"ul"},"Concurrency - Correctness and performance with concurrency"),(0,n.kt)("li",{parentName:"ul"},"Scalability - Able to adapt based on the current situation, being able to add or remove nodes"))),(0,n.kt)("li",{parentName:"ul"},"Indirect Communication",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Space Uncoupling - The sender does not (need to) know the identity of the receiver and vice versa. (Partitions can be replaced, updated, replicated, migrated)"),(0,n.kt)("li",{parentName:"ul"},"Time Uncoupling - The sender(s) and receiver(s) can have independent lifetimes. E.g. in a volatile environment "))),(0,n.kt)("li",{parentName:"ul"},"Group Communication",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Application-level abstraction of multicast communication. e.g. fault-tolerance, reliable distribution to large numbers"),(0,n.kt)("li",{parentName:"ul"},"Open-Group - Non-members can send to closed groups"),(0,n.kt)("li",{parentName:"ul"},"Non-overlapping groups - Each process can be a member of at most one group "),(0,n.kt)("li",{parentName:"ul"},"Synchronous group communication - Does a sender blocks until all group members have received the message/replied"),(0,n.kt)("li",{parentName:"ul"},"Reliability - Integrity (Message received is same as one sent), Validity (Outgoing msg is eventually delivered); Plus agreement (If the message is delivered to one process, then it is delivered to all processes in the group)"))),(0,n.kt)("li",{parentName:"ul"},"Publish-Subscribe ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Publish info, and services subscribe. e.g. finance info, live feeds"),(0,n.kt)("li",{parentName:"ul"},"Characteristics: Heterogeneity, async, delivery guarantee"),(0,n.kt)("li",{parentName:"ul"},"Centralised event service - Relatively easy to construct, the event service becomes a bottleneck"),(0,n.kt)("li",{parentName:"ul"},"Distributed event service - More complex, but more scalable"))),(0,n.kt)("li",{parentName:"ul"},"Event routing",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Flooding - Every event is sent to every event broker"),(0,n.kt)("li",{parentName:"ul"},"Filtering - Event brokers share subs info and forward events to where valid subs exist"),(0,n.kt)("li",{parentName:"ul"},"Rendezvous - There is a way to identify particular event brokers to handle matching events and subs"))),(0,n.kt)("li",{parentName:"ul"},"Message Queues",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"1-1 communication"),(0,n.kt)("li",{parentName:"ul"},"Middleware"),(0,n.kt)("li",{parentName:"ul"},"Space uncoupled - Messages are sent via message queues"),(0,n.kt)("li",{parentName:"ul"},"Time uncoupled - message queues exist independently of message producers and consumers"),(0,n.kt)("li",{parentName:"ul"},"Operations",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Send - Add to queue"),(0,n.kt)("li",{parentName:"ul"},"Receive - Take from queue"),(0,n.kt)("li",{parentName:"ul"},"Poll - Check head of queue"),(0,n.kt)("li",{parentName:"ul"},"Notify - Inform consumer msg is available"))),(0,n.kt)("li",{parentName:"ul"},"Usually persistent and reliable"))),(0,n.kt)("li",{parentName:"ul"},"DSM",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"System emulate shared memory between processes on different computers"))),(0,n.kt)("li",{parentName:"ul"},"Tuple Spaces",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Write/read/take(read&delete)"),(0,n.kt)("li",{parentName:"ul"},"Read and take done by pattern matching"),(0,n.kt)("li",{parentName:"ul"},"Both space and time uncoupled")))),(0,n.kt)("h2",{id:"content-to-revise-from-exam-paper"},"Content to revise from exam paper"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Nodes do not run an OS, run directly on the node hardware"),(0,n.kt)("li",{parentName:"ul"},"Replication - Send msgs to one another so theyre in sync",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"For add, it would wait for responses from all the servers"),(0,n.kt)("li",{parentName:"ul"},"If server fails to respond, then marked as failed and carried out on a alternative server"))),(0,n.kt)("li",{parentName:"ul"},"Procs and cons of REST")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Form Style"),(0,n.kt)("th",{parentName:"tr",align:null},"REST"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"+ Works directly with form"),(0,n.kt)("td",{parentName:"tr",align:null},"- Requires AJAX or client")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"+ Direct feedback to user"),(0,n.kt)("td",{parentName:"tr",align:null},"- ditto")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"- ad hoc signalling of errors to clients"),(0,n.kt)("td",{parentName:"tr",align:null},"+Easily extend interfaces")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"- Harder to type param"),(0,n.kt)("td",{parentName:"tr",align:null},"Standard ways to signal errors/ type param")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Failures which can occur during RMI",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Process Failure - Server may have crashed (or been restarted)"),(0,n.kt)("li",{parentName:"ul"},"Network Failure - Network may become partitioned, or the loss rate too high to maintain the TCP connection"),(0,n.kt)("li",{parentName:"ul"},"TCP connection request would fail/time out, client runtime would throw a RemoteException"),(0,n.kt)("li",{parentName:"ul"},"Application specific errors"))),(0,n.kt)("li",{parentName:"ul"},"Benefits of having 2 DNS administrative zones",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Can tolerate 1 server crashing or being unreachable, as other server can respond, but cant deal with both of them crash"))),(0,n.kt)("li",{parentName:"ul"},"Setting up a server for Java RMI, need to register the object with the RMIRegistry using ",(0,n.kt)("inlineCode",{parentName:"li"},"java.rmi.Naming.rebind")," with the new name")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Transactions: Assume the process can be trusted, there are no arbitrary failures and communication is reliable. Set aside a specialised coordinator process to coordinate the entire transaction. Broken into two sections; Tentatively, performing the operation. Making operation permanent by committing it."),(0,n.kt)("li",{parentName:"ul"},"Partitions - Split up a network, either physically or virtually. This increases performance, enhances security, simplifies network management, and also compliance and regulatory requirements. ")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null}),(0,n.kt)("th",{parentName:"tr",align:null},"Internet Model"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"5"),(0,n.kt)("td",{parentName:"tr",align:null},"Application")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"4"),(0,n.kt)("td",{parentName:"tr",align:null},"Transport (TCP/UDP)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"3"),(0,n.kt)("td",{parentName:"tr",align:null},"Internet (IP)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"2"),(0,n.kt)("td",{parentName:"tr",align:null},"Network interface/Link")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"1"),(0,n.kt)("td",{parentName:"tr",align:null},"Physical")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"DNS Administrative Domain - Is a subset of namespace with a single administrative authority. Corresponds to a domain name suffix. Each authority has complete control over its own administrative zones."),(0,n.kt)("li",{parentName:"ul"},"Name Server - Records identify responsible name servers")),(0,n.kt)("h2",{id:"things-to-look-over"},"Things to look over"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"DNS administration "),(0,n.kt)("li",{parentName:"ul"},"HTTP Request order thing (One of the past papers)")))}m.isMDXComponent=!0}}]);