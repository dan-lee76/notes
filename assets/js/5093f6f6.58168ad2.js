"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8871],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,d=m["".concat(u,".").concat(f)]||m[f]||c[f]||i;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},339:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},u="Game Playing",p={unversionedId:"Year1/AI/22.03.15 - Game Playing",id:"Year1/AI/22.03.15 - Game Playing",title:"Game Playing",description:"Minimax",source:"@site/docs/Year1/1008-AI/22.03.15 - Game Playing.md",sourceDirName:"Year1/1008-AI",slug:"/Year1/AI/22.03.15 - Game Playing",permalink:"/Year1/AI/22.03.15 - Game Playing",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"22.03.08 - Heuristic Search",permalink:"/Year1/AI/22.03.08 - Heuristic Search"},next:{title:"22.03.22 - Evolutionary Algorithms",permalink:"/Year1/AI/22.03.22 - Evolutionary Algorithms"}},s={},c=[{value:"Minimax",id:"minimax",level:2}],m={toc:c};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"game-playing"},"Game Playing"),(0,i.kt)("h2",{id:"minimax"},"Minimax"),(0,i.kt)("p",null,"An opponent tried to prevent your win at every move\n1944 - John von Neumann"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A search method, maximise your position whilst minimising your opponents")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Utility Function"),": in order to implement we need a method of measuring how good a position is"),(0,i.kt)("p",null,"Nim - Start with a pile of tokens, at each move the player must divide the tokens into two non-empty, non-equal piles."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Efficiency of the search. Game trees are very big. Evaluation of positions is time-consuming"),(0,i.kt)("li",{parentName:"ul"},"To reduce the number of nodes to be evaluated can explore: Alpha-beta search based on minimax. Better estimate of utility values")),(0,i.kt)("p",null,"Minmax uses BFS"),(0,i.kt)("h1",{id:"alpha-beta-pruning"},"Alpha Beta Pruning"),(0,i.kt)("p",null,"Is about reducing the size of the search tree"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cannot prune nodes if doing BFS. Form of pruning relies on doing a DFS"),(0,i.kt)("li",{parentName:"ul"},"To maximise pruning: first expand the best children. Cannot know which ones are really best. Use heuristics for the 'best-first' ordering"),(0,i.kt)("li",{parentName:"ul"},"alpha $\\alpha$: values are stored with each MAX node"),(0,i.kt)("li",{parentName:"ul"},"beta $\\beta$: values are stored with each MIN node")),(0,i.kt)("h1",{id:"computerphile-video"},"Computerphile video"),(0,i.kt)("p",null,"MinMax - Trying to maximise the min value. Best choice available for opponent is as bad as possible, and good as possible for the AI"))}f.isMDXComponent=!0}}]);