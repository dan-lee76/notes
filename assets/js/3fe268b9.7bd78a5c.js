"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[2901],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(r),d=n,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return r?a.createElement(k,l(l({ref:t},p),{},{components:r})):a.createElement(k,l({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},78583:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=r(87462),n=(r(67294),r(3905));const i={},l="Revision",o={unversionedId:"Year2/2014/revision",id:"Year2/2014/revision",title:"Revision",description:"Things to go over for DS",source:"@site/docs/Year2/2014/revision.md",sourceDirName:"Year2/2014",slug:"/Year2/2014/revision",permalink:"/Year2/2014/revision",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"Lab Work Answers",permalink:"/Year2/2014/lab_work"},next:{title:"Year in Industry",permalink:"/Year2/Misc/Industry"}},s={},u=[{value:"Things to go over for DS",id:"things-to-go-over-for-ds",level:2}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"revision"},"Revision"),(0,n.kt)("h2",{id:"things-to-go-over-for-ds"},"Things to go over for DS"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Nameserver - Stores the records of a DNS")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Marshalling - Process of converting program data to network form (JSON)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"NAT - Device change the local IP addresses and ports when they pass on packets")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"RPC - Pretend remote device is actually local. It is an interface. Call by reference parameter passing is ",(0,n.kt)("strong",{parentName:"p"},"not")," possible. (Must be pass by copy). Typically defined as an interface. Memory is not shared. Much slower and subject to failures")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"RMI - Applies RPC to objects."),(0,n.kt)("p",{parentName:"li"}," ",(0,n.kt)("img",{parentName:"p",src:"https://notes.danlee.uk/assets/images/20230214221906-461b0a1215d5bb10372090163cc37ee0.png",alt:null})))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"REST"),(0,n.kt)("li",{parentName:"ul"},"Handling Requests",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Static file serving - the web server uses the URL path to identify a file which is copied back as the response body"),(0,n.kt)("li",{parentName:"ul"},"CGI - the server executes a program (identified by the URL) in a separate process to handle the request"),(0,n.kt)("li",{parentName:"ul"},"Dynamically loadable module - the server loads a runtime engine to execute a file in a scripting language"),(0,n.kt)("li",{parentName:"ul"},"Reverse proxy - the original server becomes an HTTP client to pass the request onto another web server"),(0,n.kt)("li",{parentName:"ul"},"Custom web server written using a language-specific web server framework - the web server includes the code to handle specific requests"))),(0,n.kt)("li",{parentName:"ul"},"Architectural Models ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Proxy - Object/Service presents the same interface as a remote service but more locally, and passes on requests"),(0,n.kt)("li",{parentName:"ul"},"Broker - Common point where service providers can register their existence so that clients can find them"),(0,n.kt)("li",{parentName:"ul"},"Layering - Partitioned into a number of layers, with a given layer making use of the services offered by the layer below"),(0,n.kt)("li",{parentName:"ul"},"Tiered - System divided into distinct layers of tiers, each of which is comprised of specific processes"))),(0,n.kt)("li",{parentName:"ul"},"Distributed System failures",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Heterogeneity - Coping with system component variability"),(0,n.kt)("li",{parentName:"ul"},"Failure Handling - Coping with partial failure"),(0,n.kt)("li",{parentName:"ul"},"Concurrency - Correctness and performance with concurrency"),(0,n.kt)("li",{parentName:"ul"},"Scalability - Able to adapt based on the current situation, being able to add or remove nodes"))),(0,n.kt)("li",{parentName:"ul"},"Indirect Communication",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Space Uncoupling - The sender does not (need to) know the identity of the receiver and vice versa. (Partitions can be replaced, updated, replicated, migrated)"),(0,n.kt)("li",{parentName:"ul"},"Time Uncoupling - The sender(s) and receiver(s) can have independent lifetimes. E.g. in a volatile environment "))),(0,n.kt)("li",{parentName:"ul"},"Group Communication",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Application-level abstraction of multicast communication. e.g. fault-tolerance, reliable distribution to large numbers"),(0,n.kt)("li",{parentName:"ul"},"Open-Group - Non-members can send to closed groups"),(0,n.kt)("li",{parentName:"ul"},"Non-overlapping groups - Each process can be a member of at most one group "),(0,n.kt)("li",{parentName:"ul"},"Synchronous group communication - Does a sender blocks until all group members have received the message/replied"),(0,n.kt)("li",{parentName:"ul"},"Reliability - Integrity (Message received is same as one sent), Validity (Outgoing msg is eventually delivered); Plus agreement (If the message is delivered to one process, then it is delivered to all processes in the group)"))),(0,n.kt)("li",{parentName:"ul"},"Publish-Subscribe ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Publish info, and services subscribe. e.g. finance info, live feeds"),(0,n.kt)("li",{parentName:"ul"},"Characteristics: Heterogeneity, async, delivery guarantee"),(0,n.kt)("li",{parentName:"ul"},"Centralised event service - Relatively easy to construct, the event service becomes a bottleneck"),(0,n.kt)("li",{parentName:"ul"},"Distributed event service - More complex, but more scalable"))),(0,n.kt)("li",{parentName:"ul"},"Event routing",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Flooding - Every event is sent to every event broker"),(0,n.kt)("li",{parentName:"ul"},"Filtering - Event brokers share subs info and forward events to where valid subs exist"),(0,n.kt)("li",{parentName:"ul"},"Rendezvous - There is a way to identify particular event brokers to handle matching events and subs"))),(0,n.kt)("li",{parentName:"ul"},"Message Queues",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"1-1 communication"),(0,n.kt)("li",{parentName:"ul"},"Middleware"),(0,n.kt)("li",{parentName:"ul"},"Space uncoupled - Messages are sent via message queues"),(0,n.kt)("li",{parentName:"ul"},"Time uncoupled - message queues exist independently of message producers and consumers"),(0,n.kt)("li",{parentName:"ul"},"Operations",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Send - Add to queue"),(0,n.kt)("li",{parentName:"ul"},"Receive - Take from queue"),(0,n.kt)("li",{parentName:"ul"},"Poll - Check head of queue"),(0,n.kt)("li",{parentName:"ul"},"Notify - Inform consumer msg is available"))),(0,n.kt)("li",{parentName:"ul"},"Usually persistent and reliable"))),(0,n.kt)("li",{parentName:"ul"},"DSM",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"System emulate shared memory between processes on different computers"))),(0,n.kt)("li",{parentName:"ul"},"Tuple Spaces",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Write/read/take(read&delete)"),(0,n.kt)("li",{parentName:"ul"},"Read and take done by pattern matching"),(0,n.kt)("li",{parentName:"ul"},"Both space and time uncoupled")))))}c.isMDXComponent=!0}}]);