"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8741],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),f=a,d=p["".concat(l,".").concat(f)]||p[f]||m[f]||i;return n?r.createElement(d,s(s({ref:t},c),{},{components:n})):r.createElement(d,s({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2916:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),s=["components"],o={},l=void 0,u={unversionedId:"Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions",id:"Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions",title:"22.02.21 - Recursive Functions",description:"Many functions can be defined in terms of other functions",source:"@site/docs/Year1/1009 - Programming Paradigms/Haskell/22.02.21 - Recursive Functions.md",sourceDirName:"Year1/1009 - Programming Paradigms/Haskell",slug:"/Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions",permalink:"/Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"22.02.16 - List Comprehensions",permalink:"/Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions"},next:{title:"22.02.28 - Higher-Order Functions",permalink:"/Year1/Programming Paradigms/Haskell/22.02.28 - Higher-Order Functions"}},c={},m=[{value:"Recursive Function",id:"recursive-function",level:2},{value:"Recursion on Lists",id:"recursion-on-lists",level:2},{value:"Multiple Arguments",id:"multiple-arguments",level:2},{value:"Quicksort",id:"quicksort",level:2}],p={toc:m};function f(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Many functions can be defined in terms of other functions"),(0,i.kt)("h2",{id:"recursive-function"},"Recursive Function"),(0,i.kt)("p",null,"Recursive - Functions can also be defined in terms of themselves"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-haskell"},"fac 0 = 1\nfac n = n * fac(n-1)\n")),(0,i.kt)("p",null,"Reasons why recursion are useful:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Some are simpler to define in terms of other functions (factorial)"),(0,i.kt)("li",{parentName:"ul"},"Many can naturally be defined in terms of themselves"),(0,i.kt)("li",{parentName:"ul"},"Properties of functions defined using recursion can be proved using the simple but powerful mathematical technique of induction")),(0,i.kt)("h2",{id:"recursion-on-lists"},"Recursion on Lists"),(0,i.kt)("p",null,"Recursion not restricted to numbers, can also be used to define functions on lists"),(0,i.kt)("h2",{id:"multiple-arguments"},"Multiple Arguments"),(0,i.kt)("p",null,"Functions with more than one argument can also be defined using recursion "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-haskell"},"zip :: [a] -> [b -> [(a,b)] -- Defines type\nzip []    _    = [] -- Base Case -- If either lists are empty, cant merge, so return empty list\nzip _    []    = [] -- Base Case  \nzip (x:xs) (y:ys) = (x,y) : zip xs ys -- pair up the first values of the list\n")),(0,i.kt)("h2",{id:"quicksort"},"Quicksort"),(0,i.kt)("p",null,"Quicksort algorithm can be specified by:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The empty list is already sorted; - base case"),(0,i.kt)("li",{parentName:"ul"},"Non empty lists can be sorted by the tail values ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mo",{parentName:"mrow"},"\u2264")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\le")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,i.kt)("span",{parentName:"span",className:"mrel"},"\u2264")))))," the head, sorting the tail values > the head, and then appending the resulting lists on either side of the head value")))}f.isMDXComponent=!0}}]);