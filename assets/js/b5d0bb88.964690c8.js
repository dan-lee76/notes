"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3381],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4917:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={},s=void 0,c={unversionedId:"Year1/Programming Paradigms/Java/22.02.18 - Inheritance and Class Diagrams",id:"Year1/Programming Paradigms/Java/22.02.18 - Inheritance and Class Diagrams",title:"22.02.18 - Inheritance and Class Diagrams",description:"Can use inheritance/sub type polymorphism for re-use and adaptation",source:"@site/docs/Year1/1009 - Programming Paradigms/Java/22.02.18 - Inheritance and Class Diagrams.md",sourceDirName:"Year1/1009 - Programming Paradigms/Java",slug:"/Year1/Programming Paradigms/Java/22.02.18 - Inheritance and Class Diagrams",permalink:"/Year1/Programming Paradigms/Java/22.02.18 - Inheritance and Class Diagrams",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Constructors",permalink:"/Year1/Programming Paradigms/Java/22.02.17 - Aggregation"},next:{title:"Class Diagrams",permalink:"/Year1/Programming Paradigms/Java/22.02.24 - Class Diagrams & Exceptions"}},p={},m=[{value:"Polymorphism",id:"polymorphism",level:2},{value:"Parametric Polymorphism:",id:"parametric-polymorphism",level:3},{value:"Ad-hoc polymorphism (function overloading)",id:"ad-hoc-polymorphism-function-overloading",level:3},{value:"Sub-type polymorphism (sub classing)",id:"sub-type-polymorphism-sub-classing",level:3}],u={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Can use inheritance/sub type polymorphism for re-use and adaptation\nInheritance is one of the most important ideas in the object oriented paradigm. - Underpins many other things"),(0,i.kt)("h1",{id:"inheritance-sub-classing"},"Inheritance: Sub-classing"),(0,i.kt)("p",null,"Inheritance: IS-A relationships. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A class can be a specialisation of another class"),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"extends")," to get inheritance. ",(0,i.kt)("em",{parentName:"li"},"bear")," 'IS-AN' ",(0,i.kt)("em",{parentName:"li"},"Animal"),", so it gets everything in ",(0,i.kt)("em",{parentName:"li"},"Animal")," and can change it or add to it")),(0,i.kt)("h2",{id:"polymorphism"},"Polymorphism"),(0,i.kt)("p",null,"Means many forms - not fixed to specific types"),(0,i.kt)("h3",{id:"parametric-polymorphism"},"Parametric Polymorphism:"),(0,i.kt)("p",null,"Code works with multiple types, or regardless of types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"What functional programmers mean"),(0,i.kt)("li",{parentName:"ul"},"Java generics")),(0,i.kt)("h3",{id:"ad-hoc-polymorphism-function-overloading"},"Ad-hoc polymorphism (function overloading)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Same function name, multiple versions differing by parameter types"),(0,i.kt)("li",{parentName:"ul"},"Function may work differently depending upon the type")),(0,i.kt)("h3",{id:"sub-type-polymorphism-sub-classing"},"Sub-type polymorphism (sub classing)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Usually what is meant by polymorphism in OO terms"),(0,i.kt)("li",{parentName:"ul"},"Often called inheritance or sub-classing"),(0,i.kt)("li",{parentName:"ul"},"Super-class/base class = Original class"),(0,i.kt)("li",{parentName:"ul"},"Sub-class/derived class = New type")),(0,i.kt)("h1",{id:"public-private-protected"},"Public, Private, Protected"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"private")," - Only this class can access this"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nothing"),"(package) - This class + this package can access this"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"protected")," - The class + this package + sub-classes can access this"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public")," - Anything can access this")))}d.isMDXComponent=!0}}]);