"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[834],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>m});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function l(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var o=n.createContext({}),p=function(e){var t=n.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=p(i),m=a,f=d["".concat(o,".").concat(m)]||d[m]||c[m]||l;return i?n.createElement(f,s(s({ref:t},u),{},{components:i})):n.createElement(f,s({ref:t},u))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=i.length,s=new Array(l);s[0]=d;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r.mdxType="string"==typeof e?e:a,s[1]=r;for(var p=2;p<l;p++)s[p]=i[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},2809:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var n=i(7462),a=(i(7294),i(3905));const l={},s="11. Protocols",r={unversionedId:"Year2/2013/11",id:"Year2/2013/11",title:"11. Protocols",description:"04/11/22",source:"@site/docs/Year2/2013/11.md",sourceDirName:"Year2/2013",slug:"/Year2/2013/11",permalink:"/Year2/2013/11",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"10. Subsystems",permalink:"/Year2/2013/10"},next:{title:"12. Software Design Patterns",permalink:"/Year2/2013/12"}},o={},p=[{value:"Protocols",id:"protocols",level:2},{value:"Make them general",id:"make-them-general",level:3},{value:"Refining Responsibilities",id:"refining-responsibilities",level:2},{value:"Guidelines",id:"guidelines",level:3},{value:"Method Names",id:"method-names",level:2},{value:"Guidelines",id:"guidelines-1",level:3},{value:"Define Reasonable Defaults",id:"define-reasonable-defaults",level:2},{value:"Guidelines",id:"guidelines-2",level:3},{value:"Parameters",id:"parameters",level:2},{value:"Guideline",id:"guideline",level:3},{value:"Return values",id:"return-values",level:2},{value:"Specifying the Design",id:"specifying-the-design",level:2},{value:"Specifying Classes",id:"specifying-classes",level:2},{value:"Full class design documentation",id:"full-class-design-documentation",level:2},{value:"Specifying Subsystems",id:"specifying-subsystems",level:2},{value:"Final design summary",id:"final-design-summary",level:2}],u={toc:p};function c(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"11-protocols"},"11. Protocols"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"04/11/22")),(0,a.kt)("p",null,"tldr: windows is shit, linux is great "),(0,a.kt)("h2",{id:"protocols"},"Protocols"),(0,a.kt)("p",null,"Protocol is a set of signatures to which a class responds. Final step of design, first step of implementation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Construct protocols for each class - specific signatures for methods. Good decisions require careful attention to refining responsibilities and naming messages"),(0,a.kt)("li",{parentName:"ol"},"Write design specification for each class and subsystem"),(0,a.kt)("li",{parentName:"ol"},"Write design specification for each contract ")),(0,a.kt)("p",null,"Goal is to produce precise and complete design\nSpecifying protocols exposes fuzzy, incomplete areas of design"),(0,a.kt)("h3",{id:"make-them-general"},"Make them general"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Protocol for a contract (set of responsibilities) must cover the full generality of each responsibility in contract"),(0,a.kt)("li",{parentName:"ul"},"Simple responsibility may only need one signature"),(0,a.kt)("li",{parentName:"ul"},"General responsibility may need many signature")),(0,a.kt)("h2",{id:"refining-responsibilities"},"Refining Responsibilities"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Need to derive an implementation  for classes. Implementation spec represented by:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A protocol for each contract"),(0,a.kt)("li",{parentName:"ul"},"Protocol for some private responsibilities ")))),(0,a.kt)("h3",{id:"guidelines"},"Guidelines"),(0,a.kt)("p",null,"Avoid over-specifying implementation detail, which normally advises against a protocol for private responsibilities. Useful if parent class is implemented by different person than children classes"),(0,a.kt)("h2",{id:"method-names"},"Method Names"),(0,a.kt)("p",null,"Need to preserve encapsulation and general class utility while imposing implementation details. Proper overloading can be important vehicle, confusing if 1 name is used for 2 conceptually different things."),(0,a.kt)("h3",{id:"guidelines-1"},"Guidelines"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Each method name should imply a unique intent"),(0,a.kt)("li",{parentName:"ul"},"Use same name everywhere for each conceptual operation"),(0,a.kt)("li",{parentName:"ul"},"Associate a single conceptual operation with each method name"),(0,a.kt)("li",{parentName:"ul"},"Classes that fulfil same responsibility should inherit it")),(0,a.kt)("h2",{id:"define-reasonable-defaults"},"Define Reasonable Defaults"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Classes are easily used and more reusable if protocols are designed to reflect their different uses more accurately"),(0,a.kt)("li",{parentName:"ul"},"Good to speculate on potential future use as well as immediate use. Helps to abstract and generalise")),(0,a.kt)("h3",{id:"guidelines-2"},"Guidelines"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Always start by defining the most general message, allowing clients to specify all possible parameters"),(0,a.kt)("li",{parentName:"ol"},"Provide default values for parameters as appropriate"),(0,a.kt)("li",{parentName:"ol"},"Analyse likely uses. Determine set of signatures that require only subsets of parameters in order to make the signature match most naturally to each likely use - defaults used for unspecified parameters")),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,"Default analysis:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"default display, bg colour, clipping region etc")),(0,a.kt)("h3",{id:"guideline"},"Guideline"),(0,a.kt)("p",null,"Order of parameters is based on probability (determined by designers) that client will want to specify parameters"),(0,a.kt)("h2",{id:"return-values"},"Return values"),(0,a.kt)("p",null,"Do not just return ",(0,a.kt)("inlineCode",{parentName:"p"},"void")," in methods. Instead specify ",(0,a.kt)("inlineCode",{parentName:"p"},"Boolean")," by default:\n",(0,a.kt)("inlineCode",{parentName:"p"},"true")," - if the method succeeds in fulfilling its responsibilities\n",(0,a.kt)("inlineCode",{parentName:"p"},"false")," - if anything goes wrong"),(0,a.kt)("p",null,"Methods should be performing error checks, especially accessory methods"),(0,a.kt)("h2",{id:"specifying-the-design"},"Specifying the Design"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Hierarchy and collaboration graphs need to be updated and revised as appropriate to reflect final design decisions."),(0,a.kt)("li",{parentName:"ul"},"Hierarchy graphs - Single page system overview is highly desirable; include all hierarchy 'roots' on this page and all subsystems. Include all first level children")),(0,a.kt)("h2",{id:"specifying-classes"},"Specifying Classes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Each class must be fully specified"),(0,a.kt)("li",{parentName:"ul"},"Text suggests discarding 'cards' and more or less starting over with full page documentation, one page per class.")),(0,a.kt)("h2",{id:"full-class-design-documentation"},"Full class design documentation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Class name and abstract/concrete identification at top of page"),(0,a.kt)("li",{parentName:"ol"},"Immediate parent and child classes"),(0,a.kt)("li",{parentName:"ol"},"References to hierarchy and collaboration graph locations"),(0,a.kt)("li",{parentName:"ol"},"Class description - purpose and intended use - expansion of original purpose on class card"),(0,a.kt)("li",{parentName:"ol"},"List each collaboration that the class is involved in"),(0,a.kt)("li",{parentName:"ol"},"For each new collaboration defined in this class, list responsibilities that support it; for each responsibility, list signatures that implement the responsibility."),(0,a.kt)("li",{parentName:"ol"},"List private responsibilities. If they have been further defined, include same information as public responsibilities. "),(0,a.kt)("li",{parentName:"ol"},"Identify implementation notes or guidelines, error responses, performance requirements etc")),(0,a.kt)("h2",{id:"specifying-subsystems"},"Specifying Subsystems"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Subsystem name at top of page"),(0,a.kt)("li",{parentName:"ol"},"List all subsystem classes"),(0,a.kt)("li",{parentName:"ol"},"References to hierarchy and collaboration graph locations"),(0,a.kt)("li",{parentName:"ol"},"Subsystem description - purpose and intended use - expansion of original purpose on subsystem card."),(0,a.kt)("li",{parentName:"ol"},"List each contract supported by subsystem"),(0,a.kt)("li",{parentName:"ol"},"For each contract supported by this subsystem, identify class or subsystem for which contract is delegated")),(0,a.kt)("h2",{id:"final-design-summary"},"Final design summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One or more hierarchy graphs, showing inheritance and overall class structure of the application"),(0,a.kt)("li",{parentName:"ul"},"One or more collaboration graphs showing patterns of communications"),(0,a.kt)("li",{parentName:"ul"},"Class and subsystem specifications with purpose, relationship to other class and subsystems, collaborations and responsibilities, implementation notes")))}c.isMDXComponent=!0}}]);