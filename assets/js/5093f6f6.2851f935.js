"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8871],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(a),h=r,d=u["".concat(l,".").concat(h)]||u[h]||c[h]||i;return a?n.createElement(d,o(o({ref:t},p),{},{components:a})):n.createElement(d,o({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},20339:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const i={},o="Game Playing",s={unversionedId:"Year1/AI/22.03.15 - Game Playing",id:"Year1/AI/22.03.15 - Game Playing",title:"Game Playing",description:"Minimax",source:"@site/docs/Year1/1008-AI/22.03.15 - Game Playing.md",sourceDirName:"Year1/1008-AI",slug:"/Year1/AI/22.03.15 - Game Playing",permalink:"/Year1/AI/22.03.15 - Game Playing",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"22.03.08 - Heuristic Search",permalink:"/Year1/AI/22.03.08 - Heuristic Search"},next:{title:"22.03.22 - Evolutionary Algorithms",permalink:"/Year1/AI/22.03.22 - Evolutionary Algorithms"}},l={},m=[{value:"Minimax",id:"minimax",level:2}],p={toc:m};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"game-playing"},"Game Playing"),(0,r.kt)("h2",{id:"minimax"},"Minimax"),(0,r.kt)("p",null,"An opponent tried to prevent your win at every move\n1944 - John von Neumann"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A search method, maximise your position whilst minimising your opponents")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Utility Function"),": in order to implement we need a method of measuring how good a position is"),(0,r.kt)("p",null,"Nim - Start with a pile of tokens, at each move the player must divide the tokens into two non-empty, non-equal piles."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Efficiency of the search. Game trees are very big. Evaluation of positions is time-consuming"),(0,r.kt)("li",{parentName:"ul"},"To reduce the number of nodes to be evaluated can explore: Alpha-beta search based on minimax. Better estimate of utility values")),(0,r.kt)("p",null,"Minmax uses BFS"),(0,r.kt)("h1",{id:"alpha-beta-pruning"},"Alpha Beta Pruning"),(0,r.kt)("p",null,"Is about reducing the size of the search tree"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Cannot prune nodes if doing BFS. Form of pruning relies on doing a DFS"),(0,r.kt)("li",{parentName:"ul"},"To maximise pruning: first expand the best children. Cannot know which ones are really best. Use heuristics for the 'best-first' ordering"),(0,r.kt)("li",{parentName:"ul"},"alpha ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"\u03b1")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\alpha")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.0037em"}},"\u03b1"))))),": values are stored with each MAX node"),(0,r.kt)("li",{parentName:"ul"},"beta ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"\u03b2")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\beta")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05278em"}},"\u03b2"))))),": values are stored with each MIN node")),(0,r.kt)("h1",{id:"computerphile-video"},"Computerphile video"),(0,r.kt)("p",null,"MinMax - Trying to maximise the min value. Best choice available for opponent is as bad as possible, and good as possible for the AI"))}c.isMDXComponent=!0}}]);