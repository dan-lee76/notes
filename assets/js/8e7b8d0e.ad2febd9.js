"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[7550],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3526:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={},s="Fundamental Issues",u={unversionedId:"Year1/AI/Revision",id:"Year1/AI/Revision",title:"Fundamental Issues",description:"- Top-down approach: pre-processed to do things",source:"@site/docs/Year1/1008-AI/Revision.md",sourceDirName:"Year1/1008-AI",slug:"/Year1/AI/Revision",permalink:"/Year1/AI/Revision",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"Random Notes from Labs",permalink:"/Year1/AI/Random Notes from Labs"},next:{title:"Introduction",permalink:"/Year1/Programming Paradigms/22.01.31 - Introduction"}},p={},m=[{value:"Travelling Salesman Problem",id:"travelling-salesman-problem",level:2},{value:"Combinatorial Explosion",id:"combinatorial-explosion",level:2},{value:"The Turing Test",id:"the-turing-test",level:2},{value:"Chinese Room Experiment",id:"chinese-room-experiment",level:2},{value:"Machine Learning",id:"machine-learning",level:2},{value:"Neural Networks",id:"neural-networks",level:2},{value:"Training",id:"training",level:3},{value:"Process",id:"process",level:2},{value:"Data Mining",id:"data-mining",level:2},{value:"Supervise Learning Applications",id:"supervise-learning-applications",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"fundamental-issues"},"Fundamental Issues"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Top-down")," approach: pre-processed to do things"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Bottom-up")," approach: simulate brains, learn new behaviours")),(0,i.kt)("h2",{id:"travelling-salesman-problem"},"Travelling Salesman Problem"),(0,i.kt)("p",null,"Combinatorial Explosion Problem: One of the major unsolved theoretical problems in computer science"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Has to visit a number of cities, must start and end at the same one."),(0,i.kt)("li",{parentName:"ul"},"Need to find the minimum distance/cost solution")),(0,i.kt)("p",null,"Towers of Hanoi - Move 64 gold rings to form a tower, need to move the tower"),(0,i.kt)("h2",{id:"combinatorial-explosion"},"Combinatorial Explosion"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"- Where the number of problem solutions grows exponentially with its size. An exhaustive search is not an option"),"\n","[Insert image]"),(0,i.kt)("h2",{id:"the-turing-test"},"The Turing Test"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Work out which candidate is the machine or human, only by asking them questions."),(0,i.kt)("li",{parentName:"ul"},"If the machine can fool the interrogator 30% of the time, the machine is considered intelligent."),(0,i.kt)("li",{parentName:"ul"},"E.g Alexa, Google AI Cloud contact.")),(0,i.kt)("h2",{id:"chinese-room-experiment"},"Chinese Room Experiment"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Rule processor happens to be intelligent but has no understanding of the rules")),(0,i.kt)("h1",{id:"machine-learning-ann"},"Machine Learning: ANN"),(0,i.kt)("h2",{id:"machine-learning"},"Machine Learning"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Computer programs that automatically improve their performance through experience."),(0,i.kt)("li",{parentName:"ul"},"Study of computer algorithms that can improve automatically through experience and by the use of data.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Top-down/Classic"),": Model all different functions and wire all these 'agents' together.\n",(0,i.kt)("strong",{parentName:"p"},"Bottom-up/Deep Learning"),": Give the system a lot of data, so it can discover by itself"),(0,i.kt)("h2",{id:"neural-networks"},"Neural Networks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Signals move between neurons"),(0,i.kt)("li",{parentName:"ul"},"Sum of inputs >= threshold, the neuron 'fires'. If theirs a long-term firing pattern, then the AI is learning")),(0,i.kt)("p",null,"Weighted Sum:\n$$Y=x_1\\times w_1+x_2\\times w_2+x_3\\times w_3$$\n",(0,i.kt)("em",{parentName:"p"},"Neurons connected by directed, weighted paths.\nPositive weight: excitatory, otherwise inhibitory.\n",(0,i.kt)("strong",{parentName:"em"},"$x_1$")," and $x_2$ encourage the neuron to fire.\n$x_3$ prevents the neuron from firing")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Each neuron has a fixed threshold $t$.\nWeighted sum input to the neuron $Y >= t$. Then the neuron fires.")),(0,i.kt)("h3",{id:"training"},"Training"),(0,i.kt)("p",null,"Weights are normally randomly assigned"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Epoch"),": Entire training set feed into the neural network. The AND function: an epoch consists of four sets of inputs(patterns) feed into the network"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Training Value, T"),": Value that we require the network to produce"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Error, Err"),": The amount the output by the network O differs from the training value T"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"X_i"),": Inputs to Neuron"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"w_i"),": Weight from input X_i, to the output "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"LR (Learning Rate)")," How quickly the network converges. It is set by the experimentation, typically 0.1. This is the adjustment amount")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"While epoch produces an error\n    Check next inputs(pattern) from epoch\n    Err = T - O\n    If Err <> 0 then\n        w_i = w_i + LR * X_i * Err\n    End If\nEnd While\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Mean Squared Error"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"[(T-O)^2]/n"),". Measures the different between T and O during training."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Linearly Separable"),": Functions which can be separated. Only these can be represented by a single layer NN")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"T")," is the expected output the learning algorithm it trying to learn."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"O")," is the output of the ANN with the current set of weights during the training.")),(0,i.kt)("p",null,"If you can separate your inputs and outputs with a straight line then you have found the weights."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Plot your inputs on a graph\nIf you can draw a line such that your inputs that lead to an expected output are on one side of the line and all other inputs are on the other side, then congrats")),(0,i.kt)("h1",{id:"machine-learning-intro"},"Machine Learning: Intro"),(0,i.kt)("p",null,"Program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E."),(0,i.kt)("p",null,"Three pillars of machine learning:\n1) Models and algorithms. Doesn't require knowledge engineers\n2) Powerful and cheaper computation\n3) Massive data warehouse"),(0,i.kt)("h2",{id:"process"},"Process"),(0,i.kt)("p",null,"Partition the total datasets into subsets:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Learning the parameters of the model"),(0,i.kt)("li",{parentName:"ul"},"How to generalise the independent data (overfitting)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Overfitting"),": When a statistical model fits exactly against its training data. When this happens the algorithm cannot perform accurately against unseen data."),(0,i.kt)("li",{parentName:"ul"},"When doing evaluation do 70% training, 30% testing. Multiple runs using different partitions(K-Fold)")),(0,i.kt)("h2",{id:"data-mining"},"Data Mining"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Data mining"),": Exploration and analysis of large quantities of data to discover valid, novel, useful and understandable patterns in data."),(0,i.kt)("li",{parentName:"ul"},"Machine learning predicts with models whereas data mining explains patterns")),(0,i.kt)("h1",{id:"machine-learning-techniques"},"Machine Learning: Techniques"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Supervised Learning"),": From labelled training data, with examples of inputs and desired outputs (Classifications, regression) "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Unsupervised Leaning"),": A function to describe hidden structure from unlabelled data. (Clustering, association rules)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Classification"),": Learn to predict to which set a instance belongs to based on pre-labelled instances."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Regression"),": Estimated relationship between variable Y and variable(s) X. Function is based on the given data to minimise its mean square error to fit the data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Decision Tree"),": ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Internal Nodes: Decision rules on features (variables/inputs)."),(0,i.kt)("li",{parentName:"ul"},"Leaf Nodes: predicted class label (output)"),(0,i.kt)("li",{parentName:"ul"},"+Quick Training time, handle large features, easy to implement"),(0,i.kt)("li",{parentName:"ul"},"-Only simple decision boundaries, problem with lots of missing data and cannot handle complicated relationship"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Neural Network"),": Set of neurons connected by directed weighted edges",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"+Can lean complicated class boundaries and be more accurate."),(0,i.kt)("li",{parentName:"ul"},"-Hard to implement, and slow training time. Can overfit the data and hard to interpret")))),(0,i.kt)("h2",{id:"supervise-learning-applications"},"Supervise Learning Applications"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Handwriting/Pattern Recognition/Translation")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Clustering"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Given: Un-labeled data set D and similarity/distance metric"),(0,i.kt)("li",{parentName:"ul"},"Goal: Find 'natural' partitioning, or groups of similar data points"),(0,i.kt)("li",{parentName:"ul"},"Application: Divide a market into distinct subsets of customers"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Association"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Correlation between any two or more variables"),(0,i.kt)("li",{parentName:"ul"},"Given: Set of records containing items"),(0,i.kt)("li",{parentName:"ul"},"Goal: Produce dependency rules, to predict occurrence of one variable based on other variables"),(0,i.kt)("li",{parentName:"ul"},"Application: Market basket analysis"))),(0,i.kt)("li",{parentName:"ul"},"Correlation $\\ne$ Causation")))}d.isMDXComponent=!0}}]);