"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8943],{3905:(e,a,t)=>{t.d(a,{Zo:()=>s,kt:()=>m});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function p(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?p(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)t=p[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)t=p[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),c=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},s=function(e){var a=c(e.components);return n.createElement(o.Provider,{value:a},e.children)},f={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,p=e.originalType,o=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,b=u["".concat(o,".").concat(m)]||u[m]||f[m]||p;return t?n.createElement(b,l(l({ref:a},s),{},{components:t})):n.createElement(b,l({ref:a},s))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var p=t.length,l=new Array(p);l[0]=u;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<p;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},70309:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>f,frontMatter:()=>p,metadata:()=>i,toc:()=>c});var n=t(87462),r=(t(67294),t(3905));const p={},l="5. Applicative Functors",i={unversionedId:"Year2/2003/05",id:"Year2/2003/05",title:"5. Applicative Functors",description:"20/02/23",source:"@site/docs/Year2/2003/05.md",sourceDirName:"Year2/2003",slug:"/Year2/2003/05",permalink:"/Year2/2003/05",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"4. Programming with Effects",permalink:"/Year2/2003/04"},next:{title:"6. Monads I",permalink:"/Year2/2003/06"}},o={},c=[{value:"Generalising fmap",id:"generalising-fmap",level:2},{value:"Applicative Functors",id:"applicative-functors",level:2},{value:"Example: Maybe",id:"example-maybe",level:3},{value:"Example: Lists",id:"example-lists",level:3}],s={toc:c};function f(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"5-applicative-functors"},"5. Applicative Functors"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"20/02/23")),(0,r.kt)("h2",{id:"generalising-fmap"},"Generalising fmap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fmap0 :: a -> f a \nfmap1 :: (a -> b) -> f a -> f b\nfmap2 :: (a -> b -> c) -> f a -> f b -> f c\nfmap3 :: (a -> b -> c -> d) -> f a -> f b -> f c -> f d\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pure :: a-> f a -- Turn a value into a data strucutre. \n((*)) :: f (a -> b) -> f a -> f b --() is a prefix operator. Need to give brackets when defining it as a type. Generalised form of function applicaiton\n\npure g (*) x (*) y (*) z -- applicative style\n\n(*) -- does it to the left\n\nfmap0 :: a -> f a\nfmap0 = pure \n\nfmap1 :: (a -> b) -> f a -> f b\nfmap1 g x = pure g (*) x\n\nfmap2 :: (a -> b -> c) -> f a -> f b -> f c\nfmap2 g x y = (pure g (*) x ) (*) y\n")),(0,r.kt)("h2",{id:"applicative-functors"},"Applicative Functors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"class Functor f => Applicative f where\n    pure :: a -> f a\n    ((*)) :: f(a->b) -> f a -> f b\n")),(0,r.kt)("h3",{id:"example-maybe"},"Example: Maybe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Applicative Maybe where\n    -- pure :: a -> Maybe a\n    pure x = Just x\n    -- ((*)) :: maybe (a->b) -> Maybe a -> Maybe b\n    Nothing (*) mx = Nothing\n    (Just g) (*) mx = fmap g mx\n")),(0,r.kt)("h3",{id:"example-lists"},"Example: Lists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Applicative [] where\n    -- pure :: a -> [a]\n    pure x = [x]\n    -- ((*)) :: [a->b] -> [a] -> [b]\n    gs (*) xs = [g x | g <- gs, x <- xs] \n")))}f.isMDXComponent=!0}}]);