"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[6215],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>h});var n=t(67294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=n.createContext({}),o=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},p=function(e){var a=o(e.components);return n.createElement(m.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=o(t),h=i,d=u["".concat(m,".").concat(h)]||u[h]||c[h]||r;return t?n.createElement(d,s(s({ref:a},p),{},{components:t})):n.createElement(d,s({ref:a},p))}));function h(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=u;var l={};for(var m in a)hasOwnProperty.call(a,m)&&(l[m]=a[m]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var o=2;o<r;o++)s[o]=t[o];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},17581:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var n=t(87462),i=(t(67294),t(3905));const r={},s="15. Failure Models",l={unversionedId:"Year2/2014/15",id:"Year2/2014/15",title:"15. Failure Models",description:"02/05/23",source:"@site/docs/Year2/2014/15.md",sourceDirName:"Year2/2014",slug:"/Year2/2014/15",permalink:"/Year2/2014/15",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"14.  Distributed Algorithms",permalink:"/Year2/2014/14"},next:{title:"16. Distribution & Replication",permalink:"/Year2/2014/16"}},m={},o=[{value:"Process Omission Failures",id:"process-omission-failures",level:3},{value:"Communication omission failures",id:"communication-omission-failures",level:3},{value:"Arbitrary Failures",id:"arbitrary-failures",level:3},{value:"Timing Failures",id:"timing-failures",level:3},{value:"Coping with Failure",id:"coping-with-failure",level:2},{value:"Masking and mitigating failures",id:"masking-and-mitigating-failures",level:3},{value:"Examples",id:"examples",level:4},{value:"Fault tolerance",id:"fault-tolerance",level:3},{value:"Failure detection",id:"failure-detection",level:3},{value:"Achieving fault tolerance",id:"achieving-fault-tolerance",level:3},{value:"Replication",id:"replication",level:3},{value:"Networks and Reliability",id:"networks-and-reliability",level:2},{value:"Performance of communication channels",id:"performance-of-communication-channels",level:3},{value:"Issues for distributed systems",id:"issues-for-distributed-systems",level:3}],p={toc:o};function c(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"15-failure-models"},"15. Failure Models"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"02/05/23")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://moodle.nottingham.ac.uk/pluginfile.php/9457900/mod_page/content/2/19%20Failure%20and%20Reliability.pdf"},"MoodlePDF")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Failure models deal with how (parts of) a distributed system can fail and what can be done to detect and mask such failures"),(0,i.kt)("li",{parentName:"ul"},"Types of failure include:")),(0,i.kt)("h3",{id:"process-omission-failures"},"Process Omission Failures"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When a process fails to perform an action it is supposed to do"),(0,i.kt)("li",{parentName:"ul"},"Most commonly the process may crash"),(0,i.kt)("li",{parentName:"ul"},"Other processes may detect that the process has crashed using timeouts"),(0,i.kt)("li",{parentName:"ul"},"A process crash is 'fail-stop' if other processes can detect with certainty it has failed",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"But this is only possible (remotely) in a synchronous system"),(0,i.kt)("li",{parentName:"ul"},"In an asynchronous system messages showing it is alive might be lost or still delayed")))),(0,i.kt)("h3",{id:"communication-omission-failures"},"Communication omission failures"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Consider a simple message communication:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Process ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"p")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"p")))))," performs a send operation on a message ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"m")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"m")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"m")))))," by inserting it into an outgoing message buffer"),(0,i.kt)("li",{parentName:"ul"},"The communication channel transports message ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"m")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"m")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"m")))))," to process ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"q")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"q")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"q"))))),"s incoming message buffer"),(0,i.kt)("li",{parentName:"ul"},"Process ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"q")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"q")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"q")))))," performs a receive operation to take message ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"m")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"m")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"m")))))," from its incoming message buffer and delivering it"))),(0,i.kt)("li",{parentName:"ul"},"Message can be lost at each state",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g. due to congestion in the network, lack of space in a buffer or corruption of the message"),(0,i.kt)("li",{parentName:"ul"},"Resulting in send-omission failure, channel omission failure or receive omission failure, respectively ")))),(0,i.kt)("h3",{id:"arbitrary-failures"},"Arbitrary Failures"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Arbitrary or Byzantine failures describe the worst possible failure semantics, in which any type of error may occur"),(0,i.kt)("li",{parentName:"ul"},"A process may omit arbitrary steps and/or insert arbitrary steps"),(0,i.kt)("li",{parentName:"ul"},"Communication channel may omit messages, insert arbitrary messages and/or make arbitrary change to messages",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"But these are less common observed, as the internet protocols include some checks/mitigation for this")))),(0,i.kt)("h3",{id:"timing-failures"},"Timing Failures"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In a synchronous system time limits may be set on the performance of certain tasks"),(0,i.kt)("li",{parentName:"ul"},"A timing failure in is a failure to perform this task within the specified time limit"),(0,i.kt)("li",{parentName:"ul"},"To create a synchronous distributed system requires real-time operation systems and networks with high-reliability and performance guarantees")),(0,i.kt)("h2",{id:"coping-with-failure"},"Coping with Failure"),(0,i.kt)("h3",{id:"masking-and-mitigating-failures"},"Masking and mitigating failures"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each component in a distributed system is typically constructed from a collection of other componenets"),(0,i.kt)("li",{parentName:"ul"},"A reliable system can be constructed from unreliable componenets"),(0,i.kt)("li",{parentName:"ul"},"If part of the system can detect the failure then it may be able to mask the failure, either concealing it entirely or converting to a more acceptable type of failure")),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Multiple servers holding copies of the same data can continue to provide a service when one of the servers has crashed"),(0,i.kt)("li",{parentName:"ul"},"Message checksums detect corrupt packets, which are discarded, converting an arbitrary failure to an omission failure "),(0,i.kt)("li",{parentName:"ul"},"....")),(0,i.kt)("h3",{id:"fault-tolerance"},"Fault tolerance"),(0,i.kt)("p",null,"Failures - ",(0,i.kt)("em",{parentName:"p"},'"When the behaviour of a system deviates from that which is specified for it"')," / ",(0,i.kt)("em",{parentName:"p"},'"deviation from desired or intended state"'),"\nErrors - Internal discrepancy between intended and actual behaviour, caused by a fault\nFaults - A defect in the system\nFault tolerance - ",(0,i.kt)("em",{parentName:"p"},'"the ability to operate correctly in the presence of faults"')),(0,i.kt)("h3",{id:"failure-detection"},"Failure detection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Typically a process will need to detect a failure (or error) in another process or communication channel before it can respond to it"),(0,i.kt)("li",{parentName:"ul"},"Different failures are detected in different ways",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Checksums for corrupted data/messages"),(0,i.kt)("li",{parentName:"ul"},"Sequence numbers for non-existent or duplicate messages;"),(0,i.kt)("li",{parentName:"ul"},"Timestamps and timeouts for lost messages or crashed processes"))),(0,i.kt)("li",{parentName:"ul"},"Some failures cannot be detected with certainty in an asynchronous system")),(0,i.kt)("h3",{id:"achieving-fault-tolerance"},"Achieving fault tolerance"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The system might try to detect a fault then re-try the failed work"),(0,i.kt)("li",{parentName:"ul"},'And/or extra work can be done from the outside "just in case" some of it will fail')),(0,i.kt)("h3",{id:"replication"},"Replication"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Having entire extra copies of data and/or processes. Not the only form of redundancy"),(0,i.kt)("li",{parentName:"ul"},"Do fault replication for fault tolerance, high availability, and performance ")),(0,i.kt)("h2",{id:"networks-and-reliability"},"Networks and Reliability"),(0,i.kt)("h3",{id:"performance-of-communication-channels"},"Performance of communication channels"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Communication can be realised with different paradigms and technologies, but each has:"),(0,i.kt)("li",{parentName:"ul"},"Reliability or delivery ratio: fraction of messages successfully delivered"),(0,i.kt)("li",{parentName:"ul"},"Latency: The delay between the start of a message transmission and beginning of its receipt"),(0,i.kt)("li",{parentName:"ul"},"Bandwidth: Total information transmitted in a unit time"),(0,i.kt)("li",{parentName:"ul"},"Jitter: Variation in delay")),(0,i.kt)("h3",{id:"issues-for-distributed-systems"},"Issues for distributed systems"),(0,i.kt)("p",null,"Distributed systems by definition involve networks, and characteristics of those networks impact the distributed system in particular:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Performance"),": The speed at which messages can be transferred depends on the latency and bandwith of the underlying networks"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Scalability"),": If the network does not scale then the distributed system cannot scale. Fortunately the internet is caling quite well, but work is ongoing to improve this"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Reliability"),": Reliable systems can be built from unreliable parts. But unreliable networks still typically limit performance"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Mobility"),": The internet has only limited support for devices moving between networks, so additional support can be needed from the distributed system"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Quality of Service"),": To make QoS guarantees typically requires that the network can also make such guarantees, which many networks cannot."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Multicast"),": Applications can simulate multicast (one-to-many communication) to some extend, but when provided by networks it can increase (local) efficiency and reliability and reduce configuration")))}c.isMDXComponent=!0}}]);