"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[1566],{3905:(e,a,t)=>{t.d(a,{Zo:()=>o,kt:()=>d});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),m=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},o=function(e){var a=m(e.components);return n.createElement(p.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),c=m(t),d=r,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||l;return t?n.createElement(g,i(i({ref:a},o),{},{components:t})):n.createElement(g,i({ref:a},o))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=c;var s={};for(var p in a)hasOwnProperty.call(a,p)&&(s[p]=a[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var m=2;m<l;m++)i[m]=t[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},11709:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var n=t(87462),r=(t(67294),t(3905));const l={},i="15. Paging & Virtual Memory",s={unversionedId:"Year2/2007/15",id:"Year2/2007/15",title:"15. Paging & Virtual Memory",description:"11/11/22",source:"@site/docs/Year2/2007/15.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/15",permalink:"/Year2/2007/15",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"14. Dynamic Partitioning & Paging",permalink:"/Year2/2007/14"},next:{title:"16. Virtual Memory & Page Replacement",permalink:"/Year2/2007/16"}},p={},m=[{value:"Recall",id:"recall",level:2},{value:"Paging",id:"paging",level:2},{value:"Address Translation",id:"address-translation",level:3},{value:"Relocation",id:"relocation",level:3},{value:"Benefits",id:"benefits",level:3},{value:"Virtual Memory",id:"virtual-memory",level:2},{value:"Page Faults",id:"page-faults",level:3},{value:"Demand Paging",id:"demand-paging",level:3},{value:"Benefits",id:"benefits-1",level:3},{value:"Page Tables",id:"page-tables",level:3},{value:"Multi level page tables",id:"multi-level-page-tables",level:3},{value:"Access Speed",id:"access-speed",level:3},{value:"Summary",id:"summary",level:2}],o={toc:m};function u(e){let{components:a,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},o,l,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"15-paging--virtual-memory"},"15. Paging & Virtual Memory"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"11/11/22")),(0,r.kt)("h2",{id:"recall"},"Recall"),(0,r.kt)("p",null,"Principles of paging"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Main memory is divided into small equal sized frames"),(0,r.kt)("li",{parentName:"ul"},"Each process is divided into pages of equal size"),(0,r.kt)("li",{parentName:"ul"},"A page table contains multiple 'relocation registers' to map the pages to frame."),(0,r.kt)("li",{parentName:"ul"},"Reduced internal fragmentation"),(0,r.kt)("li",{parentName:"ul"},"No external fragmentation")),(0,r.kt)("h2",{id:"paging"},"Paging"),(0,r.kt)("h3",{id:"address-translation"},"Address Translation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A logical (physical) address is relative to the start of the program (memory) and consists of two parts",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The right most ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"m")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"m")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"m")))))," bits that represent the offset within the page (frame)"),(0,r.kt)("li",{parentName:"ul"},"The left most ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"n")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," bits that represent the page(frame number)"))),(0,r.kt)("li",{parentName:"ul"},"The offset within the page and frame remains the same (they are the same size)"),(0,r.kt)("li",{parentName:"ul"},"The page number to frame number mapping is held in the page table")),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(84660).Z,width:"544",height:"195"})),(0,r.kt)("h3",{id:"relocation"},"Relocation"),(0,r.kt)("p",null,"Steps in address translation:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Extract the page number form logical address"),(0,r.kt)("li",{parentName:"ol"},"Use page number as an index to retrieve the frame number in the page table"),(0,r.kt)("li",{parentName:"ol"},'Add the "logical offset within the page" to the start of the physical frame\nHardware implementation of address translation'),(0,r.kt)("li",{parentName:"ol"},"The CPUs MMU intercept logical addresses"),(0,r.kt)("li",{parentName:"ol"},"MMU uses a page table as above"),(0,r.kt)("li",{parentName:"ol"},"The resulting physical address is put on the memory bus")),(0,r.kt)("h3",{id:"benefits"},"Benefits"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Code execution and data manipulation are usually restricted to a small subset."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Principle of locality")," - code and data references within a process are usually clustered"),(0,r.kt)("li",{parentName:"ul"},"Pages next to one another are usually executed together"),(0,r.kt)("li",{parentName:"ul"},"Not all pages have to be loaded in memory at the same time ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow"},"\u2192")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\to")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," virtual memory")),(0,r.kt)("h2",{id:"virtual-memory"},"Virtual Memory"),(0,r.kt)("p",null,"Loading an entire set of pages for an entire program into memory is wasteful\nDesired blocks could be loaded on demand"),(0,r.kt)("h3",{id:"page-faults"},"Page Faults"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The resident set refers to the pages that are loaded into main memory"),(0,r.kt)("li",{parentName:"ul"},"A page fault is generated if the processor accesses a page that is not in memory",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Results in a n interrupt"),(0,r.kt)("li",{parentName:"ul"},"An I/O operation is started to bring the missing page into main memory"),(0,r.kt)("li",{parentName:"ul"},"A context switch take place"),(0,r.kt)("li",{parentName:"ul"},"An interrupt signals that the I/O operation is complete")))),(0,r.kt)("h3",{id:"demand-paging"},"Demand Paging"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Trap operating system"),(0,r.kt)("li",{parentName:"ol"},"Context switch"),(0,r.kt)("li",{parentName:"ol"},"Interrupt for I/O completion"),(0,r.kt)("li",{parentName:"ol"},"Context switch to original process")),(0,r.kt)("h3",{id:"benefits-1"},"Benefits"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Being able to maintain more processes in memory through the use of virtual memory improves CPU utilisation",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Individual processes take up less space as they are only partially loaded"))),(0,r.kt)("li",{parentName:"ul"},"VM allows the logical address to be larger than physical space size")),(0,r.kt)("h3",{id:"page-tables"},"Page Tables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Present/absent bit")," - set if the page/frame is in memory"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Modified bit/dirty bit")," - set if the page/frame has been modified "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Referenced bit")," - Set if the page is or has been in use"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Protection and sharing bits")," - read, write, execute etc\n",(0,r.kt)("img",{src:t(68210).Z,width:"717",height:"207"}))),(0,r.kt)("h3",{id:"multi-level-page-tables"},"Multi level page tables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Large page tables cannot be stored in registers"),(0,r.kt)("li",{parentName:"ul"},"Have to be stored in  (virtual) main memory",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Multi-level page tables"),(0,r.kt)("li",{parentName:"ul"},"Inverted page table")))),(0,r.kt)("p",null,"We can page the page table!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Keep tree-like structures to hold page tables"),(0,r.kt)("li",{parentName:"ul"},"Divided the page number into an index to a page table of second level, a page within a second level page table"),(0,r.kt)("li",{parentName:"ul"},"No need to keep all page tables in memory all time")),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(609).Z,width:"444",height:"453"})),(0,r.kt)("h3",{id:"access-speed"},"Access Speed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Root page table is always stored in memory, rest is in VM")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Paging splits logical and physical address spaces into small pages/frames to reduce internal and external fragmentation"),(0,r.kt)("li",{parentName:"ul"},"Virtual memory exploits the principle of locality and allows for processes to be loaded only partially into memory, large logical address space require 'different' approaches e.g paging a page table")))}u.isMDXComponent=!0},84660:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/20221111091230-1ad9d6077c9da4ab4e58c830e117adc7.png"},68210:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/20221111092940-ebc962266fc703189d0ae9f90bc2ac3c.png"},609:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/20221111093629-b2321663a4aae0ccabc5e83b85d54739.png"}}]);