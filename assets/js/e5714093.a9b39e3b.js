"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8623],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=m(n),c=r,f=d["".concat(p,".").concat(c)]||d[c]||u[c]||o;return n?a.createElement(f,l(l({ref:t},s),{},{components:n})):a.createElement(f,l({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var m=2;m<o;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var a=n(87462),r=(n(67294),n(3905));const o={},l="9. Monads IV",i={unversionedId:"Year2/2003/09",id:"Year2/2003/09",title:"9. Monads IV",description:"06/03/23",source:"@site/docs/Year2/2003/09.md",sourceDirName:"Year2/2003",slug:"/Year2/2003/09",permalink:"/Year2/2003/09",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"8. Monads III",permalink:"/Year2/2003/08"},next:{title:"10.  Reasoning about programs",permalink:"/Year2/2003/10"}},p={},m=[{value:"Monanic Version of map",id:"monanic-version-of-map",level:2},{value:"Monad Laws",id:"monad-laws",level:2},{value:"Right hand side",id:"right-hand-side",level:3},{value:"Bind operator with itself",id:"bind-operator-with-itself",level:3},{value:"Effectful Programming",id:"effectful-programming",level:2},{value:"Whats the point of monads?",id:"whats-the-point-of-monads",level:2}],s={toc:m};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"9-monads-iv"},"9. Monads IV"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"06/03/23")),(0,r.kt)("h2",{id:"monanic-version-of-map"},"Monanic Version of map"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"mapm :: Monad m => (a -> m b) -> m[b]\nmapm f [] = return []\nmapm f (x:xs) = do y <- f x\n                    ys <- mapm f xs\n                    return (y:ys)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"conv :: Char -> Maybe Int\nconv c | isDigit c = Just (digitToInt c)\n       | otherwise = Nothing\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"concat :: [[a]] -> [a]\nconcat xss = [x | xs <- xss, x <- xs]\n\njoin :: Monad m => m (m a) -> m a\njoin mmx = do mx <- mmx\n                x <- mx\n                return x\n")),(0,r.kt)("h2",{id:"monad-laws"},"Monad Laws"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"return x >>= f = ?"),"\nGoal is to figure out what type should be at ",(0,r.kt)("inlineCode",{parentName:"p"},"?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"return x >>= f = f x")),(0,r.kt)("h3",{id:"right-hand-side"},"Right hand side"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mx >>= return = mx")),(0,r.kt)("h3",{id:"bind-operator-with-itself"},"Bind operator with itself"),(0,r.kt)("p",null,"Associativity property "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"(mx >>= f) >>= g\n=\nmx >>= (\\x -> (f x >>= g))\n")),(0,r.kt)("p",null,"These are fundamental properties for monads"),(0,r.kt)("h2",{id:"effectful-programming"},"Effectful Programming"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a -> Maybe b")),(0,r.kt)("td",{parentName:"tr",align:null},"Exceptions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a -> [b]")),(0,r.kt)("td",{parentName:"tr",align:null},"Non-dertminism")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a -> ST b")),(0,r.kt)("td",{parentName:"tr",align:null},"Internal State")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a -> IO b")),(0,r.kt)("td",{parentName:"tr",align:null},"Input/Output")))),(0,r.kt)("h2",{id:"whats-the-point-of-monads"},"Whats the point of monads?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Supports pure programming with effects"),(0,r.kt)("li",{parentName:"ol"},"Use of monads is explicit in types"),(0,r.kt)("li",{parentName:"ol"},"Can generalise functions to any effect")))}u.isMDXComponent=!0}}]);