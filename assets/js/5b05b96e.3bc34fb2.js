"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3269],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>m});var r=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var o=r.createContext({}),c=function(e){var t=r.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(i),m=n,h=d["".concat(o,".").concat(m)]||d[m]||u[m]||a;return i?r.createElement(h,s(s({ref:t},p),{},{components:i})):r.createElement(h,s({ref:t},p))}));function m(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=i.length,s=new Array(a);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var c=2;c<a;c++)s[c]=i[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,i)}d.displayName="MDXCreateElement"},5170:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=i(7462),n=(i(7294),i(3905));const a={},s="9. Software Hierarchies",l={unversionedId:"Year2/2013/09",id:"Year2/2013/09",title:"9. Software Hierarchies",description:"31/10/22",source:"@site/docs/Year2/2013/09.md",sourceDirName:"Year2/2013",slug:"/Year2/2013/09",permalink:"/Year2/2013/09",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"8. Collaborations & Class Relationships",permalink:"/Year2/2013/08"},next:{title:"10. Subsystems",permalink:"/Year2/2013/10"}},o={},c=[{value:"Class Hierarchies",id:"class-hierarchies",level:2},{value:"Hierarchy Graphs",id:"hierarchy-graphs",level:3},{value:"Multiple Inheritance",id:"multiple-inheritance",level:3},{value:"Venn Diagrams",id:"venn-diagrams",level:3},{value:"Guidelines on Building Good Class Hierarchies",id:"guidelines-on-building-good-class-hierarchies",level:2},{value:"Is-kind-of Hierarchy",id:"is-kind-of-hierarchy",level:3},{value:"Move Common Responsibilities up Hierarchy",id:"move-common-responsibilities-up-hierarchy",level:3},{value:"Abstract Classes in Hierarchy",id:"abstract-classes-in-hierarchy",level:2},{value:"Eliminate Classes",id:"eliminate-classes",level:2}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"9-software-hierarchies"},"9. Software Hierarchies"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"31/10/22")),(0,n.kt)("h2",{id:"class-hierarchies"},"Class Hierarchies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Represent essence of approach"),(0,n.kt)("li",{parentName:"ul"},"Provide most potential benefits")),(0,n.kt)("h3",{id:"hierarchy-graphs"},"Hierarchy Graphs"),(0,n.kt)("p",null,"Extend notation slightly to explicitly identify abstract classes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Fill in top left corner of a box of an abstract class")),(0,n.kt)("p",null,(0,n.kt)("img",{src:i(4694).Z,width:"426",height:"239"})),(0,n.kt)("h3",{id:"multiple-inheritance"},"Multiple Inheritance"),(0,n.kt)("p",null,"Multiple inheritance can also be included in a hierarchy graph\n",(0,n.kt)("img",{src:i(1956).Z,width:"460",height:"264"})),(0,n.kt)("h3",{id:"venn-diagrams"},"Venn Diagrams"),(0,n.kt)("p",null,"Can represent responsibilities of a class as a set, so shared responsibilities show up in a venn diagram\n",(0,n.kt)("img",{src:i(7182).Z,width:"546",height:"315"})),(0,n.kt)("h2",{id:"guidelines-on-building-good-class-hierarchies"},"Guidelines on Building Good Class Hierarchies"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Model ",(0,n.kt)("em",{parentName:"li"},"is-kind-of")," (or is-type-of) hierarchies"),(0,n.kt)("li",{parentName:"ol"},"Factor common responsibilities as high as possible"),(0,n.kt)("li",{parentName:"ol"},"Don't allow abstract classes to inherit from concrete ones"),(0,n.kt)("li",{parentName:"ol"},"Eliminate non-functional classes")),(0,n.kt)("h3",{id:"is-kind-of-hierarchy"},"Is-kind-of Hierarchy"),(0,n.kt)("p",null,"Class A is derived from B, only if supports all its responsibilities\n",(0,n.kt)("img",{src:i(7199).Z,width:"635",height:"317"})),(0,n.kt)("h3",{id:"move-common-responsibilities-up-hierarchy"},"Move Common Responsibilities up Hierarchy"),(0,n.kt)("p",null,"Factor common responsibilities as high up as possible\nDesign as many abstract classes as possible"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Likely to result in maximal design simplification, design sharing, and code sharing"),(0,n.kt)("li",{parentName:"ul"},"Likely to make system more extensible -- later improvements are likely to be more easily integrated"),(0,n.kt)("li",{parentName:"ul"},"Decision criteria for creating abstract classes can involve speculation on possible future extensions/modifications"),(0,n.kt)("li",{parentName:"ul"},"One responsibility is enough to justify an abstract class"),(0,n.kt)("li",{parentName:"ul"},"Need at least two children, otherwise difficult to identify good generic definition of responsibilities ")),(0,n.kt)("h2",{id:"abstract-classes-in-hierarchy"},"Abstract Classes in Hierarchy"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Should not inherit from concrete classes"),(0,n.kt)("li",{parentName:"ul"},"Abstract class behaviour - implementation-independent"),(0,n.kt)("li",{parentName:"ul"},"Concrete class behaviour - implementation-dependent"),(0,n.kt)("li",{parentName:"ul"},"Characterisation is violated if an abstract class inherits from a concrete one")),(0,n.kt)("h2",{id:"eliminate-classes"},"Eliminate Classes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Classes that add no new functionality are normally eliminated"),(0,n.kt)("li",{parentName:"ul"},"Could have no new responsibilities, but still add functionality."),(0,n.kt)("li",{parentName:"ul"},"Responsibilities are inherited by children but assigned to parent")))}u.isMDXComponent=!0},4694:(e,t,i)=>{i.d(t,{Z:()=>r});const r=i.p+"assets/images/20221031163006-05e39c226c0e7387e05f49f3fd3b9d46.png"},1956:(e,t,i)=>{i.d(t,{Z:()=>r});const r=i.p+"assets/images/20221031163051-75bd34c7d142bb0f623832b34f98d0f7.png"},7182:(e,t,i)=>{i.d(t,{Z:()=>r});const r=i.p+"assets/images/20221031163142-8ad661c49ec9cf5aca72b13b2eef0de6.png"},7199:(e,t,i)=>{i.d(t,{Z:()=>r});const r=i.p+"assets/images/20221031163756-e8e2d34eb38eb1d0521e3385af02b90b.png"}}]);