"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[4901],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,k=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},16334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={},l="Modes of operation",o={unversionedId:"Year3/3077/09",id:"Year3/3077/09",title:"Modes of operation",description:"Mode of operation is the configuration used around a block cipher",source:"@site/docs/Year3/3077/09.md",sourceDirName:"Year3/3077",slug:"/Year3/3077/09",permalink:"/Year3/3077/09",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year3",previous:{title:"Advanced Encryption Standard (AES)",permalink:"/Year3/3077/08"},next:{title:"Public Key Mathematics",permalink:"/Year3/3077/10"}},c={},s=[{value:"Padding",id:"padding",level:2},{value:"Electronic Code Block (ECB)",id:"electronic-code-block-ecb",level:2},{value:"Weakness",id:"weakness",level:3},{value:"Deterministic vs Probabilistic Encryption",id:"deterministic-vs-probabilistic-encryption",level:2},{value:"Cipher Block Chaining (CBC)",id:"cipher-block-chaining-cbc",level:2},{value:"Decryption",id:"decryption",level:3},{value:"Weakness",id:"weakness-1",level:3},{value:"Padding Oracles",id:"padding-oracles",level:2},{value:"Attacks",id:"attacks",level:3},{value:"Counter Mode (CTR)",id:"counter-mode-ctr",level:2},{value:"Galois Counter Mode",id:"galois-counter-mode",level:2}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"modes-of-operation"},"Modes of operation"),(0,i.kt)("p",null,"Mode of operation is the configuration used around a block cipher"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Most messages don't come in convenient 128-bit block lengths"),(0,i.kt)("li",{parentName:"ul"},"Need to run a block cipher repeatedly on consecutive blocks"),(0,i.kt)("li",{parentName:"ul"},"Stream Cipher have been proven harder to implement. ChaCha20 is pretty good. Have been massively broken")),(0,i.kt)("h2",{id:"padding"},"Padding"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ECB and some other modes require message length to be a multiple of the block size"),(0,i.kt)("li",{parentName:"ul"},"Public Key Cryptography Standards (PKCS7) is a common padding scheme:")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Padding bytes are always added to the plaintext before it is encrypted"),(0,i.kt)("li",{parentName:"ol"},"Each padding byte had a value equal to the total number of padding bytes that are added"),(0,i.kt)("li",{parentName:"ol"},"The total number of padding bytes is at least one")),(0,i.kt)("h2",{id:"electronic-code-block-ecb"},"Electronic Code Block (ECB)"),(0,i.kt)("p",null,"Just encrypt each block one after another\n(Never do this)"),(0,i.kt)("h3",{id:"weakness"},"Weakness"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ECB allows an attacker to infer information on the plaintext"),(0,i.kt)("li",{parentName:"ul"},"ECB divulges whenever messages or blocks are the same")),(0,i.kt)("h2",{id:"deterministic-vs-probabilistic-encryption"},"Deterministic vs Probabilistic Encryption"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An encryption scheme is deterministic if some plaintext is mapped to a fixed ciphertext if the key is unchanged"),(0,i.kt)("li",{parentName:"ul"},"ECB is deterministic, but most modern modes of operation are probabilistic"),(0,i.kt)("li",{parentName:"ul"},"Probabilistic encryption schemes add randomness to the encryption process to achieve a non-deterministic generation of the cipher text")),(0,i.kt)("h2",{id:"cipher-block-chaining-cbc"},"Cipher Block Chaining (CBC)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"XOR the output of each cipher block with the next input"),(0,i.kt)("li",{parentName:"ul"},"IV: Initialisation Vector")),(0,i.kt)("h3",{id:"decryption"},"Decryption"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Similar, but the XOR now takes place after decryption"),(0,i.kt)("li",{parentName:"ul"},"Easier to parallelise")),(0,i.kt)("h3",{id:"weakness-1"},"Weakness"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Was the primary method of encryption for many years, now less common")),(0,i.kt)("h2",{id:"padding-oracles"},"Padding Oracles"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Oracle is a system we can query and it will tell us if, once decrypted, some text has valid padding"),(0,i.kt)("li",{parentName:"ul"},"System is unlikely to tell you directly, but it might give away some clues")),(0,i.kt)("h3",{id:"attacks"},"Attacks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Attack is essentially the same for multiple blocks, just one at a time"),(0,i.kt)("li",{parentName:"ul"},"Attack the last block, which contains padding")),(0,i.kt)("h2",{id:"counter-mode-ctr"},"Counter Mode (CTR)"),(0,i.kt)("p",null,"Encrypt a nonce + counter and use this to mask the plaintext with XOR"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This is very easily parallelised "),(0,i.kt)("li",{parentName:"ul"},"Each block is encrypted differently, avoiding the issue with ECB mode")),(0,i.kt)("h2",{id:"galois-counter-mode"},"Galois Counter Mode"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Extends the counter mode to add authenticity",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sender definitely sent that message, and it hasn't changed"))),(0,i.kt)("li",{parentName:"ul"},"Very similar to counter mode, but adds an authentication tag",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Uses multiplication in a Galois Finite field ...."))),(0,i.kt)("li",{parentName:"ul"},"Extremely parallelisable"),(0,i.kt)("li",{parentName:"ul"},"Robust to message alteration")))}p.isMDXComponent=!0}}]);