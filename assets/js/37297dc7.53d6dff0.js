"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[6463],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,f=d["".concat(s,".").concat(p)]||d[p]||m[p]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5117:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={},s=void 0,u={unversionedId:"Year1/Programming Paradigms/Java/22.02.10 - Introduction to Objected Oriented Desig",id:"Year1/Programming Paradigms/Java/22.02.10 - Introduction to Objected Oriented Desig",title:"22.02.10 - Introduction to Objected Oriented Desig",description:"Object Orientation",source:"@site/docs/Year1/1009 - Programming Paradigms/Java/22.02.10 - Introduction to Objected Oriented Desig.md",sourceDirName:"Year1/1009 - Programming Paradigms/Java",slug:"/Year1/Programming Paradigms/Java/22.02.10 - Introduction to Objected Oriented Desig",permalink:"/Year1/Programming Paradigms/Java/22.02.10 - Introduction to Objected Oriented Desig",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"22.02.04 - Java and C, using Objects",permalink:"/Year1/Programming Paradigms/Java/22.02.04 - Java and C, using Objects"},next:{title:"Constructors",permalink:"/Year1/Programming Paradigms/Java/22.02.17 - Aggregation"}},l={},m=[{value:"Object Orientation",id:"object-orientation",level:2},{value:"Decomposition",id:"decomposition",level:2}],d={toc:m};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"object-orientation"},"Object Orientation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"OO systems are viewed as compositions of ",(0,o.kt)("strong",{parentName:"li"},"domain specific object abstractions"),", rather than data and functions"),(0,o.kt)("li",{parentName:"ul"},"Objects associate ",(0,o.kt)("strong",{parentName:"li"},"data")," and ",(0,o.kt)("strong",{parentName:"li"},"behaviour")),(0,o.kt)("li",{parentName:"ul"},"In a system they intercommunicate by sending messages to each other",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Synchronous - method/function call"))),(0,o.kt)("li",{parentName:"ul"}," Asynchronous - Leave a message"),(0,o.kt)("li",{parentName:"ul"},"An object is a domain concept",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"- State - data\n- Behaviour - methods\n- Identity - unique identifier\n")),"Setter - Method which allows us to set the value of the data in the object\nGetter - Method which allows us to get the current value of the data in the object")),(0,o.kt)("h2",{id:"decomposition"},"Decomposition"),(0,o.kt)("p",null,"Reduces how much you have to consider at the same time\nProcedural Decomposition splits the program into a number of procedures/functions\nFewer interacting things make the problem  simpler in mind\nInvolves modelling the world in objects rather than functions"),(0,o.kt)("h1",{id:"identifying-classes-and-objects"},"Identifying classes and objects"),(0,o.kt)("p",null,"Java classes already exist for most of what we would want to do\nAbstraction means that we can deal with the classes on the basis of 'what they do' not 'how they do it' "),(0,o.kt)("h1",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Can decompose tasks into interacting objects\nCan add functions/methods to classes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"objectRef.methodName()\n")),(0,o.kt)("p",null,"These methods refer to the data for the current object"))}p.isMDXComponent=!0}}]);