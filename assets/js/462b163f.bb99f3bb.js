"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[1837],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,k=p["".concat(s,".").concat(d)]||p[d]||m[d]||l;return n?i.createElement(k,a(a({ref:t},u),{},{components:n})):i.createElement(k,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var c=2;c<l;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},34518:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var i=n(87462),r=(n(67294),n(3905));const l={},a="22. File System Recovery & Defag",o={unversionedId:"Year2/2007/22",id:"Year2/2007/22",title:"22. File System Recovery & Defag",description:"05/12/22",source:"@site/docs/Year2/2007/22.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/22",permalink:"/Year2/2007/22",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"21. I-Nodes & File Systems",permalink:"/Year2/2007/21"},next:{title:"23. Virtualisation",permalink:"/Year2/2007/23"}},s={},c=[{value:"File System Consistency",id:"file-system-consistency",level:2},{value:"Checking Consistency",id:"checking-consistency",level:3},{value:"Block Consistency",id:"block-consistency",level:3},{value:"Restore Block Consistency",id:"restore-block-consistency",level:3},{value:"Restore I-node consistency",id:"restore-i-node-consistency",level:3},{value:"File System Defragmentation",id:"file-system-defragmentation",level:2},{value:"Linux File System",id:"linux-file-system",level:2},{value:"Directory Entries",id:"directory-entries",level:3},{value:"EXT2",id:"ext2",level:3}],u={toc:c};function m(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"22-file-system-recovery--defag"},"22. File System Recovery & Defag"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"05/12/22")),(0,r.kt)("h2",{id:"file-system-consistency"},"File System Consistency"),(0,r.kt)("h3",{id:"checking-consistency"},"Checking Consistency"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Journaling heavily reduces the probability of having inconsistencies in a file system. The log stores what operations were not run."),(0,r.kt)("li",{parentName:"ul"},"However,  it can still be possible to get some inconsistencies (data blocks weren't flushed to the drive)"),(0,r.kt)("li",{parentName:"ul"},"Can be problematic, especially for structural blocks such as i-nodes, directories and free lists"),(0,r.kt)("li",{parentName:"ul"},"System utilities are available to restore file systems"),(0,r.kt)("li",{parentName:"ul"},"Two main consistency checks; blocks and directory")),(0,r.kt)("h3",{id:"block-consistency"},"Block Consistency"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Checks whether blocks are assigned/used the correct way"),(0,r.kt)("li",{parentName:"ul"},"Block consistency is checked by building two tables:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"How often a block is present in a file (based on the i-nodes)"),(0,r.kt)("li",{parentName:"ol"},"Counts how often a block is present in the free list"))),(0,r.kt)("li",{parentName:"ul"},"Consistent file system has a 1 in either of the tables for each block"),(0,r.kt)("li",{parentName:"ul"},"Typically, this is a very slow process, can take hours\n",(0,r.kt)("img",{src:n(73973).Z,width:"1085",height:"521"}))),(0,r.kt)("h3",{id:"restore-block-consistency"},"Restore Block Consistency"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"missing block")," - does not exist in any of the tables -> add it to the free list"),(0,r.kt)("li",{parentName:"ul"},"A block is ",(0,r.kt)("strong",{parentName:"li"},"double counted"),' in the free list ("disaster" waiting to happen) -> re-build the free list'),(0,r.kt)("li",{parentName:"ul"},"A block is present in two or more files",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Removing one file results in the adding the block to the free list"),(0,r.kt)("li",{parentName:"ul"},"Remove both files will result in a double entry in the free list"),(0,r.kt)("li",{parentName:"ul"},"Solution: use new free block and copy the content (file is still likely to be damaged \ud83d\ude1e)")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"FSCK Algorith:\n1. Iterate through all the i-nodes\n    - retrieve the blocks\n    - increment the counters\n2. Iterate through the free list\n    - incremenet counters for free blocks\n")),(0,r.kt)("h3",{id:"restore-i-node-consistency"},"Restore I-node consistency"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Checking the directory system"),(0,r.kt)("li",{parentName:"ul"},"I-node counter is higher than the number of directories containing the file",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Removing the file will reduce the i-node counter by 1"),(0,r.kt)("li",{parentName:"ul"},"Since the counter will remain larger than 1, the i-node/disk space will not be released to future use"))),(0,r.kt)("li",{parentName:"ul"},"I-node counter is less than the number of directories containing the file",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Removing the file will (eventually) set the i-node counter to 0 whilst the file is still referenced"),(0,r.kt)("li",{parentName:"ul"},"The file/i-node will be released, even though the file was still in use")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- Recurse through the directory hierarchy\n    - Check file specific counters\n    - I.e. each file is associated with one counter\n- One file may appear in multiple directories\n    - Compare the file counters and i-node counters\n    - Correct if necessary\n")),(0,r.kt)("h2",{id:"file-system-defragmentation"},"File System Defragmentation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"At the start all free disk space is in a single contiguous unit"),(0,r.kt)("li",{parentName:"ul"},"Creating and removing files, a disk may end up badly fragmented"),(0,r.kt)("li",{parentName:"ul"},"Defrag utilities make file blocks contiguous (very slow operation), and free space in one or more large contiguous regions on the disk"),(0,r.kt)("li",{parentName:"ul"},"Defragmentating SSD is counter-productive")),(0,r.kt)("h2",{id:"linux-file-system"},"Linux File System"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Minix File System")," - Max: 64MB, file names limited to 14 char"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extended File System (extfs)")," - file names were 255 char, max file size 2GB"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ext2")," - larger files, names, better performance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ext3-4")," - journaling\n",(0,r.kt)("img",{src:n(74786).Z,width:"891",height:"523"}))),(0,r.kt)("h3",{id:"directory-entries"},"Directory Entries"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Superblock contains file system information"),(0,r.kt)("li",{parentName:"ul"},"Group descriptor contains bitmap locations, number of free blocks, i-nodes and directories"),(0,r.kt)("li",{parentName:"ul"},"Data block bitmap and i-node bitmap, used to keep track of free disk blocks and i-nodes"),(0,r.kt)("li",{parentName:"ul"},"Table of i-nodes containing file and disk block information"),(0,r.kt)("li",{parentName:"ul"},"Data blocks containing file and directory blocks")),(0,r.kt)("h3",{id:"ext2"},"EXT2"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Partition is split into several block groups",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Reduce fragmentation by storing i-nodes and files, and parent directories and files in the same block group is possible"),(0,r.kt)("li",{parentName:"ul"},"Reduce seek time and improve performance"))),(0,r.kt)("li",{parentName:"ul"},"All groups have the same size and are stored sequentially")))}m.isMDXComponent=!0},73973:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/20221209180253-b8215ff7f4e601f7b44a3879f5d217ed.png"},74786:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/20221209182747-9006cd8799312b543b3272e61b9e286c.png"}}]);