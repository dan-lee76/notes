"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8214],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(k,i(i({ref:t},p),{},{components:r})):n.createElement(k,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},32647:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={},i="Processes 2",l={unversionedId:"Year3/4101/09",id:"Year3/4101/09",title:"Processes 2",description:"Steps for DLL injection",source:"@site/docs/Year3/4101/09.md",sourceDirName:"Year3/4101",slug:"/Year3/4101/09",permalink:"/Year3/4101/09",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year3",previous:{title:"Processes 1",permalink:"/Year3/4101/08"},next:{title:"Malware: Impact and Evolution",permalink:"/Year3/4101/10"}},s={},c=[{value:"Steps for DLL injection",id:"steps-for-dll-injection",level:2},{value:"Direct Injection",id:"direct-injection",level:2},{value:"Non-Traditional Loading",id:"non-traditional-loading",level:2},{value:"Thread Environment Block",id:"thread-environment-block",level:2},{value:"Process Environment Block",id:"process-environment-block",level:2},{value:"Starting a Process",id:"starting-a-process",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"processes-2"},"Processes 2"),(0,a.kt)("h2",{id:"steps-for-dll-injection"},"Steps for DLL injection"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Call ",(0,a.kt)("inlineCode",{parentName:"li"},"OpenProcess()")," to get ",(0,a.kt)("inlineCode",{parentName:"li"},"HANDLE")," for the process"),(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"VirtualAllocEx()")," to allocate memory inside the process"),(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"WriteProcessMemory()")," to copy path to DLL into the process"),(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"CreateRemoteThread()")," to create a new thread in the process",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Start ",(0,a.kt)("inlineCode",{parentName:"li"},"LoadLibrary()")," as the thread routine"),(0,a.kt)("li",{parentName:"ul"},"Pass the address of the DLL path as data to the thread")))),(0,a.kt)("h2",{id:"direct-injection"},"Direct Injection"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Related Technique - Inject code directly rather than path to DLL"),(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"VirtualAllocEx()")," to allocate memory - need to ensure it is marked as executable"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WriteProcessMemory()")," used to copy over code"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CreateRemoteThread()")," used to start code"),(0,a.kt)("li",{parentName:"ul"},"Harder to write code for this - code isn't loaded so will need to find address of API function itself")),(0,a.kt)("h2",{id:"non-traditional-loading"},"Non-Traditional Loading"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Code knows where the stack is (using esp)"),(0,a.kt)("li",{parentName:"ul"},"Can use this to create structures or store strings, by pushing the relevant values and capturing the address")),(0,a.kt)("p",null,"...."),(0,a.kt)("h2",{id:"thread-environment-block"},"Thread Environment Block"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Every thread on a Windows program has an associated Thread Environment Block..")),(0,a.kt)("h2",{id:"process-environment-block"},"Process Environment Block"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Part of the kernels data structures about each process"),(0,a.kt)("li",{parentName:"ul"},"Fortun...")),(0,a.kt)("h2",{id:"starting-a-process"},"Starting a Process"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Windows provides API calls that ca.....")))}u.isMDXComponent=!0}}]);