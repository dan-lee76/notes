"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[7107],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=c(n),f=a,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||i;return n?r.createElement(d,l(l({ref:t},s),{},{components:n})):r.createElement(d,l({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},10114:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={},l="9. Function pointers & Virtual/non-virtual functions",o={unversionedId:"Year2/2006/09",id:"Year2/2006/09",title:"9. Function pointers & Virtual/non-virtual functions",description:"02/03/23",source:"@site/docs/Year2/2006/09.md",sourceDirName:"Year2/2006",slug:"/Year2/2006/09",permalink:"/Year2/2006/09",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"8. Inheritance and Virtual Functions",permalink:"/Year2/2006/08"},next:{title:"0. Introduction to Operating systems and Concurrency",permalink:"/Year2/2007/00"}},u={},c=[{value:"Function Pointers",id:"function-pointers",level:2},{value:"v-tables",id:"v-tables",level:2},{value:"Normal/default (non-<code>virtual</code>) functions",id:"normaldefault-non-virtual-functions",level:3},{value:"Virtual Function",id:"virtual-function",level:3},{value:"Special Cases",id:"special-cases",level:2},{value:"Should a function be <code>virtual</code>?",id:"should-a-function-be-virtual",level:3}],s={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"9-function-pointers--virtualnon-virtual-functions"},"9. Function pointers & Virtual/non-virtual functions"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"02/03/23")),(0,a.kt)("h2",{id:"function-pointers"},"Function Pointers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Stored in memory",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Can ask for the address of them"),(0,a.kt)("li",{parentName:"ul"},"Can store these in function pointers"))),(0,a.kt)("li",{parentName:"ul"},"Used a lot in low-level programming"),(0,a.kt)("li",{parentName:"ul"},"Function pointers can be passed into functions"),(0,a.kt)("li",{parentName:"ul"},"Used for 'callback functions'",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Allows something to call you back"),(0,a.kt)("li",{parentName:"ul"},"'Call this function when an event happens'"),(0,a.kt)("li",{parentName:"ul"},"Event driven programming is VERY common")))),(0,a.kt)("h2",{id:"v-tables"},"v-tables"),(0,a.kt)("h3",{id:"normaldefault-non-virtual-functions"},"Normal/default (non-",(0,a.kt)("inlineCode",{parentName:"h3"},"virtual"),") functions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type of pointer determines function to call"),(0,a.kt)("li",{parentName:"ul"},"Use the type of the object the compiler thinks it is:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type of pointer to the object"),(0,a.kt)("li",{parentName:"ul"},"Type of the member function making the call"),(0,a.kt)("li",{parentName:"ul"},"Easier for the compiler, type is known at compile-time")))),(0,a.kt)("h3",{id:"virtual-function"},"Virtual Function"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Finds out the actual function to call based upon the object type AT RUNTIME - much more difficult - slower"),(0,a.kt)("li",{parentName:"ul"},"Works in the same way as Java functions")),(0,a.kt)("h2",{id:"special-cases"},"Special Cases"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"virtual"),"-ness is inherited"),(0,a.kt)("li",{parentName:"ul"},"If a function is ",(0,a.kt)("inlineCode",{parentName:"li"},"virtual")," in the base class then the function is ",(0,a.kt)("inlineCode",{parentName:"li"},"virtual")," in the derived class(es)"),(0,a.kt)("li",{parentName:"ul"},"Even when the keyword ",(0,a.kt)("inlineCode",{parentName:"li"},"virtual")," is not used in the ",(0,a.kt)("em",{parentName:"li"},"derived")," class")),(0,a.kt)("h3",{id:"should-a-function-be-virtual"},"Should a function be ",(0,a.kt)("inlineCode",{parentName:"h3"},"virtual"),"?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If member function is called from a base class function or through a base class pointer AND the behaviour should depend on class type of the object then the member function has to be ",(0,a.kt)("inlineCode",{parentName:"li"},"virtual")),(0,a.kt)("li",{parentName:"ul"},"Utility functions will often not be ",(0,a.kt)("inlineCode",{parentName:"li"},"virtual"))))}p.isMDXComponent=!0}}]);