"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3807],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),i=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},c=function(e){var n=i(e.components);return a.createElement(p.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=i(t),f=r,d=u["".concat(p,".").concat(f)]||u[f]||l[f]||s;return t?a.createElement(d,m(m({ref:n},c),{},{components:t})):a.createElement(d,m({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,m=new Array(s);m[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,m[1]=o;for(var i=2;i<s;i++)m[i]=t[i];return a.createElement.apply(null,m)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3564:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>m,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>i});var a=t(7462),r=(t(7294),t(3905));const s={},m="12. Deciding Equality of Natural Numbers $(mathbf{N})$",o={unversionedId:"Year2/2009/12",id:"Year2/2009/12",title:"12. Deciding Equality of Natural Numbers $(\\mathbf{N})$",description:"14/11/22",source:"@site/docs/Year2/2009/12.md",sourceDirName:"Year2/2009",slug:"/Year2/2009/12",permalink:"/Year2/2009/12",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"11. Multiplicaiton & less-or-equal",permalink:"/Year2/2009/11"},next:{title:"0. Introduction to Developing Maintainable Software",permalink:"/Year2/2013/00"}},p={},i=[],c={toc:i};function l(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"12-deciding-equality-of-natural-numbers-mathbfn"},"12. Deciding Equality of Natural Numbers ",(0,r.kt)("span",{parentName:"h1",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"bold"},"N"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(\\mathbf{N})")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathbf"},"N"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"14/11/22"),"\n",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow",mathvariant:"double-struck"},"N")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\N")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6889em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathbb"},"N")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean"},"namespace l13\nset_option pp.structure_projections false\nopen nat\n\ndef eqb : \u2115 \u2192 \u2115 \u2192 bool \n  | zero zero := tt\n  | (succ m) zero := ff\n  | zero (succ n) := ff\n  | (succ m) (succ n) := eqb m n\n\n#eval (eqb 2 2)\n\n-- decides equality (=)\nvariables A B : Type\n\nexample : \u2200 f : A \u2192 B, \u2200 x y, x = y \u2192 f x = f y :=\nbegin\n  assume f x y h,\n  rewrite h,\nend\n/-\nexample : \u2200 f : A \u2192 B, \u2200 x y, f x = f y \u2192 x = y :=\n-/\n\nlemma eqb_sound : \u2200 n : \u2115, eqb n n = tt :=\nbegin\n  assume n,\n  induction n with n' ih,\n  refl,\n  \n  dsimp[eqb],\n  exact ih,\nend\n\nlemma eqb_compl : \u2200 m n : \u2115, eqb m n = tt \u2192 m = n :=\nbegin\n  assume m,\n  induction m with m' ih_m,\n  assume n,\n  cases n with n',\n  assume h,\n  refl,\n  assume h,\n  dsimp[eqb] at h,\n  contradiction,\n  assume n,\n  cases n with n',\n  dsimp[eqb],\n  assume h,\n  contradiction,\n  assume h,\n  apply congr_arg succ,\n  apply ih_m,\n  dsimp[eqb] at h,\n  exact h,\nend\n\ntheorem eqb_ok : \u2200 m n : \u2115, eqb m n = tt \u2194 m = n :=\nbegin\n  assume m n,\n  constructor,\n  apply eqb_compl,\n  \n  assume h,\n  rewrite h,\n  apply eqb_sound,\nend\n\n-- we say eqb *decides* = \n-- P : A \u2192 Prop\n-- f : A \u2192 bool\n-- f *decides* P means\n-- \u2200 a:A, P a \u2194 f a = tt\n-- Prime : \u2115 \u2192 Prop\n-- is_prime : \u2115 \u2192 bool\n-- can we decide any predicate? \n\n\ndef Hard (f : \u2115 \u2192 bool) : Prop :=\n  \u2200 n : \u2115, f n = tt\n\n\n-- is there\n-- hard : (\u2115 \u2192 bool) \u2192 bool\n-- decides Hard?\n\n\nend l13\n")))}l.isMDXComponent=!0}}]);