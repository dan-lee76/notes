"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[7729],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,k=c["".concat(s,".").concat(d)]||c[d]||p[d]||i;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},67207:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={},l="4. Structs, Unions, Data Sizes",o={unversionedId:"Year2/2006/04",id:"Year2/2006/04",title:"4. Structs, Unions, Data Sizes",description:"14/02/23",source:"@site/docs/Year2/2006/04.md",sourceDirName:"Year2/2006",slug:"/Year2/2006/04",permalink:"/Year2/2006/04",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"3. Stack, local variables and static locals",permalink:"/Year2/2006/03"},next:{title:"0. Introduction to Operating systems and Concurrency",permalink:"/Year2/2007/00"}},s={},u=[{value:"Structs",id:"structs",level:2},{value:"Allocating memory from the heap",id:"allocating-memory-from-the-heap",level:2},{value:"Steps to dynamic memory bliss",id:"steps-to-dynamic-memory-bliss",level:3},{value:"Positioning of struct elements",id:"positioning-of-struct-elements",level:2},{value:"<code>#pragma</code>",id:"pragma",level:3},{value:"Unions",id:"unions",level:2},{value:"Bit fields",id:"bit-fields",level:2},{value:"C++ Things",id:"c-things",level:2},{value:"New",id:"new",level:3}],m={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"4-structs-unions-data-sizes"},"4. Structs, Unions, Data Sizes"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"14/02/23")),(0,r.kt)("h2",{id:"structs"},"Structs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"structs and classes are virtually the same thing in C++"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"struct")," to create a new structure. and ",(0,r.kt)("inlineCode",{parentName:"li"},".")," to access values of it"),(0,r.kt)("li",{parentName:"ul"},"Once defined can use as any other type"),(0,r.kt)("li",{parentName:"ul"},"Can take the address of a variable of type ",(0,r.kt)("inlineCode",{parentName:"li"},"struct")," and store it in a ",(0,r.kt)("inlineCode",{parentName:"li"},"struct")," pointer"),(0,r.kt)("li",{parentName:"ul"},"Can embed a ",(0,r.kt)("inlineCode",{parentName:"li"},"struct")," as a member of another ",(0,r.kt)("inlineCode",{parentName:"li"},"struct")),(0,r.kt)("li",{parentName:"ul"},"Can create an array of ",(0,r.kt)("inlineCode",{parentName:"li"},"structs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sizeof()")," is total of the size of the members")),(0,r.kt)("p",null,"Either pass the struct into a function or a pointer "),(0,r.kt)("h2",{id:"allocating-memory-from-the-heap"},"Allocating memory from the heap"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"malloc()")," will allocate bytes of memory"),(0,r.kt)("li",{parentName:"ul"},"Will not (directly) allocate a string for you, or an array, or an int"),(0,r.kt)("li",{parentName:"ul"},"In C++ you have constructors, and may add hidden things to your objects"),(0,r.kt)("li",{parentName:"ul"},"Should store the returned address in a pointer of the type you wish to use it as"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"malloc()")," returns a ",(0,r.kt)("inlineCode",{parentName:"li"},"void*"))),(0,r.kt)("h3",{id:"steps-to-dynamic-memory-bliss"},"Steps to dynamic memory bliss"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Work out how much memory you need to allocate"),(0,r.kt)("li",{parentName:"ol"},"Ask for that amount of memory "),(0,r.kt)("li",{parentName:"ol"},"Store the returned pointer"),(0,r.kt)("li",{parentName:"ol"},"Use the memory through the pointer, as if it was the correct type"),(0,r.kt)("li",{parentName:"ol"},"When finished, free the memory")),(0,r.kt)("h2",{id:"positioning-of-struct-elements"},"Positioning of struct elements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Like arrays, the positions of the members inside a ",(0,r.kt)("inlineCode",{parentName:"li"},"struct")," are known"),(0,r.kt)("li",{parentName:"ul"},"Elements will be placed sequentially in memory, in the order they are defined in the structure")),(0,r.kt)("h3",{id:"pragma"},(0,r.kt)("inlineCode",{parentName:"h3"},"#pragma")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"structs")," may get empty space in them"),(0,r.kt)("li",{parentName:"ul"},"Can usually tell compiler to pack structs, ignoring speed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"#pragma")," means a compiler/os specific pre-processor directive ")),(0,r.kt)("h2",{id:"unions"},"Unions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Very similar to ",(0,r.kt)("inlineCode",{parentName:"li"},"structs")," except that the data members are in the same place"),(0,r.kt)("li",{parentName:"ul"},"In ",(0,r.kt)("inlineCode",{parentName:"li"},"union"),"s data members all have the same address"),(0,r.kt)("li",{parentName:"ul"},"Elements of unions are in the SAME place and may be different sizes"),(0,r.kt)("li",{parentName:"ul"},"Unions is as big as the biggest thing inside of it"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sizeof()")," is of the largest member")),(0,r.kt)("h2",{id:"bit-fields"},"Bit fields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Within structs you can specify fields with size less than a byte")),(0,r.kt)("h2",{id:"c-things"},"C++ Things"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"C++ structs can also act as full classes"),(0,r.kt)("li",{parentName:"ul"},"Structs default to public, whereas classes are private")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," to create a new object of type"),(0,r.kt)("h3",{id:"new"},"New"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Knows how big the object is"),(0,r.kt)("li",{parentName:"ul"},"Creates an object and returns a pointer"),(0,r.kt)("li",{parentName:"ul"},"How to create the object in memory"),(0,r.kt)("li",{parentName:"ul"},"Calls the constructor"),(0,r.kt)("li",{parentName:"ul"},"Throws an exception if it fails")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"delete")," - destroys an object"),(0,r.kt)("p",null,"Both have a ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," version for creating and destroy arrays"))}p.isMDXComponent=!0}}]);