"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[7247],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=o(a),k=r,d=u["".concat(p,".").concat(k)]||u[k]||c[k]||i;return a?n.createElement(d,s(s({ref:t},m),{},{components:a})):n.createElement(d,s({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var o=2;o<i;o++)s[o]=a[o];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},66281:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var n=a(87462),r=(a(67294),a(3905));const i={},s="Elgamal Encryption",l={unversionedId:"Year3/3077/16",id:"Year3/3077/16",title:"Elgamal Encryption",description:"- Extension of diffie-helman",source:"@site/docs/Year3/3077/16.md",sourceDirName:"Year3/3077",slug:"/Year3/3077/16",permalink:"/Year3/3077/16",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year3",previous:{title:"Digital Signatures",permalink:"/Year3/3077/15"},next:{title:"revision",permalink:"/Year3/3077/revision"}},p={},o=[{value:"Elgamal",id:"elgamal",level:2},{value:"Computational Efficiency",id:"computational-efficiency",level:2},{value:"Practicalities",id:"practicalities",level:2},{value:"DSA",id:"dsa",level:2},{value:"ECDSA",id:"ecdsa",level:2}],m={toc:o};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"elgamal-encryption"},"Elgamal Encryption"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Extension of diffie-helman")),(0,r.kt)("h2",{id:"elgamal"},"Elgamal"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Develop by Taher Elgamal in 1985"),(0,r.kt)("li",{parentName:"ul"},"As this is a public key encryption, can make some efficiency savings by not sending all the information both ways every time"),(0,r.kt)("li",{parentName:"ul"},"If ...")),(0,r.kt)("h2",{id:"computational-efficiency"},"Computational Efficiency"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Both the exponentiations during encryption can be pre-computed during downtime"),(0,r.kt)("li",{parentName:"ul"},"Can also improve on the decryption step using Fermats little theorem")),(0,r.kt)("h2",{id:"practicalities"},"Practicalities"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Elgamal is a probabilistic encryption scheme. Uses an ephemeral key pair a and k_E and ..."),(0,r.kt)("li",{parentName:"ul"},".....")),(0,r.kt)("h2",{id:"dsa"},"DSA"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Based on Elgamal, developed by NIST as an alternative to RSA"),(0,r.kt)("li",{parentName:"ul"},"Computed in a subgroup of prime orders q, which is usually 160 bits"),(0,r.kt)("li",{parentName:"ul"},"Means the signature (r,s) is 320 bits"),(0,r.kt)("li",{parentName:"ul"},"Hashing is enforced by the algorithm, and a hash function must match the key size"),(0,r.kt)("li",{parentName:"ul"},"Index calculus does not apply to the sub-group, so 160 bit DSA signatures have a security of 80 bits"),(0,r.kt)("li",{parentName:"ul"},"In practice larger keys would be required now")),(0,r.kt)("h2",{id:"ecdsa"},"ECDSA"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Identical to DSA, operates on an elliptic curve over ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"Z"),(0,r.kt)("mi",{parentName:"msub"},"p"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Z_p")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9694em",verticalAlign:"-0.2861em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"Z"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0715em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"p")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2861em"}},(0,r.kt)("span",{parentName:"span"}))))))))))," with the signature calculated over a large subgroup of prime order ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex-error",title:"ParseError: KaTeX parse error: Expected 'EOF', got '#' at position 1: #\u0332q",style:{color:"#cc0000"}},"#q"))),(0,r.kt)("li",{parentName:"ul"},"More efficient, does not require modulus of thousands of bits"),(0,r.kt)("li",{parentName:"ul"},"Security level is based on generic attacks against EC"),(0,r.kt)("li",{parentName:"ul"},"Deterministic generation of k is often used for security"),(0,r.kt)("li",{parentName:"ul"},"Other variants like EdDSA using Edwards curves")))}c.isMDXComponent=!0}}]);