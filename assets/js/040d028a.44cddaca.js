"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8578],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),u=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=u(r),d=n,h=c["".concat(o,".").concat(d)]||c[d]||p[d]||i;return r?a.createElement(h,s(s({ref:t},m),{},{components:r})):a.createElement(h,s({ref:t},m))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var u=2;u<i;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},1497:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const i={},s="25. Revision",l={unversionedId:"Year2/2007/25",id:"Year2/2007/25",title:"25. Revision",description:"Computer Design",source:"@site/docs/Year2/2007/25.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/25",permalink:"/Year2/2007/25",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"24.  Virtualisation & the Cloud",permalink:"/Year2/2007/24"},next:{title:"0. Introduction to Algorithms Correctness and Efficiency",permalink:"/Year2/2009/00"}},o={},u=[{value:"Computer Design",id:"computer-design",level:2},{value:"Registers",id:"registers",level:3},{value:"Memory Management Unit",id:"memory-management-unit",level:3},{value:"Moors Law",id:"moors-law",level:3},{value:"Multi-core, hyper-threaded processors",id:"multi-core-hyper-threaded-processors",level:3},{value:"Micro Kernels",id:"micro-kernels",level:3},{value:"Introduction to processes",id:"introduction-to-processes",level:2},{value:"Context Switching",id:"context-switching",level:3},{value:"Multi-Programming",id:"multi-programming",level:4},{value:"Process",id:"process",level:4},{value:"Process implementation",id:"process-implementation",level:3},{value:"States and Transitions",id:"states-and-transitions",level:3},{value:"System Calls",id:"system-calls",level:3},{value:"Process Scheduling",id:"process-scheduling",level:2},{value:"Time Horizon",id:"time-horizon",level:3},{value:"Process Schedulers",id:"process-schedulers",level:3},{value:"Performance Assessment",id:"performance-assessment",level:3},{value:"Scheduling Algorithms",id:"scheduling-algorithms",level:3},{value:"Threads",id:"threads",level:2},{value:"Reason to use threads",id:"reason-to-use-threads",level:3},{value:"User Threads",id:"user-threads",level:3},{value:"Kernel Threads",id:"kernel-threads",level:3},{value:"Performance",id:"performance",level:3},{value:"Hybrid Implementations",id:"hybrid-implementations",level:3},{value:"Thread Management",id:"thread-management",level:3},{value:"Process Scheduling",id:"process-scheduling-1",level:2},{value:"Completely fair scheduler",id:"completely-fair-scheduler",level:3},{value:"Equal priority",id:"equal-priority",level:4},{value:"Different priority",id:"different-priority",level:4},{value:"Multi-processor scheduling",id:"multi-processor-scheduling",level:3},{value:"Concurrency",id:"concurrency",level:2}],m={toc:u};function p(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"25-revision"},"25. Revision"),(0,n.kt)("h2",{id:"computer-design"},"Computer Design"),(0,n.kt)("h3",{id:"registers"},"Registers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Data Registers")," - Any sort of data for special functions. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Program Counter-")," Holds the next instruction."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Program status word"),"  - admin, stores the mode bit. Which mode the CPU is in, kernel mode or user mode."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"User Mode")," - Direct access to a subset of instructions the CPU can carry out"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Kernel mode")," - Access to the full set of instructions. Including privileged memory locations. "),(0,n.kt)("li",{parentName:"ul"},"Normally compiler decides which mode to use")),(0,n.kt)("h3",{id:"memory-management-unit"},"Memory Management Unit"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Location of an address"),"\nDoesn't know where in memory an executable will run. Variables require memory, they need to have a memory space"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Logic Address Space")," -  Used by the processor and the compiler (starts at 0). What you use when you write code. Every process has one ","[0,MAX^64]"," "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Physical Address Space")," - Seen by the hardware/OS ","[0,MAX]"," (Determined by the amount of physical memory)\nAlso responsible for address translation ",(0,n.kt)("inlineCode",{parentName:"li"},"physical = locgical + x"))),(0,n.kt)("h3",{id:"moors-law"},"Moors Law"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},"Moore's law")," - The number of transistors on an integrated circuit doubles roughly every two years. ")),(0,n.kt)("p",null,"Closely linked but necessarily related to performance.\nStill continuing but the power wall slows performance improvements of single core\nCan extract parallelism automatically, can implement it at the lowest level"),(0,n.kt)("h3",{id:"multi-core-hyper-threaded-processors"},"Multi-core, hyper-threaded processors"),(0,n.kt)("p",null,"Evolution in hardware has implications on OS design\nThe process scheduling needs to account for load balancing and CPU affinity. Need to decide ",(0,n.kt)("strong",{parentName:"p"},"when")," and ",(0,n.kt)("strong",{parentName:"p"},"where")," it is going to run"),(0,n.kt)("h3",{id:"micro-kernels"},"Micro Kernels"),(0,n.kt)("p",null,"All non-essential functionality is extracted from the kernel. These are easier to extend, more portable and more reliable.\nFrequent system calls cause mode switches/overhead"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Monolithic Systems")," - All procedures into one single executable running in kernel mode. However, they are difficult to maintain. Current versions of Windows, and Linux are implemented as this."),(0,n.kt)("h2",{id:"introduction-to-processes"},"Introduction to processes"),(0,n.kt)("p",null,"Running instance of a program. This has 'control structures' - they store all the necessary information related to the management of the process"),(0,n.kt)("h3",{id:"context-switching"},"Context Switching"),(0,n.kt)("p",null,"Process control box contains:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Process identification")," (PID, UID, Parent PID)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Process control information")," (process state, scheduling information)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Process state information")," (user registers, program counter, stack pointer, program status word, memory management information, files)\nThe ",(0,n.kt)("strong",{parentName:"li"},"process control block")," is ",(0,n.kt)("strong",{parentName:"li"},"necessary")," for ",(0,n.kt)("strong",{parentName:"li"},"context switching")," in ",(0,n.kt)("strong",{parentName:"li"},"multi-programmed systems"),"\nProcess control blocks are kernel data structures, which are stored in the ",(0,n.kt)("strong",{parentName:"li"},"process table")," and are accessible in the ",(0,n.kt)("strong",{parentName:"li"},"kernel mode")," only (system calls), otherwise this would compromise their integrity.")),(0,n.kt)("h4",{id:"multi-programming"},"Multi-Programming"),(0,n.kt)("p",null,"Achieved by alternating processes and context switching"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Single processor systems results in concurrent execution"),(0,n.kt)("li",{parentName:"ul"},"True parallelism requires multiple processors")),(0,n.kt)("p",null,"Slow time slices - good response times, low utilisation\nLong time slices - poor response times, better utilisation"),(0,n.kt)("h4",{id:"process"},"Process"),(0,n.kt)("p",null,"Memory image contains: the program (shared) code, data segment (stack/heap)\nEvery process has own logical address space\nSome OS address space layout are randomised "),(0,n.kt)("h3",{id:"process-implementation"},"Process implementation"),(0,n.kt)("p",null,'Information about the status of "resources" is maintained in tables. These are in kernel space and cross referenced'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Process tables")," - process control blocks"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Memory tables")," - memory allocation, protection, virtual memory "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"I/O tables")," - Availability, status, transfer information"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"File tables")," - Location, status")),(0,n.kt)("h3",{id:"states-and-transitions"},"States and Transitions"),(0,n.kt)("p",null,(0,n.kt)("img",{src:r(4780).Z,width:"929",height:"454"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"New")," process has just been created and is waiting to be admitted"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Ready")," process is waiting for the CPU to become available"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Running")," process 'owns' the CPU"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Blocked")," process cannot continue (waiting for IO)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Terminated")," process is no longer executable"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Suspended")," process is swapped out")),(0,n.kt)("h3",{id:"system-calls"},"System Calls"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'True system calls are "wrapped" in the OS libraries following a well defined interface'),(0,n.kt)("li",{parentName:"ul"},"These are necessary to notify the OS that the process has terminated"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"fork()")," - creates an exact copy of the current process")),(0,n.kt)("h2",{id:"process-scheduling"},"Process Scheduling"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"New -> ready: when to admit processes to the system"),(0,n.kt)("li",{parentName:"ul"},"Ready -> running: decide which process to run next"),(0,n.kt)("li",{parentName:"ul"},"Running -> ready: when to interrupt process"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Scheduler")," - decides which process to run next"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Type of operating system")," - determines which algorithms are appropriate")),(0,n.kt)("h3",{id:"time-horizon"},"Time Horizon"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Long term")," - admits new processes and controls the degree of multi programming. Good mix of CPU and IO bound processes. Usually absent in popular modern "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Medium term")," - controls swapping. Looks to see how busy the system currently is. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Short term")," - which process to run next. Manages the ready queue, runs frequently (must be fast). Called following clock interrupts or blocking system calls.")),(0,n.kt)("h3",{id:"process-schedulers"},"Process Schedulers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Non-Preemptive")," - Processes are interrupted voluntarily"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Preemptive")," - Processes are interrupted forcefully or voluntarily. Requires context switches. Prevents process from monopolising the CPU. Most popular OS are preemptive")),(0,n.kt)("h3",{id:"performance-assessment"},"Performance Assessment"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"User Oriented Criteria",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Response time"),": time between creating the job and its first execution"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Turnaround time"),": time between creating the job and finishing it"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Predictability"),": variance in processing times"))),(0,n.kt)("li",{parentName:"ul"},"System oriented criteria:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Throughput: number of jobs processed per hour"),(0,n.kt)("li",{parentName:"ul"},"Fairness: Equally distributed processing.")))),(0,n.kt)("h3",{id:"scheduling-algorithms"},"Scheduling Algorithms"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Algorithm"),(0,n.kt)("th",{parentName:"tr",align:null},"Concept"),(0,n.kt)("th",{parentName:"tr",align:null},"Advantage"),(0,n.kt)("th",{parentName:"tr",align:null},"Disadvantage"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"First Come First Served/First in First out"),(0,n.kt)("td",{parentName:"tr",align:null},"Non-preemptive algorithm that operates as a strict queuing mechanism."),(0,n.kt)("td",{parentName:"tr",align:null},"Positional fairness an easy to implement"),(0,n.kt)("td",{parentName:"tr",align:null},"Favours long processes over short ones. Could compromise resource utilisation.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Shortest Job First"),(0,n.kt)("td",{parentName:"tr",align:null},"A non-preemptive algorithm that starts processes in order of ascending processing time"),(0,n.kt)("td",{parentName:"tr",align:null},"Always result in the optimal turnaround time"),(0,n.kt)("td",{parentName:"tr",align:null},"Starvation might occur. Fairness and predictability are compromised. Processing times have to be known beforehand")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Round Robin"),(0,n.kt)("td",{parentName:"tr",align:null},"A preemptive version of FCFS. Processes run in the order they were added but they only get a max amount of time at once. Forces context switches at periodic intervals"),(0,n.kt)("td",{parentName:"tr",align:null},"Improved response time. Effective for general purpose interactive/time sharing systems"),(0,n.kt)("td",{parentName:"tr",align:null},"Increased context switching and overhead. Favours CPU bound processes over IO. Can reduce to FCFS.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Priority Queue"),(0,n.kt)("td",{parentName:"tr",align:null},"A preemptive algorithm that schedules processes by priority. Round robin is used within the same priority levels. Saved by the process control block"),(0,n.kt)("td",{parentName:"tr",align:null},"Can priorities IO bound jobs"),(0,n.kt)("td",{parentName:"tr",align:null},"Low priority may suffer from starvation")))),(0,n.kt)("h2",{id:"threads"},"Threads"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Resources")," - All related resources are grouped together"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Execution trace")," - entity that gets executed"),(0,n.kt)("li",{parentName:"ul"},"A process can share its resources between multiple execution traces/threads")),(0,n.kt)("p",null,"Every thread has its own execution context & thread control block, however they all have access to the processes shared resources.\nExecution of a process has states (new, running, blocked, read, terminated)"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Shared Resources (Processes)"),(0,n.kt)("th",{parentName:"tr",align:null},"Private Resources (Threads)"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Address space"),(0,n.kt)("td",{parentName:"tr",align:null},"Program Counter")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Global variables"),(0,n.kt)("td",{parentName:"tr",align:null},"Registers")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Open files"),(0,n.kt)("td",{parentName:"tr",align:null},"Stack")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Child processes"),(0,n.kt)("td",{parentName:"tr",align:null},"State")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Pending alarms"),(0,n.kt)("td",{parentName:"tr",align:null},"Local vars")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Signals and signal handling"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Accounting information"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("p",null,"Threads incur less overhead to create/terminate/switch\nHyper threaded cores have hardware support for multi-threading"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Inter-thread communication"),": Easier/faster than ",(0,n.kt)("strong",{parentName:"li"},"interprocess")," communication (memory is shared)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"No protection boundaries"),": Required in the address space (threads are cooperating, belong to the same user, and have a common goal)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Synchronisation"),": Has to be considered carefully")),(0,n.kt)("h3",{id:"reason-to-use-threads"},"Reason to use threads"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Processes will often contain multiple blocking tasks (IO operations & memory access page faults)"),(0,n.kt)("li",{parentName:"ul"},"Some activities should be carried out in parallel/concurrently such as webservers, msoffice etc")),(0,n.kt)("h3",{id:"user-threads"},"User Threads"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Many-to-One")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Thread management is executed in user space with the help of a user library"),(0,n.kt)("li",{parentName:"ul"},"Process maintains a thread table, managed by the runtime system without the kernels knowledge."),(0,n.kt)("li",{parentName:"ul"},"Kernel can see 1 process, but user space can see multiple"),(0,n.kt)("li",{parentName:"ul"},"Advantages - Full control over the thread scheduler, OS independent and in user space"),(0,n.kt)("li",{parentName:"ul"},"Disadvantages - Blocking system calls suspend the entire process (can be cause by page faults), no true parallelism, clock interrupts don't exist.")),(0,n.kt)("h3",{id:"kernel-threads"},"Kernel Threads"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"One-to-One")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Kernel manages threads, user access them through system calls. Thread table is maintained by the kernel. If a thread blocks, the kernel chooses thread"),(0,n.kt)("li",{parentName:"ul"},"Advantages - True parallelism, no run-time needed"),(0,n.kt)("li",{parentName:"ul"},"Frequent mode switches take place (performance)")),(0,n.kt)("h3",{id:"performance"},"Performance"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Null fork")," - the overhead is creating, scheduling, running and terminating a null process/thread"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Signal wait")," - overhead is synchronising threads")),(0,n.kt)("h3",{id:"hybrid-implementations"},"Hybrid Implementations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"User threads are multiplexed onto kernel threads"),(0,n.kt)("li",{parentName:"ul"},"Kernel sees and schedules the kernel threads"),(0,n.kt)("li",{parentName:"ul"},"User applications sees user threads and creates/schedules these")),(0,n.kt)("h3",{id:"thread-management"},"Thread Management"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Libraries are either user space or based on system calls")),(0,n.kt)("h2",{id:"process-scheduling-1"},"Process Scheduling"),(0,n.kt)("p",null,"Characteristics of feedback queues include; number of queues, scheduling algorithms, migration policy and initial access. These queues are highly configurable."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Real time")," - processes/threads have a fixed priority level"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Variable")," - processes/threads can have their priorities boosted temporarily\nPriorities are based on the process base priority(0-15) and thread base priority (+-2 relative to the process priority)\nThreads priority dynamically changes during execution. (between base and max priority)")),(0,n.kt)("h3",{id:"completely-fair-scheduler"},"Completely fair scheduler"),(0,n.kt)("p",null,"Linux has Real time tasks, FIFO and Round Robin, and Time sharing tasks using a preemptive approach.\nReal time FIFO takes highest priority, and preemption if a higher priority shows up\nReal time round robin tasks are preemptable by clock interrupts and have a time slice associated with them. "),(0,n.kt)("h4",{id:"equal-priority"},"Equal priority"),(0,n.kt)("p",null,"CFS divides the CPU time between all processes/threads. If all ",(0,n.kt)("em",{parentName:"p"},"N")," have same priority, they will be allocated a time slice. The length of the time slice are based on the targeted latency. If ",(0,n.kt)("em",{parentName:"p"},"N")," is very large, the context switch time will be dominant, and a lower bound on the time slice."),(0,n.kt)("h4",{id:"different-priority"},"Different priority"),(0,n.kt)("p",null,"A weighing scheme is used to take different priorities into account. If different priority,  then every ",(0,n.kt)("em",{parentName:"p"},"i")," is allocated a weight ",(0,n.kt)("em",{parentName:"p"},"w")," that reflects its priority. The tasks with the lowest proportional amount of used CPU time are selected first"),(0,n.kt)("h3",{id:"multi-processor-scheduling"},"Multi-processor scheduling"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Single Processor")," machine - Which process(thread) to run next"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Shared Queues")," - Single or multi-level shared between all CPUs. + Automatic load balancing. - Contention for the queues (locking if needed), does not account for processor affinity"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Private Queues")," - Each CPU has a private set of queues. + CPU affinity is automatically satisfied, contention for shared queues minimised. - Less load balancing, push and pull migration between CPUs is required"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Related Threads")," - Multiple threads that communicate with one another and ideally run together (search algorithm)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Unrelated Threads")," - Processes threads that are independent, possibly started by different users running different programs"),(0,n.kt)("li",{parentName:"ul"},"Working together - Aim is to get threads running, as much as possible, at same time across multiple CPUs"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Space Scheduling")," - Number ",(0,n.kt)("em",{parentName:"li"},"N")," can be dynamically adjusted to match processor capacity"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Gang Scheduling")," - Time slices are synchronised and the scheduler groups threads together to run simultaneously. Preemptive algorithm, blocking threads result in idle CPUs")),(0,n.kt)("h2",{id:"concurrency"},"Concurrency"))}p.isMDXComponent=!0},4780:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/20221007111037-7da3e50e02a7213e1f6b3b47a20902e1.png"}}]);