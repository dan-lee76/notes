"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3571],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>d});var r=t(7294);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,r,s=function(n,e){if(null==n)return{};var t,r,s={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var o=r.createContext({}),l=function(n){var e=r.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},m=function(n){var e=l(n.components);return r.createElement(o.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,s=n.mdxType,i=n.originalType,o=n.parentName,m=p(n,["components","mdxType","originalType","parentName"]),u=l(t),d=s,y=u["".concat(o,".").concat(d)]||u[d]||c[d]||i;return t?r.createElement(y,a(a({ref:e},m),{},{components:t})):r.createElement(y,a({ref:e},m))}));function d(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var i=t.length,a=new Array(i);a[0]=u;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=n,p.mdxType="string"==typeof n?n:s,a[1]=p;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8078:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var r=t(7462),s=(t(7294),t(3905));const i={},a="16. Permutation",p={unversionedId:"Year2/2009/IFR/16",id:"Year2/2009/IFR/16",title:"16. Permutation",description:"02/12/22",source:"@site/docs/Year2/2009/IFR/16.md",sourceDirName:"Year2/2009/IFR",slug:"/Year2/2009/IFR/16",permalink:"/Year2/2009/IFR/16",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"15. Collatz & Sorting",permalink:"/Year2/2009/IFR/15"},next:{title:"18. Compiler Correctness",permalink:"/Year2/2009/IFR/18"}},o={},l=[],m={toc:l};function c(n){let{components:e,...t}=n;return(0,s.kt)("wrapper",(0,r.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"16-permutation"},"16. Permutation"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"02/12/22")),(0,s.kt)("p",null,"Permutation - If the output contains the same element in a different order\n",(0,s.kt)("inlineCode",{parentName:"p"},"Perm [1,2,3] [1,3,2]")," is true\n",(0,s.kt)("inlineCode",{parentName:"p"},"Perm [1,2] [1]")," is false\n",(0,s.kt)("inlineCode",{parentName:"p"},"Perm [1,1] [1]")," is false"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lean"},"/- Lecture 17, IFR (COMP2009,2022-23) -/\nset_option pp.structure_projections false\n\nopen nat\nopen list\n\n-- ble and \u2264\n\ndef ble : \u2115 \u2192 \u2115 \u2192 bool \n| 0 n := tt\n| (succ m) 0 := ff\n| (succ m) (succ n) := ble m n\n\n#reduce (ble 4 7)\n\n-- ins-sort\n\ndef ins : \u2115 \u2192 list \u2115 \u2192 list \u2115 \n| a [] := [a]\n| a (b :: bs) := if ble a b then a :: b :: bs else b::(ins a bs)\n\n#reduce ins 6 [2, 3, 3, 8]\n\ndef sort : list \u2115 \u2192 list \u2115  \n| [] := []\n| (a :: as) := ins a (sort as)\n\n#reduce (sort [6,3,8,2,3])\n\n/-\ntheorem sort_sorts : \u2200 ns : list \u2115,\n  Sorted (sort ns) \n-/\n\nvariable {A : Type}\n\ninductive Insert : A \u2192 list A \u2192 list A \u2192 Prop\n| ins_hd : \u2200 m : A, \u2200 ms : list A, \n      Insert m ms (m :: ms)\n| ins_tl :  \u2200 m n : A, \u2200 ms ns : list A,\n      Insert n ms ns \n      \u2192 Insert n (m :: ms) (m :: ns)\n\nopen Insert\n\ninductive Perm : list A \u2192 list A \u2192 Prop\n| perm_nil : Perm [] []\n| perm_cons : \u2200 ms ns ns' : list A, \u2200 m : A,\n            Perm ms ns \n            \u2192 Insert m ns ns' \n            \u2192 Perm (m :: ms) ns' \n\nopen Perm\n\nexample : Perm [1,2,3] [3,2,1] :=\nbegin\n  apply perm_cons,\n  apply perm_cons,\n  apply perm_cons,\n  apply perm_nil,\n  apply ins_hd,\n  apply ins_tl,\n  apply ins_hd,\n  apply ins_tl,\n  apply ins_tl,\n  apply ins_hd,\nend\n\ntheorem refl_perm : \u2200 as : list A,\n  Perm as as :=\nbegin\n  assume as,\n  induction as with a as' ih,\n  apply perm_nil,\n  apply perm_cons,\n  apply ih,\n  apply ins_hd,\nend\n\nexample : \u2200 as bs : list A,\n  Perm as bs \u2192 Perm bs as :=\nsorry\n\nexample : \u2200 as bs cs : list A,\n  Perm as bs \u2192 Perm bs cs \u2192 Perm as cs :=\nsorry\n\n-- Perm is an equivalence relation\n-- if equality of A is decidable\n-- then Perm {A} is decidable.\n\ndef is_perm : list \u2115 \u2192 list \u2115 \u2192 bool\n:= sorry\n\ntheorem is_perm_ok : \u2200 ms ns : list \u2115,\n  Perm ms ns \u2194 is_perm ms ns = tt :=\nsorry\n\nlemma ins_perm : \u2200 n :\u2115, \u2200 ns : list \u2115,\n  Insert n ns (ins n ns) :=\nbegin\n  assume n ns,\n  induction ns with n' ns' ih,\n  dsimp [ins],\n  apply ins_hd,\n  dsimp [ins],\n  cases (ble n n'),\n  simp,\n  apply ins_tl,\n  apply ih,\n  simp,\n  apply ins_hd,\nend\n\ntheorem perm_sort : \u2200 ns : list \u2115,\n  Perm ns (sort ns) :=\nbegin\n  assume ns,\n  induction ns with n ns' ih,\n  apply perm_nil,\n  dsimp [sort],\n  apply perm_cons,\n  apply ih,\n  apply ins_perm,\nend\n\n\n")))}c.isMDXComponent=!0}}]);