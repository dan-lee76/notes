"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[6845],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),l=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=l(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=l(a),u=r,k=d["".concat(o,".").concat(u)]||d[u]||c[u]||i;return a?n.createElement(k,s(s({ref:t},m),{},{components:a})):n.createElement(k,s({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,s[1]=p;for(var l=2;l<i;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4309:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={},s="01. Pointers & Data Types",p={unversionedId:"Year2/2006/01",id:"Year2/2006/01",title:"01. Pointers & Data Types",description:"02/02/23",source:"@site/docs/Year2/2006/01.md",sourceDirName:"Year2/2006",slug:"/Year2/2006/01",permalink:"/Year2/2006/01",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"0.  Introduction",permalink:"/Year2/2006/00"},next:{title:"0. Introduction to Operating systems and Concurrency",permalink:"/Year2/2007/00"}},o={},l=[{value:"Data Types",id:"data-types",level:2},{value:"Size of types",id:"size-of-types",level:3},{value:"Pointers",id:"pointers",level:2},{value:"Dereferencing operator <code>*</code>",id:"dereferencing-operator-",level:3},{value:"Uninitialised Pointers",id:"uninitialised-pointers",level:3},{value:"Passing pointers as parameters",id:"passing-pointers-as-parameters",level:2}],m={toc:l};function c(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"01-pointers--data-types"},"01. Pointers & Data Types"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"02/02/23")),(0,r.kt)("h2",{id:"data-types"},"Data Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bool")," - ",(0,r.kt)("inlineCode",{parentName:"p"},"true/false"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"bool")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," can be converted implicitly/automatically. non-zero is defined to be ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Can use this inside a while loop;"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'int x = 6;\nwhile(x)\n{\n    printf("X is %d\\n",x);\n    x-=2;\n}\n')),(0,r.kt)("h3",{id:"size-of-types"},"Size of types"),(0,r.kt)("p",null,"Size of types can vary based on compilers/operating system. Some guarantees are given:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Minimum size (bits) - ",(0,r.kt)("inlineCode",{parentName:"li"},"char")," 8, ",(0,r.kt)("inlineCode",{parentName:"li"},"short")," 16, ",(0,r.kt)("inlineCode",{parentName:"li"},"long")," 32."),(0,r.kt)("li",{parentName:"ul"},"Relative sizes - ",(0,r.kt)("inlineCode",{parentName:"li"},"char")," ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow"},"\u2264")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\le")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2264")))))," ",(0,r.kt)("inlineCode",{parentName:"li"},"short")," ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow"},"\u2264")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\le")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2264")))))," ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow"},"\u2264")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\le")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2264")))))," ",(0,r.kt)("inlineCode",{parentName:"li"},"long"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")," - type is used to mean no return value, no parameters, optional. Cannot create a variable of type ",(0,r.kt)("inlineCode",{parentName:"p"},"void"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"const")," - means constant/unchangeable. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"const char *")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"char*"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"auto")," - Allows you to be lazy, don't bother about type. Can only be used for initialised variables."),(0,r.kt)("h2",{id:"pointers"},"Pointers"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"&")," - Ask for the address of a variable\n",(0,r.kt)("inlineCode",{parentName:"p"},"sizeof()")," - Size in chars - compile time\n",(0,r.kt)("inlineCode",{parentName:"p"},"*")," - Used to denote a pointer. The value of the pointer is an address in memory. The type of a pointer says what type of data the program should expect to find at the address"),(0,r.kt)("p",null,"Can think of pointers whichever what is easier for you"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"As an address in memory and a type/format"),(0,r.kt)("li",{parentName:"ol"},"As a way of pointing to some other data, and a record of what type of data you think the thing pointed as is")),(0,r.kt)("h3",{id:"dereferencing-operator-"},"Dereferencing operator ",(0,r.kt)("inlineCode",{parentName:"h3"},"*")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," operator is used to access the ",(0,r.kt)("em",{parentName:"p"},"thing")," that a pointer points at."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"char c1 = 'h';\nchar* pc = &c1; //pc is a pointer to c1\nchar c3 = *pc; // *pc is thing pointed at\n")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(1644).Z,width:"767",height:"504"})),(0,r.kt)("h3",{id:"uninitialised-pointers"},"Uninitialised Pointers"),(0,r.kt)("p",null,"Variables are NOT initialised unless you give them an initial value. Value of one is undefined."),(0,r.kt)("h2",{id:"passing-pointers-as-parameters"},"Passing pointers as parameters"),(0,r.kt)("p",null,"Each parameter has a single type, so may be one ",(0,r.kt)("em",{parentName:"p"},"thing"),". A copy of this is stored in memory for the parameter. To alter something that is external to a function from within a function, need to refer to the thing itself, not a copy of it.\n",(0,r.kt)("img",{src:a(365).Z,width:"683",height:"234"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'void AlterCopy( int icopy )  \n{  \n    icopy = 2;  \n}  \nvoid AlterValue( int* picopy )  \n{  \n    *picopy = 3;  \n}  \nint main( int argc, char* argv[] )  \n{  \n    int i = 1;  \n    printf( "Initial value of i is %d\\n", i );  \n    AlterCopy( i );  \n    printf( "After AlterCopy, value of i is %d\\n", i );  \n    AlterValue( &i );  \n    printf( "After AlterValue, value of i is %d\\n", i );  \n    return 0;\n}\n')))}c.isMDXComponent=!0},1644:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20230202093326-51f72c6b8bf69442e98e7323bfc09cef.png"},365:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20230202095449-38e8e3ebbeacf8bc750ca8414022e147.png"}}]);