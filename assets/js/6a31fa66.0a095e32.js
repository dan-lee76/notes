"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[9606],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8032:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},o="18. Revision",l={unversionedId:"Year2/2013/18",id:"Year2/2013/18",title:"18. Revision",description:"Introduction",source:"@site/docs/Year2/2013/18.md",sourceDirName:"Year2/2013",slug:"/Year2/2013/18",permalink:"/Year2/2013/18",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"17. Open Source Software",permalink:"/Year2/2013/17"},next:{title:"Year in Industry",permalink:"/Year2/Misc/Industry"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Basic Concepts",id:"basic-concepts",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"18-revision"},"18. Revision"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Core attributes of maintainable software "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Readable code"),(0,r.kt)("li",{parentName:"ul"},"Strong documentation"),(0,r.kt)("li",{parentName:"ul"},"Consistent variable/functions conventions"),(0,r.kt)("li",{parentName:"ul"},"Standard code layout"),(0,r.kt)("li",{parentName:"ul"},"Testability")),(0,r.kt)("p",null,"Main principles for developing software"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Maintainability benefits most from adhearing to simple guidelines"),(0,r.kt)("li",{parentName:"ul"},"Maintainability is not an afterthought should be addressed from the very beginning of a development project"),(0,r.kt)("li",{parentName:"ul"},"Some violation are worse than others; the more a software system compiles with the guidelines for more maintainable it is")),(0,r.kt)("p",null,"Software maintenance involves - The process for managing and executing software maintenance activities is described. Also need to consider how we can reduce the effort of maintenance"),(0,r.kt)("p",null,"Main Categories"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Corrective maintenance")," - Finding and fixing errors in the system"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Adaptive Maintenance")," - The system has to be adapted to change in the environment in which it operates"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Perfective + Preventive Maintenance")," - Users of the system have new or changed requirements. Ways identified to increase the quality or prevent future bugs.")),(0,r.kt)("h2",{id:"basic-concepts"},"Basic Concepts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Abstraction")," - Simple things like objects represent more complex underlying code and data"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Encapsulation")," - Ability to protect some components of the object from external access. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Making public variables private"),(0,r.kt)("li",{parentName:"ul"},"Hiding the implementation details of a class"),(0,r.kt)("li",{parentName:"ul"},"Helps with program maintenance (doesn't affect other classes)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inheritance")," - Ability for a class to extend or override functionality of another class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Polymorphism")," - The provision of a single interface to entities of different types. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Compile time - Method overloading"),(0,r.kt)("li",{parentName:"ul"},"Run time - Method overriding"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"this")," - Refers to the implicit parameter inside the class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Constructors")," - Invoked using the ",(0,r.kt)("inlineCode",{parentName:"li"},"new")," operator"),(0,r.kt)("li",{parentName:"ul"},"Passing Data - Can either pass by value or pass by reference"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Overloaded Methods")," - Methods of the same class that have the same name but different numbers/types. Compiler will treat them as completely different methods"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Static Field")," - Shared by all objects of the class. Normally stored with the class code. Not initialised in constructors."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Non-Static Field")," - Belongs to an individual object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Static Methods")," - Access and manipulate class statics fields. Belongs to the class, not an instance of it. Cannot access instance fields or call methods of the class."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Instance Methods")," - Can access all fields and call all methods of their class (Static and non-static).")))}u.isMDXComponent=!0}}]);