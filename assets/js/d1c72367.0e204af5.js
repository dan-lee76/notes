"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8813],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=m(a),u=i,k=d["".concat(o,".").concat(u)]||d[u]||p[u]||l;return a?n.createElement(k,r(r({ref:t},c),{},{components:a})):n.createElement(k,r({ref:t},c))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var m=2;m<l;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1954:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var n=a(7462),i=(a(7294),a(3905));const l={},r="20. File System Implementations",s={unversionedId:"Year2/2007/20",id:"Year2/2007/20",title:"20. File System Implementations",description:"28/11/22",source:"@site/docs/Year2/2007/20.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/20",permalink:"/Year2/2007/20",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"19.  User & Implementation view of file systems",permalink:"/Year2/2007/19"},next:{title:"21.",permalink:"/Year2/2007/21"}},o={},m=[{value:"Contiguous Allocation",id:"contiguous-allocation",level:2},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3},{value:"Linked Lists",id:"linked-lists",level:2},{value:"Advantages",id:"advantages-1",level:3},{value:"Disadvantages",id:"disadvantages-1",level:3},{value:"File Allocation Table (FAT)",id:"file-allocation-table-fat",level:2},{value:"Advantages",id:"advantages-2",level:3},{value:"Disadvantages",id:"disadvantages-2",level:3},{value:"I-nodes (lookups)",id:"i-nodes-lookups",level:2},{value:"Directories",id:"directories",level:3},{value:"Lookups",id:"lookups",level:3},{value:"Comparison",id:"comparison",level:2}],c={toc:m};function p(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"20-file-system-implementations"},"20. File System Implementations"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"28/11/22")),(0,i.kt)("h2",{id:"contiguous-allocation"},"Contiguous Allocation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Contiguous file systems are similar to dynamic partitioning memory allocation: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Each file is stored in a single group of adjacent blocks on the hard disk"))),(0,i.kt)("li",{parentName:"ul"},"Allocation of free space can be done using first fit, best fit, next fit etc\n",(0,i.kt)("img",{src:a(6786).Z,width:"801",height:"204"}))),(0,i.kt)("h3",{id:"advantages"},"Advantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Simple to implement: only location of first block and the length of the file must be stored"),(0,i.kt)("li",{parentName:"ul"},"Optimal read/write performance: blocks are co-located/clustered in nearby/adjacent sectors, hence the seek time is minimised")),(0,i.kt)("h3",{id:"disadvantages"},"Disadvantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Exact size of a file (process) is not always known beforehand: what if the file size exceeds the initially allocated disk space"),(0,i.kt)("li",{parentName:"ul"},"Allocation algorithms needed to decide which free blocks to allocate to a given file"),(0,i.kt)("li",{parentName:"ul"},"Deleting a file results in external fragmentation: de-fragmentation must be carried out regularly")),(0,i.kt)("h2",{id:"linked-lists"},"Linked Lists"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To avoid external fragmentation, files are stored in separate blocks that are linked to one another"),(0,i.kt)("li",{parentName:"ul"},"Only the address of the first block has to be stored to locate a file"),(0,i.kt)("li",{parentName:"ul"},"Each block contains a data pointer to the next block (takes up space)")),(0,i.kt)("h3",{id:"advantages-1"},"Advantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Easy to maintain: only the first block (address) has to be maintained in the directory entry"),(0,i.kt)("li",{parentName:"ul"},"File sizes can grow dynamically (file size does not have to be known beforehand): new blocks/sectors can be added to the end of the file"),(0,i.kt)("li",{parentName:"ul"},"Similar to paging for memory, every possible block/sector of disk space can be used (no external fragmentation)"),(0,i.kt)("li",{parentName:"ul"},"Sequential access is straightforward, although more seek operations/disk access may be required")),(0,i.kt)("h3",{id:"disadvantages-1"},"Disadvantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Random access is very slow, to retrieve a block in the middle, one has to walk through the list from the start"),(0,i.kt)("li",{parentName:"ul"},"There is some internal fragmentation on average the last half of the last block is left unused",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Internal fragmentation will reduce for smaller block sizes"))),(0,i.kt)("li",{parentName:"ul"},"May result in random disk access, which is very slow",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Larger blocks(containing multiple sectors) will be faster"))),(0,i.kt)("li",{parentName:"ul"},"Space is lost within the blocks due to the pointer, the data in a block is no longer a power of 2!"),(0,i.kt)("li",{parentName:"ul"},"Diminished reliability: if one block is corrupt/lost, access to the rest of the file is lost"),(0,i.kt)("li",{parentName:"ul"},"To prevent against this we can use FAT")),(0,i.kt)("h2",{id:"file-allocation-table-fat"},"File Allocation Table (FAT)"),(0,i.kt)("p",null,"Store the linked-list pointer in a separate index table, called a File Allocation Table in memory.\n",(0,i.kt)("img",{src:a(9381).Z,width:"812",height:"395"})),(0,i.kt)("h3",{id:"advantages-2"},"Advantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Block size remains power of 2. No space is lost due to the pointer"),(0,i.kt)("li",{parentName:"ul"},"Index table can be kept in memory allowing fast non-sequential random access.")),(0,i.kt)("h3",{id:"disadvantages-2"},"Disadvantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Size of the file allocation table grows with the number of blocks, and hence the size of the disk")),(0,i.kt)("h2",{id:"i-nodes-lookups"},"I-nodes (lookups)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each file has a small data structure called I-node (index-node) that contains its attributes and block pointers.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"I-node is only loaded when the file is open"),(0,i.kt)("li",{parentName:"ul"},"If every I-node consists of n bytes, and at most k files can be open at any point in time, at most ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"n"),(0,i.kt)("mo",{parentName:"mrow"},"\xd7"),(0,i.kt)("mi",{parentName:"mrow"},"k")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n\\times k")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k")))))," bytes of main memory are required"))),(0,i.kt)("li",{parentName:"ul"},"I-nodes are composed of direct block pointers (usually 10), indirect block pointers, or a combination thereof\n",(0,i.kt)("img",{src:a(9538).Z,width:"805",height:"480"}))),(0,i.kt)("h3",{id:"directories"},"Directories"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In UNIX, all information about the file (type, size, date, owner and block pointers) is stored in its i-node."),(0,i.kt)("li",{parentName:"ul"},"Therefore, directory tables are very simple data structures composed of file name and a pointer to the i-node."),(0,i.kt)("li",{parentName:"ul"},"Note that directories are no more than a special kind of file, so they have their own i-node.")),(0,i.kt)("h3",{id:"lookups"},"Lookups"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Opening a file requires the disk blocks to be located",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Absolute file names")," are located relative to the root directory"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Relative file names")," are located based on the current working directory")))),(0,i.kt)("h2",{id:"comparison"},"Comparison"),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(8873).Z,width:"805",height:"480"})))}p.isMDXComponent=!0},6786:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221128131123-d89b9eafdee9c111f31db3f2fd2188ac.png"},9381:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221128132414-22ff6ba2e646d070b87b13f36c21ac06.png"},9538:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221128132757-a21ffab2bf29e91d9fd3884975900c0f.png"},8873:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221128133322-6ca79272d02d1e02ca96e77fd212d2bd.png"}}]);