"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[247],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),h=r,f=m["".concat(l,".").concat(h)]||m[h]||p[h]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4978:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={},l=void 0,c={unversionedId:"Year1/Programming Paradigms/Java/22.03.31 - Design Patterns",id:"Year1/Programming Paradigms/Java/22.03.31 - Design Patterns",title:"22.03.31 - Design Patterns",description:"Patterns",source:"@site/docs/Year1/1009 - Programming Paradigms/Java/22.03.31 - Design Patterns.md",sourceDirName:"Year1/1009 - Programming Paradigms/Java",slug:"/Year1/Programming Paradigms/Java/22.03.31 - Design Patterns",permalink:"/docs/Year1/Programming Paradigms/Java/22.03.31 - Design Patterns",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Alternatives to Inner Classes",permalink:"/docs/Year1/Programming Paradigms/Java/22.03.25 - Anonymous Classes"},next:{title:"Intro to OOP",permalink:"/docs/Year1/Programming Paradigms/Java/Revision"}},u={},p=[{value:"Patterns",id:"patterns",level:2},{value:"Responsibilities and good design",id:"responsibilities-and-good-design",level:2},{value:"Creational",id:"creational",level:2},{value:"Singleton",id:"singleton",level:2}],m={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"patterns"},"Patterns"),(0,o.kt)("p",null,"Patterns help us to identify ways which a problem can be solved. Identify the pattern for the problem, then look at how people have solved this in the past"),(0,o.kt)("h2",{id:"responsibilities-and-good-design"},"Responsibilities and good design"),(0,o.kt)("p",null,"If a class has multiple types of responsibilities, usually better to split it into multiple classes. Can 'switch out' combinations of implementations of these responsibilities\nHave strategy pattern, observer pattern, iterator pattern"),(0,o.kt)("h1",{id:"some-final-patterns"},"Some final patterns"),(0,o.kt)("h2",{id:"creational"},"Creational"),(0,o.kt)("p",null,"Creational patterns are patterns related to creation of objects"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Singleton: only one instance of this class"),(0,o.kt)("li",{parentName:"ul"},"Factory - wrap up the creation of another object(s), particularly when you don't know what to create"),(0,o.kt)("li",{parentName:"ul"},"Both use a method to create the object, not new directly")),(0,o.kt)("h2",{id:"singleton"},"Singleton"),(0,o.kt)("p",null,"You create one instance when needed. Basic singleton in java uses a static method. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A static member is in the class not each instance, shared between all instances. One copy only per class."),(0,o.kt)("li",{parentName:"ul"},"Static members are associated with the class rather tan the object. Can share it across other objects."),(0,o.kt)("li",{parentName:"ul"},"Keep track of the one object created in a static member variable, never create an object of the class manually")),(0,o.kt)("h1",{id:"factory-pattern"},"Factory Pattern"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Factory is an object which manufactures other objects "),(0,o.kt)("li",{parentName:"ul"},"We will concentrate on simple examples, although there are more complex powerful examples of this"),(0,o.kt)("li",{parentName:"ul"},"Dont need to know which precise sub-class it will create - can let the factory decided"),(0,o.kt)("li",{parentName:"ul"},"Controlling the creation of different objects can have a number of uses")),(0,o.kt)("h1",{id:"singleton-vs-factory"},"Singleton vs Factory"),(0,o.kt)("p",null,"Both have a method for creating objects for you. Shared objects for singleton, multiple objects for the factory.\nSimple factory has a 'factory' object which is responsible for creating the objects.\nSingleton has a static member function/method"),(0,o.kt)("h1",{id:"design-patterns-summary"},"Design Patterns Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Observer"),": Tell me when something happens"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Strategy"),": Lets another object modify the behaviour of an object"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Iterator"),": Lets you iterate through the contents"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Singleton"),": Create just one instance and use it anywhere"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Simple Factory"),": Delegate the job of choosing which lass to actually create to another object")),(0,o.kt)("h1",{id:"final-summary"},"Final Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Objects"),": Collection of data, set of methods which act up on the data"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Access Permissions"),": Packages are very important because of access privileges in Java",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Public - Anything can access this"),(0,o.kt)("li",{parentName:"ul"},"Protected - This class + this package + subclasses can access this"),(0,o.kt)("li",{parentName:"ul"},"nothing(package) - This class + this package can access it"),(0,o.kt)("li",{parentName:"ul"},"Private - Only this class can access this")))))}h.isMDXComponent=!0}}]);