"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3254],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7295:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={},s="22.03.28 - Agile vs Traditional",p={unversionedId:"Year1/Software Engineer/22.03.28 - Agile vs Traditional",id:"Year1/Software Engineer/22.03.28 - Agile vs Traditional",title:"22.03.28 - Agile vs Traditional",description:"Agile vs Traditional",source:"@site/docs/Year1/1003 - Software Engineer/22.03.28 - Agile vs Traditional.md",sourceDirName:"Year1/1003 - Software Engineer",slug:"/Year1/Software Engineer/22.03.28 - Agile vs Traditional",permalink:"/Year1/Software Engineer/22.03.28 - Agile vs Traditional",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"22.03.21 - Evolution Maintenance",permalink:"/Year1/Software Engineer/22.03.21 - Evolution_Maintenance"},next:{title:"22.03.29 - Software Quality",permalink:"/Year1/Software Engineer/22.03.29 - Software Quality"}},u={},m=[{value:"Agile vs Traditional",id:"agile-vs-traditional",level:2},{value:"1990s",id:"1990s",level:3},{value:"2001",id:"2001",level:3},{value:"Agile Principles",id:"agile-principles",level:2},{value:"The 4 Core Agile Values",id:"the-4-core-agile-values",level:3},{value:"How to agile",id:"how-to-agile",level:2},{value:"Overall vs Stage Specific",id:"overall-vs-stage-specific",level:3},{value:"Scrum vs Kanban vs XP",id:"scrum-vs-kanban-vs-xp",level:3},{value:"eXtreme Programming",id:"extreme-programming",level:3},{value:"Scrum",id:"scrum",level:3},{value:"Kanban",id:"kanban",level:3},{value:"Combining agile methods",id:"combining-agile-methods",level:3},{value:"Summary",id:"summary",level:2}],c={toc:m};function d(e){var t=e.components,o=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"220328---agile-vs-traditional"},"22.03.28 - Agile vs Traditional"),(0,i.kt)("h2",{id:"agile-vs-traditional"},"Agile vs Traditional"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"f69acdea26ed6e946058f58991245dcd.png",src:a(7265).Z,width:"793",height:"357"})),(0,i.kt)("h3",{id:"1990s"},"1990s"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Rapid software development was getting more important"),(0,i.kt)("li",{parentName:"ul"},"Proposed methods integrated major stages, specification, design and implementation are inter-leaved"),(0,i.kt)("li",{parentName:"ul"},"Waterfall model and others where very heavy top down approaches. Do all planning, then work, then testing, expensive and slow."),(0,i.kt)("li",{parentName:"ul"},"Many limitations:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"depends on lots of documentation to be successful"),(0,i.kt)("li",{parentName:"ul"},"Lots of waiting time between different teams"),(0,i.kt)("li",{parentName:"ul"},"Expensive to fix buggy code")))),(0,i.kt)("h3",{id:"2001"},"2001"),(0,i.kt)("p",null,"SCRUM and TDD exits. Want to find a better way of development. Thing SE methodologies can be adaptable in order to be effective for the situation and to avoid unnecessary bureaucracy"),(0,i.kt)("h2",{id:"agile-principles"},"Agile Principles"),(0,i.kt)("p",null,"Agreed on 12 things:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Satisfy the customer through early and continuous delivery of valuable software."),(0,i.kt)("li",{parentName:"ol"},"Harness change for the customers competitive advantage. (Welcome any changes)"),(0,i.kt)("li",{parentName:"ol"},"Deliver working software frequently, with a preference to the shorter timescale"),(0,i.kt)("li",{parentName:"ol"},"Business people and developers must work together daily"),(0,i.kt)("li",{parentName:"ol"},"Give developers the environment and support they need"),(0,i.kt)("li",{parentName:"ol"},"Do face-to-face conversation"),(0,i.kt)("li",{parentName:"ol"},"Working software is the primary measure of progress"),(0,i.kt)("li",{parentName:"ol"},"Promote sustainable development"),(0,i.kt)("li",{parentName:"ol"},"Continuous attention to technical excellence"),(0,i.kt)("li",{parentName:"ol"},"Art of maximising the amount of work not done"),(0,i.kt)("li",{parentName:"ol"},"Best architectures, requirements and designs emerge from self-organising teams"),(0,i.kt)("li",{parentName:"ol"},"Team reflects on how to become more effective")),(0,i.kt)("h3",{id:"the-4-core-agile-values"},"The 4 Core Agile Values"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Individuals and interactions")," over process and tools"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Working software")," over comprehensive documentation"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Customer collaboration")," over contract negotiation"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Responding to change")," over following a plan")),(0,i.kt)("h2",{id:"how-to-agile"},"How to agile"),(0,i.kt)("h3",{id:"overall-vs-stage-specific"},"Overall vs Stage Specific"),(0,i.kt)("p",null,"Overall Approach - Spiral model is already an adaptive approach, but the agile principles apply to adapt your approach\nEach stage and activity:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"agile requirements - user stories not requirement docs"),(0,i.kt)("li",{parentName:"ul"},"agile design - prototypes not spec docs"),(0,i.kt)("li",{parentName:"ul"},"agile implementation - test driven paired development"),(0,i.kt)("li",{parentName:"ul"},"agile testing")),(0,i.kt)("h3",{id:"scrum-vs-kanban-vs-xp"},"Scrum vs Kanban vs XP"),(0,i.kt)("p",null,"All three are designed to uphold the agile principles\nScrum - About optimising by time and delivery\nKanban - speed of feature delivery\nXP - Team effectiveness"),(0,i.kt)("h3",{id:"extreme-programming"},"eXtreme Programming"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"XP is a fast extreme approach to iterative development")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"New versions build everyday and increments are delivered to customers every 2 weeks. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All tests are applied before a build is accepted")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Customer Collaboration")," means full-time customer engagement with the team")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Working Software")," is supported through small, frequent system releases")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Individuals and interactions")," through pair programming, collective ownership and a process that avoids long working hours")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Responding to change")," through regular system releases"))),(0,i.kt)("h3",{id:"scrum"},"Scrum"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A sprint is a fixed time period to achieve the current plan - 2-4 weeks"),(0,i.kt)("li",{parentName:"ul"},"Are intermittent points, and involve continuous group communication"),(0,i.kt)("li",{parentName:"ul"},"Get managed by a Scrum Master")),(0,i.kt)("h3",{id:"kanban"},"Kanban"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Rather than what will be achieved in the cycle, instead is what shall we build next. Use a board to manage current work"),(0,i.kt)("li",{parentName:"ul"},"All features to build are kept in a list, same with the others. Similar to trello"),(0,i.kt)("li",{parentName:"ul"},"Team effectiveness is managed by limiting the number in cols"),(0,i.kt)("li",{parentName:"ul"},"Release cycles is a measure of time taken to build features")),(0,i.kt)("h3",{id:"combining-agile-methods"},"Combining agile methods"),(0,i.kt)("p",null,"These techniques aren't mutually exclusive. Can do paired programming in Scrum, can use TDD in all three"),(0,i.kt)("p",null,"Challenge is to be agile by the principles not by agile methods"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Agile techniques were designed because all the rigour in SE became too big and too slow"),(0,i.kt)("li",{parentName:"ul"},"Agile techniques still have rigour, but in a fast adaptive way that is responsive to change"),(0,i.kt)("li",{parentName:"ul"},"All sorts of ways to be Agile - not just a big overall approach"),(0,i.kt)("li",{parentName:"ul"},"Following a strict agile method misses the point about being agile")))}d.isMDXComponent=!0},7265:function(e,t,a){t.Z=a.p+"assets/images/f69acdea26ed6e946058f58991245dcd-fbe299986c4ce903072e07cb025ddefe.png"}}]);