"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[247],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),h=r,g=u["".concat(l,".").concat(h)]||u[h]||m[h]||o;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4978:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={},i=void 0,s={unversionedId:"Year1/Programming Paradigms/Java/22.03.31 - Design Patterns",id:"Year1/Programming Paradigms/Java/22.03.31 - Design Patterns",title:"22.03.31 - Design Patterns",description:"Patterns",source:"@site/docs/Year1/1009 - Programming Paradigms/Java/22.03.31 - Design Patterns.md",sourceDirName:"Year1/1009 - Programming Paradigms/Java",slug:"/Year1/Programming Paradigms/Java/22.03.31 - Design Patterns",permalink:"/Year1/Programming Paradigms/Java/22.03.31 - Design Patterns",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"Alternatives to Inner Classes",permalink:"/Year1/Programming Paradigms/Java/22.03.25 - Anonymous Classes"},next:{title:"Intro to OOP",permalink:"/Year1/Programming Paradigms/Java/Revision"}},l={},c=[{value:"Patterns",id:"patterns",level:2},{value:"Responsibilities and good design",id:"responsibilities-and-good-design",level:2},{value:"Creational",id:"creational",level:2},{value:"Singleton",id:"singleton",level:2}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"patterns"},"Patterns"),(0,r.kt)("p",null,"Patterns help us to identify ways which a problem can be solved. Identify the pattern for the problem, then look at how people have solved this in the past"),(0,r.kt)("h2",{id:"responsibilities-and-good-design"},"Responsibilities and good design"),(0,r.kt)("p",null,"If a class has multiple types of responsibilities, usually better to split it into multiple classes. Can 'switch out' combinations of implementations of these responsibilities\nHave strategy pattern, observer pattern, iterator pattern"),(0,r.kt)("h1",{id:"some-final-patterns"},"Some final patterns"),(0,r.kt)("h2",{id:"creational"},"Creational"),(0,r.kt)("p",null,"Creational patterns are patterns related to creation of objects"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Singleton: only one instance of this class"),(0,r.kt)("li",{parentName:"ul"},"Factory - wrap up the creation of another object(s), particularly when you don't know what to create"),(0,r.kt)("li",{parentName:"ul"},"Both use a method to create the object, not new directly")),(0,r.kt)("h2",{id:"singleton"},"Singleton"),(0,r.kt)("p",null,"You create one instance when needed. Basic singleton in java uses a static method. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A static member is in the class not each instance, shared between all instances. One copy only per class."),(0,r.kt)("li",{parentName:"ul"},"Static members are associated with the class rather tan the object. Can share it across other objects."),(0,r.kt)("li",{parentName:"ul"},"Keep track of the one object created in a static member variable, never create an object of the class manually")),(0,r.kt)("h1",{id:"factory-pattern"},"Factory Pattern"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Factory is an object which manufactures other objects "),(0,r.kt)("li",{parentName:"ul"},"We will concentrate on simple examples, although there are more complex powerful examples of this"),(0,r.kt)("li",{parentName:"ul"},"Dont need to know which precise sub-class it will create - can let the factory decided"),(0,r.kt)("li",{parentName:"ul"},"Controlling the creation of different objects can have a number of uses")),(0,r.kt)("h1",{id:"singleton-vs-factory"},"Singleton vs Factory"),(0,r.kt)("p",null,"Both have a method for creating objects for you. Shared objects for singleton, multiple objects for the factory.\nSimple factory has a 'factory' object which is responsible for creating the objects.\nSingleton has a static member function/method"),(0,r.kt)("h1",{id:"design-patterns-summary"},"Design Patterns Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Observer"),": Tell me when something happens"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Strategy"),": Lets another object modify the behaviour of an object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Iterator"),": Lets you iterate through the contents"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Singleton"),": Create just one instance and use it anywhere"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Simple Factory"),": Delegate the job of choosing which lass to actually create to another object")),(0,r.kt)("h1",{id:"final-summary"},"Final Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Objects"),": Collection of data, set of methods which act up on the data"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access Permissions"),": Packages are very important because of access privileges in Java",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Public - Anything can access this"),(0,r.kt)("li",{parentName:"ul"},"Protected - This class + this package + subclasses can access this"),(0,r.kt)("li",{parentName:"ul"},"nothing(package) - This class + this package can access it"),(0,r.kt)("li",{parentName:"ul"},"Private - Only this class can access this")))))}m.isMDXComponent=!0}}]);