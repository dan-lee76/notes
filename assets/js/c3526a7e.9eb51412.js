"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[9551],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8498:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},u="Haskell",p={unversionedId:"Year1/Programming Paradigms/22.04.01 - Wrap up lecture",id:"Year1/Programming Paradigms/22.04.01 - Wrap up lecture",title:"Haskell",description:"Key Concepts",source:"@site/docs/Year1/1009 - Programming Paradigms/22.04.01 - Wrap up lecture.md",sourceDirName:"Year1/1009 - Programming Paradigms",slug:"/Year1/Programming Paradigms/22.04.01 - Wrap up lecture",permalink:"/Year1/Programming Paradigms/22.04.01 - Wrap up lecture",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/Year1/Programming Paradigms/22.01.31 - Introduction"},next:{title:"22.02.02 - Functional Language",permalink:"/Year1/Programming Paradigms/Haskell/22.02.02 - Functional Language"}},s={},c=[{value:"Key Concepts",id:"key-concepts",level:2},{value:"Main Drawbacks",id:"main-drawbacks",level:2},{value:"Key OO features",id:"key-oo-features",level:2}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"haskell"},"Haskell"),(0,i.kt)("h2",{id:"key-concepts"},"Key Concepts"),(0,i.kt)("p",null,"Saying what to compute rather than how\n",(0,i.kt)("inlineCode",{parentName:"p"},"sum . map (^2) . filter even"),"\nSeparating pure and inpure code:\n",(0,i.kt)("inlineCode",{parentName:"p"},"Int -> Bool")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"Int -> IO Bool"),"\nFunctions as first-class citizens:\n",(0,i.kt)("inlineCode",{parentName:"p"},"map :: (a->b) -> [a] -> [b]"),"\nEquational reasoning\n",(0,i.kt)("inlineCode",{parentName:"p"},"map f . map g")," = ",(0,i.kt)("inlineCode",{parentName:"p"},"map (f . g)")),(0,i.kt)("h2",{id:"main-drawbacks"},"Main Drawbacks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Difficult to reason about efficiency "),(0,i.kt)("li",{parentName:"ul"},"Limited tool support for developers"),(0,i.kt)("li",{parentName:"ul"},"Requires ability to think abstractly ")),(0,i.kt)("h1",{id:"java"},"Java"),(0,i.kt)("h2",{id:"key-oo-features"},"Key OO features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objects"),": This we create using new"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Classes"),": Specify what is in an object and what we can do to them"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Encapsulation (methods and data together"),": Put the methods which act on the data in the class"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Abstraction (and interfaces)"),": Only worry about what methods do, not how they are implemented"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Data hiding (restrict access to data"),": Make data private and the 'interface' methods public"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Composition (stronger than aggregation)"),": Objects can contain other objects - and use them to do the work"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Inheritance(specialisation, reuse, 'is-a'"),": Reuse things like JButton and JLabel behaviour"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"(Sub-type) Polymorphism (dynamic dispatch, late binding"),": Behaviour only known at runtime, also the reason that Lambdas can 'wrap up' a function"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Generics (parametric polymorphism)"),": Implemented using sub-type polymorphism")),(0,i.kt)("p",null,"Everything is an object in Java.\nState is usually mutable\nPrefer iteration as being more efficient"))}d.isMDXComponent=!0}}]);