"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8564],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>v});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=t.createContext({}),i=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=i(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),y=i(r),v=a,d=y["".concat(p,".").concat(v)]||y[v]||u[v]||s;return r?t.createElement(d,o(o({ref:n},c),{},{components:r})):t.createElement(d,o({ref:n},c))}));function v(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=y;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<s;i++)o[i]=r[i];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},36988:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var t=r(87462),a=(r(67294),r(3905));const s={},o="12. Making Append Vanish",l={unversionedId:"Year2/2003/12",id:"Year2/2003/12",title:"12. Making Append Vanish",description:"20/03/23",source:"@site/docs/Year2/2003/12.md",sourceDirName:"Year2/2003",slug:"/Year2/2003/12",permalink:"/Year2/2003/12",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"11. Induction",permalink:"/Year2/2003/11"},next:{title:"13.  Making Append Vanish (2)",permalink:"/Year2/2003/13"}},p={},i=[{value:"Conductive Induction",id:"conductive-induction",level:2}],c={toc:i};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"12-making-append-vanish"},"12. Making Append Vanish"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"20/03/23")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"(++) :: [a] -> [a] -> [a]\n[] ++ ys = ys\n(x:xs) ++ ys = x : (xs ++ ys)\n")),(0,a.kt)("p",null,"How many steps for reverse"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"reverse [1,2]\n=\nreverse [2] ++ [1]\n= \n(reverse [] ++ [2]) ++ [1]\n=\n([] ++ [2]) ++ [1]\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"reverse xs")," takes 1+2+...+(n+1) steps, where n = length xs"),(0,a.kt)("h2",{id:"conductive-induction"},"Conductive Induction"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"reverse' xs ys = (reverse xs) ++ ts"),"\nBase Case: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"reverse' [] ys\n=\n(reverse []) ++ ys\n=\n[] ++ ys\n=\nys\n\nreverse' [] ys = ys\n")),(0,a.kt)("p",null,"Inductive Case:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"reverse' (x:xs) ys\n= reverse (xs:xs) ++ ys\n= (reverse xs ++ [x]) ++ ys\n= reverse xs ++ ([x] ++ ys)\n= reverse xs ++ (x:ys)\n= reverse' xs (x:ys)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"reverse' :: [a] -> [a] -> [a]\nreverse' [] ys = ys\nreverse' (x:xs) ys = reverse' xs (x:ys)\n\nreverse :: [a] -> [a]\nreverse xs = reverse' xs []\n")))}u.isMDXComponent=!0}}]);