"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[869],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=n,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return a?r.createElement(h,l(l({ref:t},u),{},{components:a})):r.createElement(h,l({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8572:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const i={},l="16. Distribution & Replication",o={unversionedId:"Year2/2014/16",id:"Year2/2014/16",title:"16. Distribution & Replication",description:"05/05/23",source:"@site/docs/Year2/2014/16.md",sourceDirName:"Year2/2014",slug:"/Year2/2014/16",permalink:"/Year2/2014/16",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"15. Failure Models",permalink:"/Year2/2014/15"},next:{title:"Lab Work Answers",permalink:"/Year2/2014/lab_work"}},s={},p=[{value:"Approach",id:"approach",level:3},{value:"Algorithm Overview",id:"algorithm-overview",level:3},{value:"The two=phase commit protocol",id:"the-twophase-commit-protocol",level:3},{value:"Notes",id:"notes",level:3},{value:"Failures",id:"failures",level:3},{value:"Data Replication",id:"data-replication",level:2},{value:"(A) System model for managing replicated data",id:"a-system-model-for-managing-replicated-data",level:3},{value:"Phases of request handling (general framework)",id:"phases-of-request-handling-general-framework",level:3},{value:"Fault tolerant service",id:"fault-tolerant-service",level:3},{value:"Option 1 - Passive (primary backup) replication request handling",id:"option-1---passive-primary-backup-replication-request-handling",level:3},{value:"How does it achieve fault tolerance?",id:"how-does-it-achieve-fault-tolerance",level:3},{value:"Notes",id:"notes-1",level:3},{value:"Option 2 - Active replication",id:"option-2---active-replication",level:3}],u={toc:p};function c(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"16-distribution--replication"},"16. Distribution & Replication"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"05/05/23")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://moodle.nottingham.ac.uk/pluginfile.php/9462734/mod_page/content/3/20%20Distribution%20and%20Replication.pdf"},"MoodlePDF")),(0,n.kt)("h3",{id:"approach"},"Approach"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Assume that processes can be trusted, there are no arbitrary failures and communication is reliable"),(0,n.kt)("li",{parentName:"ul"},"Set aside a specialised coordinator process to coordinate the entire transaction")),(0,n.kt)("h3",{id:"algorithm-overview"},"Algorithm Overview"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Each participant breaks down the operation into two stages or phases",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Tentatively performing the operation"),(0,n.kt)("li",{parentName:"ul"},"Making the successful result permanent and visible (committing the result)"))),(0,n.kt)("li",{parentName:"ul"},"These two stages or phases are managed by the coordinator process")),(0,n.kt)("h3",{id:"the-twophase-commit-protocol"},"The two=phase commit protocol"),(0,n.kt)("p",null,"....."),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(18366).Z,width:"698",height:"347"})),(0,n.kt)("h3",{id:"notes"},"Notes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"So if no operation fails then all processes will reply to canCommit? with Yes",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"All of the operations will be committed"),(0,n.kt)("li",{parentName:"ul"},"Effects of all operations will be observed"))),(0,n.kt)("li",{parentName:"ul"},"So if any operation fails then the process will reply to canCommit? with No",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"All of the operations will be aborted"),(0,n.kt)("li",{parentName:"ul"},"So no effect of any operation will be observed")))),(0,n.kt)("h3",{id:"failures"},"Failures"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"But what will happen if a process crashes??"),(0,n.kt)("li",{parentName:"ul"},"Depends when:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Before any doCommit the transaction can be aborted, "),(0,n.kt)("li",{parentName:"ul"},"but afterwards it cannot"),(0,n.kt)("li",{parentName:"ul"},"Need to be sure in that case that the process will be restarted and will definitely commit the operation")))),(0,n.kt)("h2",{id:"data-replication"},"Data Replication"),(0,n.kt)("h3",{id:"a-system-model-for-managing-replicated-data"},"(A) System model for managing replicated data"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We will assume physical replicas of objects are maintained by Replica Managers (RMs)"),(0,n.kt)("li",{parentName:"ul"},"A service is provided by a cooperating set of RMs"),(0,n.kt)("li",{parentName:"ul"},"Each client (only) makes requests via a Front End",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"May be part of the client, or may be a separate process"),(0,n.kt)("li",{parentName:"ul"},"Provides the basis for client replication transparency"))),(0,n.kt)("li",{parentName:"ul"},"Requests can be read-only or update\n",(0,n.kt)("img",{src:a(98731).Z,width:"698",height:"362"}))),(0,n.kt)("h3",{id:"phases-of-request-handling-general-framework"},"Phases of request handling (general framework)"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Request issued by FE (Either to one RM or multicast to all RMs)"),(0,n.kt)("li",{parentName:"ol"},"Coordination between RMs on whether to perfrom request and in what order",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Typically FIFO, or may be Casual or Total order"))),(0,n.kt)("li",{parentName:"ol"},"Execution by RMs"),(0,n.kt)("li",{parentName:"ol"},"Agreement by RMs on effect"),(0,n.kt)("li",{parentName:"ol"},"Response by one or more RMs to FE")),(0,n.kt)("h3",{id:"fault-tolerant-service"},"Fault tolerant service"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Want to use this model to design a fault tolerant service which can tolerate up to f process failures"),(0,n.kt)("li",{parentName:"ul"},"(Intuitively) correct if each client gets the same results as they would have got from a single correct Replica Manager")),(0,n.kt)("h3",{id:"option-1---passive-primary-backup-replication-request-handling"},"Option 1 - Passive (primary backup) replication request handling"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Request - (with unique ID) is sent by the clients Front End to one primary Replica Manager"),(0,n.kt)("li",{parentName:"ol"},"Coordination - The primary takes requests in order"),(0,n.kt)("li",{parentName:"ol"},"Execution - The primary executes a stores results"),(0,n.kt)("li",{parentName:"ol"},"Agreement - If request is an update, the primary sends updated state, response and ID to all backup RMs"),(0,n.kt)("li",{parentName:"ol"},"Response - Primary responds to FE and hence client ")),(0,n.kt)("h3",{id:"how-does-it-achieve-fault-tolerance"},"How does it achieve fault tolerance?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"For correct operation, if the primary fails then",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The backups must agree on one backup to be the new primary "),(0,n.kt)("li",{parentName:"ul"},"All RMs must agree on which operations had been performed at the point when new primary takes over"))),(0,n.kt)("li",{parentName:"ul"},"If a backup fails then the result just continue"),(0,n.kt)("li",{parentName:"ul"},"If a failed RM recovers then it must re-synchronise")),(0,n.kt)("h3",{id:"notes-1"},"Notes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Surviving up to f crashes requires at least f+1 Replica Managers"),(0,n.kt)("li",{parentName:"ul"},"Cannot cope with Byzantine failures"),(0,n.kt)("li",{parentName:"ul"},"Has relatively large overheads"),(0,n.kt)("li",{parentName:"ul"},"Client may be able to submit read request to backup RMs")),(0,n.kt)("h3",{id:"option-2---active-replication"},"Option 2 - Active replication"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Request - Is sent by Front End to all Replica Managers"),(0,n.kt)("li",{parentName:"ol"},"Coordination - The multicast group delivers the request to all active RMs"),(0,n.kt)("li",{parentName:"ol"},"Execution - Every RM executes the request"),(0,n.kt)("li",{parentName:"ol"},"Agreement - None required with reliable multicast"),(0,n.kt)("li",{parentName:"ol"},"Response - Every RM sends response to FE")))}c.isMDXComponent=!0},18366:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Pasted image 20230505122019-be688f61d5391d9ff944882538ba9019.png"},98731:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Pasted image 20230505123647-eaf1cfede5a8d0e4ebf45e0e6172e151.png"}}]);