"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[608],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>g});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=r.createContext({}),c=function(e){var a=r.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},u=function(e){var a=c(e.components);return r.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(t),g=n,d=m["".concat(l,".").concat(g)]||m[g]||p[g]||i;return t?r.createElement(d,s(s({ref:a},u),{},{components:t})):r.createElement(d,s({ref:a},u))}));function g(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},80844:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(87462),n=(t(67294),t(3905));const i={},s="Class Libraries",o={unversionedId:"Year1/Programming Paradigms/Java/22.02.25 - Swing GUIs",id:"Year1/Programming Paradigms/Java/22.02.25 - Swing GUIs",title:"Class Libraries",description:"Have a library of classes available",source:"@site/docs/Year1/1009 - Programming Paradigms/Java/22.02.25 - Swing GUIs.md",sourceDirName:"Year1/1009 - Programming Paradigms/Java",slug:"/Year1/Programming Paradigms/Java/22.02.25 - Swing GUIs",permalink:"/Year1/Programming Paradigms/Java/22.02.25 - Swing GUIs",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"Class Diagrams",permalink:"/Year1/Programming Paradigms/Java/22.02.24 - Class Diagrams & Exceptions"},next:{title:"22.03.03 - Layout Managers and Labels",permalink:"/Year1/Programming Paradigms/Java/22.03.03 - Layout Managers and Labels"}},l={},c=[{value:"Java swing user interface classes",id:"java-swing-user-interface-classes",level:2},{value:"Aggregation",id:"aggregation",level:3},{value:"Inheritance",id:"inheritance",level:3}],u={toc:c};function p(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"class-libraries"},"Class Libraries"),(0,n.kt)("p",null,"Have a library of classes available\nMay just re-use existing classes to make the program. Can make objects of a class type"),(0,n.kt)("p",null,"Nouns: Used to help identify objects\nVerbs: Used to identify functionality"),(0,n.kt)("p",null,"Currently considering ER-diagrams"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"In ER diagrams we care about the data, how to group it and how it is related to other data"),(0,n.kt)("li",{parentName:"ul"},"In OO class diagrams we care about what is done and what is doing it."),(0,n.kt)("li",{parentName:"ul"},"If have a class library we will usually start by looking at what it can do and fit our plans around it - work out how to use it for our needs"),(0,n.kt)("li",{parentName:"ul"},"Java Swing provides a lot of 'base classes' that can create objects from, or inherit own classes to alter behaviour.")),(0,n.kt)("h2",{id:"java-swing-user-interface-classes"},"Java swing user interface classes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Top Level Window: JFrame"),(0,n.kt)("li",{parentName:"ul"},"Controls/Components",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JButton"),(0,n.kt)("li",{parentName:"ul"},"JLabel"),(0,n.kt)("li",{parentName:"ul"},"JTextField"),(0,n.kt)("li",{parentName:"ul"},"JListbox"))),(0,n.kt)("li",{parentName:"ul"},"Other useful classes include font and layout managers")),(0,n.kt)("p",null,"Object references are not objects. The store references to objects. Similar to a pointer\nObjects get created using new.\nStatic variables are ",(0,n.kt)("strong",{parentName:"p"},"NOT")," in objects - they are shared\nStatic methods are ",(0,n.kt)("strong",{parentName:"p"},"NOT")," associated with a specific object"),(0,n.kt)("h3",{id:"aggregation"},"Aggregation"),(0,n.kt)("p",null,"If the new class must have the original class. Should use aggregation if part of the interface is not used or has to be changed to avoid an illogical situation. "),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Create new functionality by taking other classes and combining them into a new class. Attach an common interface to this new class for interoperability with other code")),(0,n.kt)("h3",{id:"inheritance"},"Inheritance"),(0,n.kt)("p",null,"If the new class is more or less as the original class. The new class is now a subclass of the original class. Only use if we need almost all of the functionality without major changes."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},'Extend the functionality of a class by creating a subclass. Override superclass members in the subclasses to provide new functionality. Make methods abstract/virtual to force subclasses to "fill-in-the-blanks" when the superclass wants a particular interface but is agnostic about its implementation.')))}p.isMDXComponent=!0}}]);