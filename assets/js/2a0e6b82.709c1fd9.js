"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[4645],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,f=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return r?n.createElement(f,l(l({ref:t},m),{},{components:r})):n.createElement(f,l({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7695:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={},l="2. Pointer Arithmetic",o={unversionedId:"Year2/2006/02",id:"Year2/2006/02",title:"2. Pointer Arithmetic",description:"07/02/23",source:"@site/docs/Year2/2006/02.md",sourceDirName:"Year2/2006",slug:"/Year2/2006/02",permalink:"/Year2/2006/02",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"1. Pointers & Data Types",permalink:"/Year2/2006/01"},next:{title:"0. Introduction to Operating systems and Concurrency",permalink:"/Year2/2007/00"}},s={},p=[{value:"Arrays",id:"arrays",level:2},{value:"Arrays in memory",id:"arrays-in-memory",level:2},{value:"String Literals",id:"string-literals",level:2},{value:"Command Line Arguments",id:"command-line-arguments",level:2},{value:"Pointer Arithmetic",id:"pointer-arithmetic",level:2}],m={toc:p};function c(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2-pointer-arithmetic"},"2. Pointer Arithmetic"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"07/02/23")),(0,a.kt)("h2",{id:"arrays"},"Arrays"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Can create uninitialised arrays by adding ",(0,a.kt)("inlineCode",{parentName:"li"},"[]")," to the end of variable declaration. Values are unknown and not initialised.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"char* names[12];")))),(0,a.kt)("li",{parentName:"ul"},"Creating initialised array using ",(0,a.kt)("inlineCode",{parentName:"li"},"{}"),". Can also let the compiler work out the size of the array",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"short rants[2] = { 4, 1};")))),(0,a.kt)("li",{parentName:"ul"},"Access arrays by using ",(0,a.kt)("inlineCode",{parentName:"li"},"ac[4]")),(0,a.kt)("li",{parentName:"ul"},"Can take the address of an element ",(0,a.kt)("inlineCode",{parentName:"li"},"char* pc1 = &(ac[0])")),(0,a.kt)("li",{parentName:"ul"},"Array names can be used as if they were pointers to the first element, so these are equivalent. Pointers can be treated as arrays")),(0,a.kt)("h2",{id:"arrays-in-memory"},"Arrays in memory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"%p")," will display a pointers location in hex"),(0,a.kt)("li",{parentName:"ul"},"Value of pointers are undefined"),(0,a.kt)("li",{parentName:"ul"},"Do NOT dereference a pointer which does not point at something meaningful "),(0,a.kt)("li",{parentName:"ul"},"C-Arrays are stored in consecutive addresses in memory. From the address of the first element you can find the addresses of the others"),(0,a.kt)("li",{parentName:"ul"},"The relative locations of different arrays, or variables are NOT fixed")),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(5924).Z,width:"569",height:"745"}),"\nCan find length with ",(0,a.kt)("inlineCode",{parentName:"p"},"#elements = sizeof(array)/sizeof(element)")),(0,a.kt)("p",null,"C will let you read/overwrite whatever happens to be stored in the address if you read/write outside of array bounds."),(0,a.kt)("h2",{id:"string-literals"},"String Literals"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"char*")," is a pointer to a character. Normally terminated by ",(0,a.kt)("inlineCode",{parentName:"p"},"\\0")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"\n",(0,a.kt)("img",{src:r(1824).Z,width:"748",height:"401"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'char c1[] = "Hello";')," - Creates an array"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'char* c3 = "Hello";')," - Creates a pointer"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"const char*")," - For string literals")),(0,a.kt)("h2",{id:"command-line-arguments"},"Command Line Arguments"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Can declare ",(0,a.kt)("inlineCode",{parentName:"li"},"char* argv[]")," as ",(0,a.kt)("inlineCode",{parentName:"li"},"char** argv")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"argc")," - count of arguments - including the filename"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"argv[]")," - array of ",(0,a.kt)("inlineCode",{parentName:"li"},"char*"),"s"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"argv[i]")," - a ",(0,a.kt)("inlineCode",{parentName:"li"},"char*")," pointing to an array of chars")),(0,a.kt)("h2",{id:"pointer-arithmetic"},"Pointer Arithmetic"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Pointer Increment")," - Incrementing a pointer increased the value of the address stored at the pointer. Can move through the array (++)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Pointer Decrement")," - Decreased the value of the address stored by an amount equal to the size of the thing the pointer thinks that it points at (--)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Pointer Subtraction")," - Same type. Number of bytes different / by size of element")))}c.isMDXComponent=!0},5924:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/20230207143151-f53d7fa64e7ff6665d28c02ec2c5d776.png"},1824:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/20230207144137-42d77bf81a49b137c94fc4ca55d80b6a.png"}}]);