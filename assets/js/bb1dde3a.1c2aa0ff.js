"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[107],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return r?a.createElement(f,i(i({ref:t},c),{},{components:r})):a.createElement(f,i({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},25751:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=r(87462),n=(r(67294),r(3905));const o={},i="Exploits",l={unversionedId:"Year3/3006/09",id:"Year3/3006/09",title:"Exploits",description:"- The easiest way of getting access to a machine is having the user install something for you",source:"@site/docs/Year3/3006/09.md",sourceDirName:"Year3/3006",slug:"/Year3/3006/09",permalink:"/Year3/3006/09",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year3",previous:{title:"Unix and Linux",permalink:"/Year3/3006/08"},next:{title:"Database Security",permalink:"/Year3/3006/10"}},s={},u=[{value:"Memory Management",id:"memory-management",level:2},{value:"Buffer Overflows",id:"buffer-overflows",level:3},{value:"Program Memory",id:"program-memory",level:3},{value:"The Stack",id:"the-stack",level:3},{value:"Stack Smashing",id:"stack-smashing",level:3},{value:"Protection: Canaries",id:"protection-canaries",level:2},{value:"Data Execution Prevention (NX)",id:"data-execution-prevention-nx",level:2},{value:"Further protection",id:"further-protection",level:2},{value:"Heartbleed",id:"heartbleed",level:2}],c={toc:u};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"exploits"},"Exploits"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The easiest way of getting access to a machine is having the user install something for you"),(0,n.kt)("li",{parentName:"ul"},"A software or hardware bug that allows an attacker to circumvent an OS security perimeter")),(0,n.kt)("h2",{id:"memory-management"},"Memory Management"),(0,n.kt)("p",null,"In C and C++ programmer preforms the memory management"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Buffer Overruns"),(0,n.kt)("li",{parentName:"ul"},"Stack Overruns"),(0,n.kt)("li",{parentName:"ul"},"Heap Overruns\nOther languages manage this but have their own vulnerabilities")),(0,n.kt)("h3",{id:"buffer-overflows"},"Buffer Overflows"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"When a program is executed, contiguous blocks of memory can be allocated to store arrays (buffer)"),(0,n.kt)("li",{parentName:"ul"},"If data is written into a buffer that exceeds its size, an overflow occurs"),(0,n.kt)("li",{parentName:"ul"},"The data will overwrite the memory beyond the buffer")),(0,n.kt)("h3",{id:"program-memory"},"Program Memory"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Memory is stored in a virtual address space"),(0,n.kt)("li",{parentName:"ul"},"Parts of the program are held in different regions by convention"),(0,n.kt)("li",{parentName:"ul"},"Different restrictions are placed on these regions")),(0,n.kt)("h3",{id:"the-stack"},"The Stack"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"In C and C+, low level functions perform no bounds checking at all"),(0,n.kt)("li",{parentName:"ul"},"If str is long, can write into other memory")),(0,n.kt)("h3",{id:"stack-smashing"},"Stack Smashing"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"By crafting the string, can overwrite the buffer and return address with custom exploit code")),(0,n.kt)("h2",{id:"protection-canaries"},"Protection: Canaries"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Stack canaries modify the prologue and epilogue of all functions to check a value in front of the return address is unchanged"),(0,n.kt)("li",{parentName:"ul"},"If the canary value can be worked out there is no issue. ")),(0,n.kt)("h2",{id:"data-execution-prevention-nx"},"Data Execution Prevention (NX)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Modern operating systems (where possible) will mark the stack as non-executable",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"NX on AMD, XD on intel, XN on arm"))),(0,n.kt)("li",{parentName:"ul"},"An NX stack means that adding in our exploit code wont work"),(0,n.kt)("li",{parentName:"ul"},"Can circumvent this using a return-to-libc attack")),(0,n.kt)("h2",{id:"further-protection"},"Further protection"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Defeat ret2libc, various ",(0,n.kt)("inlineCode",{parentName:"li"},"0x0")," null bytes are inserted into standard library addresses"),(0,n.kt)("li",{parentName:"ul"},"Developers also restrict access to obvious system calls"),(0,n.kt)("li",{parentName:"ul"},"Address Space Layout Randomisation (ASLR) moves the address of library and programs around"),(0,n.kt)("li",{parentName:"ul"},"Don't have to move too much before your hand-crafted ",(0,n.kt)("inlineCode",{parentName:"li"},"ret")," address will break")),(0,n.kt)("p",null,"Race Conditions - With concurrent threads or processes, timing can lead to security vulnerabilities. Where items rely on another thing at the same time"),(0,n.kt)("h2",{id:"heartbleed"},"Heartbleed"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Bug in OpenSSL"),(0,n.kt)("li",{parentName:"ul"},"Specifically targets the heartbeat extension - buffer over-read"),(0,n.kt)("li",{parentName:"ul"},"Extension to regular SSL"),(0,n.kt)("li",{parentName:"ul"},"Used to keepalive purposes, to stop quiet connections being closed"),(0,n.kt)("li",{parentName:"ul"},"Not always used, optional in SSL")))}m.isMDXComponent=!0}}]);