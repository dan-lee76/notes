"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3163],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),p=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(a),d=n,h=c["".concat(o,".").concat(d)]||c[d]||u[d]||i;return a?r.createElement(h,l(l({ref:t},m),{},{components:a})):r.createElement(h,l({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},13307:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const i={},l="Modern Steam Ciphers",s={unversionedId:"Year3/3077/03",id:"Year3/3077/03",title:"Modern Steam Ciphers",description:"Modern stream ciphers use an initial seed key to generate an infinite pseudorandom keystream",source:"@site/docs/Year3/3077/03.md",sourceDirName:"Year3/3077",slug:"/Year3/3077/03",permalink:"/Year3/3077/03",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year3",previous:{title:"Steam Ciphers",permalink:"/Year3/3077/02"},next:{title:"Data Encryption Standard (DES)",permalink:"/Year3/3077/04"}},o={},p=[{value:"Pseudo Randomness",id:"pseudo-randomness",level:2},{value:"LFSR",id:"lfsr",level:2},{value:"Mathematical Representation",id:"mathematical-representation",level:2},{value:"Attacking LFSRs",id:"attacking-lfsrs",level:2},{value:"Trivium",id:"trivium",level:2},{value:"ChaCha20",id:"chacha20",level:2},{value:"Vulnerabilities",id:"vulnerabilities",level:2}],m={toc:p};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"modern-steam-ciphers"},"Modern Steam Ciphers"),(0,n.kt)("p",null,"Modern stream ciphers use an initial seed key to generate an infinite pseudorandom keystream"),(0,n.kt)("h2",{id:"pseudo-randomness"},"Pseudo Randomness"),(0,n.kt)("p",null,"There are three types of random number generators"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"True Random Number Generator (TRNGs) - Impractical at scale"),(0,n.kt)("li",{parentName:"ul"},"Pseudorandom Number Generators (PRNGs) - insecure "),(0,n.kt)("li",{parentName:"ul"},"Cryptographically Secure Random Number Generators (CSPRNGs) - Are modern stream ciphers")),(0,n.kt)("h2",{id:"lfsr"},"LFSR"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A linear-feedback shift register is a register of bits whose positions shift to the right"),(0,n.kt)("li",{parentName:"ul"},"Usually comprised of flip-flops, the last bit represents the output")),(0,n.kt)("h2",{id:"mathematical-representation"},"Mathematical Representation"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Usually represent m-bit LFSRs using polynomials of degree m")),(0,n.kt)("h2",{id:"attacking-lfsrs"},"Attacking LFSRs"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Suppose an attacker knows ",(0,n.kt)("span",{parentName:"li",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mn",{parentName:"mrow"},"2"),(0,n.kt)("mi",{parentName:"mrow"},"m")),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2m")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,n.kt)("span",{parentName:"span",className:"mord"},"2"),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"m")))))," plaintext bits"),(0,n.kt)("li",{parentName:"ul"},"Step 1 - Calculate key bits"),(0,n.kt)("li",{parentName:"ul"},"Step 2 - Reconstruct the LFSR")),(0,n.kt)("h2",{id:"trivium"},"Trivium"),(0,n.kt)("p",null,"LFSRs are much more cryptographically secure if we combine more than one together in a non-linear way"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"3 LFSRs"),(0,n.kt)("li",{parentName:"ul"},"Feedback between each with non-linear AND gates"),(0,n.kt)("li",{parentName:"ul"},"Initialises the LSFRs with an 80-bit key and 80-bit random value")),(0,n.kt)("h2",{id:"chacha20"},"ChaCha20"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"ChaCha is a stream cipher written by Daniel Berstein"),(0,n.kt)("li",{parentName:"ul"},"Modificaiton of a previous cipher, Salsa"),(0,n.kt)("li",{parentName:"ul"},"Very lightweight, using only add, xor and rotate operations"),(0,n.kt)("li",{parentName:"ul"},"One of two ciphers in TLS1.3")),(0,n.kt)("h2",{id:"vulnerabilities"},"Vulnerabilities"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Stream ciphers give us confidentiality, but not integrity"),(0,n.kt)("li",{parentName:"ul"},"Must include another mechanism")))}u.isMDXComponent=!0}}]);