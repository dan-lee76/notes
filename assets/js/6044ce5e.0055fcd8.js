"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3807],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(t),f=a,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||o;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3564:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={},i="12. Deciding Equality of Natural Numbers (\u2115)",c={unversionedId:"Year2/2009/12",id:"Year2/2009/12",title:"12. Deciding Equality of Natural Numbers (\u2115)",description:"14/11/22",source:"@site/docs/Year2/2009/12.md",sourceDirName:"Year2/2009",slug:"/Year2/2009/12",permalink:"/Year2/2009/12",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"11. Multiplicaiton & less-or-equal",permalink:"/Year2/2009/11"},next:{title:"13. Lists, Basic properties, Monoid",permalink:"/Year2/2009/13"}},s={},l=[],p={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"12-deciding-equality-of-natural-numbers-\u2115"},"12. Deciding Equality of Natural Numbers (\u2115)"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"14/11/22")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lean"},"namespace l13\nset_option pp.structure_projections false\nopen nat\n\ndef eqb : \u2115 \u2192 \u2115 \u2192 bool \n  | zero zero := tt\n  | (succ m) zero := ff\n  | zero (succ n) := ff\n  | (succ m) (succ n) := eqb m n\n\n#eval (eqb 2 2)\n\n-- decides equality (=)\nvariables A B : Type\n\nexample : \u2200 f : A \u2192 B, \u2200 x y, x = y \u2192 f x = f y :=\nbegin\n  assume f x y h,\n  rewrite h,\nend\n/-\nexample : \u2200 f : A \u2192 B, \u2200 x y, f x = f y \u2192 x = y :=\n-/\n\nlemma eqb_sound : \u2200 n : \u2115, eqb n n = tt :=\nbegin\n  assume n,\n  induction n with n' ih,\n  refl,\n  \n  dsimp[eqb],\n  exact ih,\nend\n\nlemma eqb_compl : \u2200 m n : \u2115, eqb m n = tt \u2192 m = n :=\nbegin\n  assume m,\n  induction m with m' ih_m,\n  assume n,\n  cases n with n',\n  assume h,\n  refl,\n  assume h,\n  dsimp[eqb] at h,\n  contradiction,\n  assume n,\n  cases n with n',\n  dsimp[eqb],\n  assume h,\n  contradiction,\n  assume h,\n  apply congr_arg succ,\n  apply ih_m,\n  dsimp[eqb] at h,\n  exact h,\nend\n\ntheorem eqb_ok : \u2200 m n : \u2115, eqb m n = tt \u2194 m = n :=\nbegin\n  assume m n,\n  constructor,\n  apply eqb_compl,\n  \n  assume h,\n  rewrite h,\n  apply eqb_sound,\nend\n\n-- we say eqb *decides* = \n-- P : A \u2192 Prop\n-- f : A \u2192 bool\n-- f *decides* P means\n-- \u2200 a:A, P a \u2194 f a = tt\n-- Prime : \u2115 \u2192 Prop\n-- is_prime : \u2115 \u2192 bool\n-- can we decide any predicate? \n\n\ndef Hard (f : \u2115 \u2192 bool) : Prop :=\n  \u2200 n : \u2115, f n = tt\n\n\n-- is there\n-- hard : (\u2115 \u2192 bool) \u2192 bool\n-- decides Hard?\n\n\nend l13\n")))}u.isMDXComponent=!0}}]);