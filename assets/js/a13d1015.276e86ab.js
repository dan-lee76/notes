"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[5109],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),f=r,d=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={},l="8. Inheritance and Virtual Functions",o={unversionedId:"Year2/2006/08",id:"Year2/2006/08",title:"8. Inheritance and Virtual Functions",description:"28/02/23",source:"@site/docs/Year2/2006/08.md",sourceDirName:"Year2/2006",slug:"/Year2/2006/08",permalink:"/Year2/2006/08",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"7.  Static members, this, references, const",permalink:"/Year2/2006/07"},next:{title:"0. Introduction to Operating systems and Concurrency",permalink:"/Year2/2007/00"}},s={},c=[{value:"Inheritance",id:"inheritance",level:2},{value:"Virtual Functions",id:"virtual-functions",level:2},{value:"Cost of flexibility",id:"cost-of-flexibility",level:3},{value:"Inheritance and constructors",id:"inheritance-and-constructors",level:2},{value:"Virtual Destructors",id:"virtual-destructors",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"8-inheritance-and-virtual-functions"},"8. Inheritance and Virtual Functions"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"28/02/23")),(0,r.kt)("h2",{id:"inheritance"},"Inheritance"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Models the 'is-a' relationship. The sub-class object is-a type of base class object"),(0,r.kt)("li",{parentName:"ul"},"Be sure that inheritance really is what you want before use it"),(0,r.kt)("li",{parentName:"ul"},"Define a new class in terms of a current class"),(0,r.kt)("li",{parentName:"ul"},"Uses the ",(0,r.kt)("inlineCode",{parentName:"li"},":")," notation. Equivalent of Javas extends")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyClass : public MySuperClass\n{\n\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Can have different access rights; ",(0,r.kt)("inlineCode",{parentName:"li"},"public")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"protected")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"private"))),(0,r.kt)("h2",{id:"virtual-functions"},"Virtual Functions"),(0,r.kt)("h3",{id:"cost-of-flexibility"},"Cost of flexibility"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Adding a virtual function to a class may make the objects of that class bigger")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Looking up which function to call at runtime is slower when functions are virtual"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Why the default is to not have virtual functions"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Even if a function is virtual, you can still call the base class version from the sub-class version. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Can use the scoping operator to call global functions or access global variables ",(0,r.kt)("inlineCode",{parentName:"p"},"::")," with nothing before it")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Also used to denote a function is a class member in a definition")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Left of scoping operator is"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"blank - to access a global variable/function"),(0,r.kt)("li",{parentName:"ul"},"class name - to access member of that class"),(0,r.kt)("li",{parentName:"ul"},"namespace name - to use that namespace")))),(0,r.kt)("h2",{id:"inheritance-and-constructors"},"Inheritance and constructors"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Construction occurs in the order; base class first, then derived class"),(0,r.kt)("li",{parentName:"ul"},"Destruction occurs in the order; derived class first, then base class"),(0,r.kt)("li",{parentName:"ul"},"Derived classes part of the object can always assume that base class part exists"),(0,r.kt)("li",{parentName:"ul"},"They will NOT exist/be initialised when the base class constructor/destructor is called"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Do not call virtual functions from the constructor or destructor"))),(0,r.kt)("h3",{id:"virtual-destructors"},"Virtual Destructors"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If destructor is NOT ",(0,r.kt)("inlineCode",{parentName:"li"},"virtual")," then it will NOT be called if the object is destroyed through a base class pointer, reference or function "),(0,r.kt)("li",{parentName:"ul"},"But if you make destructor ",(0,r.kt)("inlineCode",{parentName:"li"},"virtual")," then the objects of that class will have a (hidden) vtable pointer")))}p.isMDXComponent=!0}}]);