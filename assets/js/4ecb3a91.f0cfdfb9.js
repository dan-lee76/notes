"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[7502],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var i=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,l=function(e,t){if(null==e)return{};var a,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=i.createContext({}),m=function(e){var t=i.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},p=function(e){var t=m(e.components);return i.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(a),k=l,d=c["".concat(o,".").concat(k)]||c[k]||u[k]||r;return a?i.createElement(d,n(n({ref:t},p),{},{components:a})):i.createElement(d,n({ref:t},p))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,n=new Array(r);n[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,n[1]=s;for(var m=2;m<r;m++)n[m]=a[m];return i.createElement.apply(null,n)}return i.createElement.apply(null,a)}c.displayName="MDXCreateElement"},52525:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>n,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var i=a(87462),l=(a(67294),a(3905));const r={},n="19.  User & Implementation view of file systems",s={unversionedId:"Year2/2007/19",id:"Year2/2007/19",title:"19.  User & Implementation view of file systems",description:"25/11/22",source:"@site/docs/Year2/2007/19.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/19",permalink:"/Year2/2007/19",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"18. Disk Scheduling",permalink:"/Year2/2007/18"},next:{title:"20. File System Implementations",permalink:"/Year2/2007/20"}},o={},m=[{value:"File Systems",id:"file-systems",level:2},{value:"User View",id:"user-view",level:2},{value:"Files",id:"files",level:3},{value:"System Calls",id:"system-calls",level:3},{value:"File System Structures",id:"file-system-structures",level:3},{value:"User/Implementation View",id:"userimplementation-view",level:2},{value:"Directories",id:"directories",level:3},{value:"Implementation View",id:"implementation-view",level:2},{value:"Hard Disk Structures",id:"hard-disk-structures",level:3},{value:"Partition Layouts",id:"partition-layouts",level:3},{value:"Disk Space Management",id:"disk-space-management",level:3},{value:"Summary",id:"summary",level:4},{value:"File Tables",id:"file-tables",level:3}],p={toc:m};function u(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,i.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"19--user--implementation-view-of-file-systems"},"19.  User & Implementation view of file systems"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"25/11/22")),(0,l.kt)("h2",{id:"file-systems"},"File Systems"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A user view that defines a file system in terms of the abstraction that the operating system provides")),(0,l.kt)("h2",{id:"user-view"},"User View"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"File abstraction")," which hides away implementation details to the user"),(0,l.kt)("li",{parentName:"ul"},"File ",(0,l.kt)("strong",{parentName:"li"},"naming policies"),", user file attributes (size, protection, owner, dates)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Also system attributes for tiles"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Directory structures")," and organisation"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"System calls")," to interact with the file system")),(0,l.kt)("p",null,"The user view define how the file system looks like to regular users and relates to abstractions"),(0,l.kt)("h3",{id:"files"},"Files"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Many OSs support several types of file"),(0,l.kt)("li",{parentName:"ul"},"Both binbows and Unix have regular files and directories",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Regular files")," contains user data in ASCII or binary format"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Directories")," group files together"))),(0,l.kt)("li",{parentName:"ul"},"Unix also has character and block special files",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Character special files")," are used to model serial I/O devices"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Block special files")," are used to model.")))),(0,l.kt)("h3",{id:"system-calls"},"System Calls"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"File control blocks (FCBs) are kernel data structures (protected and only accessible in kernel mode)"),(0,l.kt)("li",{parentName:"ul"},"Allowing user applications to access them directly could compromise their integrity"),(0,l.kt)("li",{parentName:"ul"},"System calls enable a user application to ask the operating system to carry out an action on its behalf (kernel mode)"),(0,l.kt)("li",{parentName:"ul"},"Two different categories of system calls:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"File manipulation"),": open(), close(), read(), write()"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Directory manipulation"),": create(), delete(), rename()..")))),(0,l.kt)("h3",{id:"file-system-structures"},"File System Structures"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Single level")," - all files in the same directory"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Two or multiple level directories")," - tree structures",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Absolute path name - from root of the file system"),(0,l.kt)("li",{parentName:"ul"},"Relative path name - current working directory is used as the starting point"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Directed acrylic graph (DAG)")," - Allows files to be shared but cycles are forbidden"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Generic graph structure")," in which links and cycles can exist")),(0,l.kt)("p",null,"The use of DAGs are generic graph structures results in significant complications in the implementations"),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(78429).Z,width:"419",height:"393"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When searching file system; cycles can result in infinite loops, sub-trees can be traversed multiple times"),(0,l.kt)("li",{parentName:"ul"},"Files have multiple absolute file names"),(0,l.kt)("li",{parentName:"ul"},"Deleting files becomes a lot more complicated"),(0,l.kt)("li",{parentName:"ul"},"A garbage collection scheme may be required to remove files that are no longer accessible from the system tree")),(0,l.kt)("h2",{id:"userimplementation-view"},"User/Implementation View"),(0,l.kt)("h3",{id:"directories"},"Directories"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Directories contain a list of human readable file names that are mapped onto unique identifiers and disk locations (mapping of the logical file onto the physical location)"),(0,l.kt)("li",{parentName:"ul"},"Retrieving a file comes down to searching a directory file as fast as possible:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A simple random order of directory entries might be insufficient"),(0,l.kt)("li",{parentName:"ul"},"Indexes or hash tables can be used"))),(0,l.kt)("li",{parentName:"ul"},"They can store all file related attributes (Windows) or they can contain a pointer to the data structure that contains the details of the file (Unix)")),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(74793).Z,width:"629",height:"462"}),"\n",(0,l.kt)("em",{parentName:"p"},"Left: Windows directory implementation. Right: Unix directory implementation")),(0,l.kt)("p",null,"Directories are special files that group files together and of which the structure is defined by the file system"),(0,l.kt)("h2",{id:"implementation-view"},"Implementation View"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Irrespectively of the type of file system, a number of additional considerations have to be accessed, including:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Disk partitions, partition tables, boot sectors"),(0,l.kt)("li",{parentName:"ul"},"Free space management"),(0,l.kt)("li",{parentName:"ul"},"System wide and per process file tables"))),(0,l.kt)("li",{parentName:"ul"},"Low level formatting writes sectors to the disk, high level formatting imposes a file system on top of this")),(0,l.kt)("h3",{id:"hard-disk-structures"},"Hard Disk Structures"),(0,l.kt)("p",null,"Master boot record is located at start of the entire drive"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Used to boot the computer (BIOS reads and executes MBR)"),(0,l.kt)("li",{parentName:"ul"},"Contains partition table as its end with active partition"),(0,l.kt)("li",{parentName:"ul"},"One partition is listed as active containing a boot block to load the operating system")),(0,l.kt)("h3",{id:"partition-layouts"},"Partition Layouts"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The layout of a partition differs depending on the file system"),(0,l.kt)("li",{parentName:"ul"},"A UNIX partition contains:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Thee partition boot block:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Contains a code to boot the operating system"),(0,l.kt)("li",{parentName:"ul"},"Every partition has boot block"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Super block")," contains the partitions details (size, number of blocks etc)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Free space management")," contains bitmap or linked list that indicates the free block"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"I-nodes")," - an array of data structures, one per file, telling all about the files"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Root directory")," - the top of the file-system tree"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Data")," files and directories")))),(0,l.kt)("h3",{id:"disk-space-management"},"Disk Space Management"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Two methods are commonly used to keep track of free disk space: bitmaps and linked lists"),(0,l.kt)("li",{parentName:"ul"},"Not that these approaches are very similar to the ones to keep track of free memory"),(0,l.kt)("li",{parentName:"ul"},"Bitmaps represent each block by a single bit in a map",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The size of the bitmap grows with the size of the disk but is constant for a given disk"),(0,l.kt)("li",{parentName:"ul"},"Bitmaps take comparably less space than linked lists"))),(0,l.kt)("li",{parentName:"ul"},"Linked list of disk blocks (Known as grouping)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Use free blocks to hold the number of the free blocks"),(0,l.kt)("li",{parentName:"ul"},"Blocks are linked together i.e. multiple blocks list the free blocks"),(0,l.kt)("li",{parentName:"ul"},"The size of the list grows with the size of the disk and shrinks with the size of the blocks"))),(0,l.kt)("li",{parentName:"ul"},"Linked lists can be modified by keeping track of the number of consecutive free blocks for each entry\n",(0,l.kt)("img",{src:a(12528).Z,width:"1083",height:"739"}))),(0,l.kt)("h4",{id:"summary"},"Summary"),(0,l.kt)("p",null,"Bitmaps"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Require extra space. "),(0,l.kt)("li",{parentName:"ul"},"Keeping it in main memory is possible only for small disks\nLinked lists"),(0,l.kt)("li",{parentName:"ul"},"No waste of disk space"),(0,l.kt)("li",{parentName:"ul"},"Only need to keep in memory one block of pointers")),(0,l.kt)("h3",{id:"file-tables"},"File Tables"),(0,l.kt)("p",null,"Number of key data structures stored in memory:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"All in-memory mount table"),(0,l.kt)("li",{parentName:"ul"},"An in-memory directory cache of recently accessed directory information "),(0,l.kt)("li",{parentName:"ul"},"A system-wide open file table, containing a copy of the FCB for every currently open file in the system, including location on disk, file size, and open count"),(0,l.kt)("li",{parentName:"ul"},"A per-process open file table, containing a pointer to the system open file table")))}u.isMDXComponent=!0},78429:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/20221125091950-9c4d6c8679755a14a47b655e3e3cc6b6.png"},74793:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/20221125092532-dbad0c622ff54a9e2419c18dd0a8bf89.png"},12528:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/20221125101602-2fb885a78958f52cfa357aa5d973fa68.png"}}]);