"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[3296],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),p=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,f=u["".concat(o,".").concat(m)]||u[m]||d[m]||i;return r?a.createElement(f,l(l({ref:t},c),{},{components:r})):a.createElement(f,l({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var p=2;p<i;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},86622:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const i={},l="7.  Trees: Terminology, Traversals, Representations, and Properties",s={unversionedId:"Year2/2009/ADE/07",id:"Year2/2009/ADE/07",title:"7.  Trees: Terminology, Traversals, Representations, and Properties",description:"24/02/23",source:"@site/docs/Year2/2009/ADE/07.md",sourceDirName:"Year2/2009/ADE",slug:"/Year2/2009/ADE/07",permalink:"/Year2/2009/ADE/07",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"6. Linked Lists & Simple Sorting Algorithms",permalink:"/Year2/2009/ADE/06"},next:{title:"8. Mergesort & Quicksort",permalink:"/Year2/2009/ADE/08"}},o={},p=[{value:"Terminology",id:"terminology",level:2},{value:"Traversals",id:"traversals",level:2},{value:"Preorder Traversal",id:"preorder-traversal",level:3},{value:"Postorder Traversal",id:"postorder-traversal",level:3},{value:"Inorder Tranversal",id:"inorder-tranversal",level:3},{value:"Tree types",id:"tree-types",level:2},{value:"Binary Trees",id:"binary-trees",level:3},{value:"Arithmetic Expression Tree",id:"arithmetic-expression-tree",level:3},{value:"Decision Tree",id:"decision-tree",level:3},{value:"Abstract Data Types (ADTs)",id:"abstract-data-types-adts",level:2},{value:"Concrete Data Types (CDTs)",id:"concrete-data-types-cdts",level:3},{value:"ADT &amp; Efficiency",id:"adt--efficiency",level:3},{value:"Properties of perfect binary trees",id:"properties-of-perfect-binary-trees",level:2},{value:"Height (h) is logarithmic in size (n)",id:"height-h-is-logarithmic-in-size-n",level:2}],c={toc:p};function d(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"7--trees-terminology-traversals-representations-and-properties"},"7.  Trees: Terminology, Traversals, Representations, and Properties"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"24/02/23")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"(Rooted) Tree")," - Tree is an abstract model of a hierarchical structure. Consists of nodes with parent-child relation."),(0,n.kt)("h2",{id:"terminology"},"Terminology"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Root")," - Node without parent"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Internal")," node - node with at least one child"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"External")," node (leaf) - node without children"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Ancestors")," of a node - parent, grandparent etc"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Depth")," of a node - Number of ancestors (not counting itself)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Height")," of a tree - Maximum depth of any node = length of longest path from root to a leaf"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Descendant")," of a node - Child, grandchild etc"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Subtree")," - Tree consisting of a node and its descendants")),(0,n.kt)("h2",{id:"traversals"},"Traversals"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Visit each element precisely once, visit in some systematic and meaningful order"),(0,n.kt)("li",{parentName:"ul"},"For an array the natural way is a forwards scan")),(0,n.kt)("h3",{id:"preorder-traversal"},"Preorder Traversal"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A node is visited before its descendants"),(0,n.kt)("li",{parentName:"ul"},"Application - Print a structured document")),(0,n.kt)("p",null,(0,n.kt)("img",{src:r(94311).Z,width:"815",height:"262"})),(0,n.kt)("h3",{id:"postorder-traversal"},"Postorder Traversal"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Visited after its descendants"),(0,n.kt)("li",{parentName:"ul"},"Application - Compute space used by files in a directory and its subdirectories"),(0,n.kt)("li",{parentName:"ul"},"(Used to evaluate arithmetic expressions)")),(0,n.kt)("p",null,(0,n.kt)("img",{src:r(17078).Z,width:"815",height:"262"})),(0,n.kt)("h3",{id:"inorder-tranversal"},"Inorder Tranversal"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A node is visited after its left subtree and before its right subtree"),(0,n.kt)("li",{parentName:"ul"},"Application - Draw a binary tree by (x,y) coords"),(0,n.kt)("li",{parentName:"ul"},"(Used to print arithmetic expressions)")),(0,n.kt)("p",null,(0,n.kt)("img",{src:r(86705).Z,width:"341",height:"262"})),(0,n.kt)("h2",{id:"tree-types"},"Tree types"),(0,n.kt)("h3",{id:"binary-trees"},"Binary Trees"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Each internal node has at most two children "),(0,n.kt)("li",{parentName:"ul"},"The children of a done are an ordered pair - though one might be missing"),(0,n.kt)("li",{parentName:"ul"},"Call the children of an internal node left child and right child"),(0,n.kt)("li",{parentName:"ul"},"A proper binary tree has either two children or no children. ")),(0,n.kt)("h3",{id:"arithmetic-expression-tree"},"Arithmetic Expression Tree"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Binary tree associated with an arithmetic expression",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal nodes - (binary) operators"),(0,n.kt)("li",{parentName:"ul"},"external nodes - operands")))),(0,n.kt)("p",null,(0,n.kt)("img",{src:r(52312).Z,width:"686",height:"359"})),(0,n.kt)("h3",{id:"decision-tree"},"Decision Tree"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Binary tree associated with a decision process",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal nodes - questions with yes/no answers"),(0,n.kt)("li",{parentName:"ul"},"external nodes - decisions")))),(0,n.kt)("p",null,(0,n.kt)("img",{src:r(56213).Z,width:"699",height:"278"})),(0,n.kt)("h2",{id:"abstract-data-types-adts"},"Abstract Data Types (ADTs)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Abstraction of a data structure"),(0,n.kt)("li",{parentName:"ul"},"Specifies - data stored, operations on the data, error conditions associated with operations"),(0,n.kt)("li",{parentName:"ul"},"An ADT does not specify the implementation itself")),(0,n.kt)("h3",{id:"concrete-data-types-cdts"},"Concrete Data Types (CDTs)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Actual data structure that we use"),(0,n.kt)("li",{parentName:"ul"},"ADT might be implemented using different choices for the CDT",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Choice of CDT will not be apparent from the interface (data hiding/ encapsulation)"),(0,n.kt)("li",{parentName:"ul"},"Choice of CDT will affect the runtime and space usage - and so is a major topic of this module")))),(0,n.kt)("h3",{id:"adt--efficiency"},"ADT & Efficiency"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Often the ADT comes with efficiency requirements expressed in big-Oh notation, yes some do not automatically force a particular CDT"),(0,n.kt)("li",{parentName:"ul"},"Typical of many library functions"),(0,n.kt)("li",{parentName:"ul"},"Such efficiency specifications rely on using the big-Oh family")),(0,n.kt)("h2",{id:"properties-of-perfect-binary-trees"},"Properties of perfect binary trees"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Said to be proper (full) if every internal node has exactly 2 children"),(0,n.kt)("li",{parentName:"ul"},"It is perfect if it is proper and all leaves are at the same depth; hence all levels are full")),(0,n.kt)("h2",{id:"height-h-is-logarithmic-in-size-n"},"Height (h) is logarithmic in size (n)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Very important property of a perfect binary tree"),(0,n.kt)("li",{parentName:"ul"})))}d.isMDXComponent=!0},94311:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/20230224170941-d8ad30f3a3df24d9530e3cb9ee43df7f.png"},17078:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/20230224171210-b40a8c0e1a928255f5a529461aa6defe.png"},52312:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/20230224171741-26cd92d0b1f224e199df546b1a7e1d61.png"},56213:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/20230224171841-e0e59f1e119f304254171afd00f11210.png"},86705:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/20230224172205-e139826d00fc8e1ad77cc6c31406b1ff.png"}}]);