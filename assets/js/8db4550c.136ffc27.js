"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[1992],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>d});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),c=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=c(n.components);return r.createElement(l.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,l=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),f=c(t),d=o,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||a;return t?r.createElement(m,i(i({ref:e},p),{},{components:t})):r.createElement(m,i({ref:e},p))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2924:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={},i="8. Booleans (2)",s={unversionedId:"Year2/2009/08",id:"Year2/2009/08",title:"8. Booleans (2)",description:"",source:"@site/docs/Year2/2009/08.md",sourceDirName:"Year2/2009",slug:"/Year2/2009/08",permalink:"/Year2/2009/08",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"7. The Booleans",permalink:"/Year2/2009/07"},next:{title:"0. Introduction to Developing Maintainable Software",permalink:"/Year2/2013/00"}},l={},c=[],p={toc:c};function u(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"8-booleans-2"},"8. Booleans (2)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lean"},"variable P : Prop\nvariables A B : Type\nvariable R : A \u2192 B \u2192 Prop\nvariable PP : A \u2192 Prop\nvariable QQ : A \u2192 Prop\n\nopen classical\n\ntheorem raa : \xac \xac P \u2192 P := \nbegin\n  assume nnp,\n  cases (em P) with p np,\n    exact p,\n    have f : false,\n      apply nnp,\n      exact np,\n    cases f,\nend\n\n\n\n/- \ninductive bool : Tyoe\n| tt : bool\n| ff : bool\n\ntt and ff are the only elements of \u2200 x : bool, x=tt \u2228 x=ff\ntt \u2260 ff\n\n-/\n\n-- suits = {diamond, heats, spades, clubs}\n\ninductive suit : Type\n| diamond : suit\n| hearts : suit\n| spades : suit\n| clubs : suit \n\n-- suit.diamond\n\nopen suit\n\n-- diamond\n\n-- define color = {black, red}\n-- has_color : suit \u2192 color\n\ninductive false : Prop\n\ninductive empty : Type\n\n\ndef is_tt : bool \u2192 Prop\n| tt := true\n| ff := false\n\nexample : tt \u2260 ff :=\nbegin\n  assume h,\n  change (is_tt ff),\n  rewrite\u2190 h,\n  dsimp [is_tt],\n  constructor,\nend\n\n\nexample : tt \u2260 ff :=\nbegin\n  assume h,\n  contradiction,\nend\n\n\n-- local notation x && y := band x y,\n\ntheorem dm2_b :\n\u2200 x y : bool, bnot (band x y) = bor (bnot x) (bnot y) := -- ! (x & y) = !x | !y\nbegin\n  assume x y,\n  cases x,\n  -- ! (ff & y) = ! ff = tt\n  -- ! ff | !y = tt | !y = tt\n  dsimp [bnot,band,bor],\n  reflexivity,\n  -- !(tt & y) = ! y\n  -- ! tt | ! y == ff | ! y = !y\n  dsimp [bnot,band,bor],\n  reflexivity,\nend\n\ntheorem and_ok : \u2200 x y : bool,\n  is_tt (band x y)\n  \u2194 is_tt x \u2227 is_tt y :=\nbegin\n  assume x y,\n  constructor,\n  cases x,\n  assume h,\n  dsimp [band,is_tt] at h,\n  cases h,\n\n  assume h,\n  dsimp [band] at h,\n  constructor,\n  dsimp [is_tt],\n  constructor,\n\n  exact h,\n\n  assume h,\n  cases h with hx hy,\n  cases x,\n  cases hx,\n  \n  dsimp [band],\n  exact hy,\n\nend\n\n-- classical logic Prop = bool\n\n/-\nisPrime : \u2115 \u2192 Prop\nisPrimeB : \u2115 \u2192 bool\n\n\u2200 n : \u2115, isPrime n \u2194 is_tt (isPrimeB n)\n\nhalts : Prog \u2192 Prop\n-- halts p = program will terminate\n-- Prog = Turning machine\n\nhaltsB : Prop \u2192 bool\n\u2200 p : Prog, halts p \u2194 is_tt (haltsB p)\n\nTurning : there \n\n-/\n\n\n")))}u.isMDXComponent=!0}}]);