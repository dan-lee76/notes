"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[1920],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,k=m["".concat(o,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3865:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={},l="7. Concurrency (2)",s={unversionedId:"Year2/2007/7",id:"Year2/2007/7",title:"7. Concurrency (2)",description:"18/10/22",source:"@site/docs/Year2/2007/7.md",sourceDirName:"Year2/2007",slug:"/Year2/2007/7",permalink:"/Year2/2007/7",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"6. Concurrency",permalink:"/Year2/2007/6"},next:{title:"0. Introduction to Algorithms Correctness and Efficiency",permalink:"/Year2/2009/0"}},o={},u=[{value:"Mutual Exclusions",id:"mutual-exclusions",level:2},{value:"Peterson&#39;s Solution",id:"petersons-solution",level:2},{value:"Software solution",id:"software-solution",level:3},{value:"Mutual exclusion requirement",id:"mutual-exclusion-requirement",level:3},{value:"Progress requirement",id:"progress-requirement",level:3},{value:"Fairness/bounded waiting",id:"fairnessbounded-waiting",level:3},{value:"Disable interrupts",id:"disable-interrupts",level:2},{value:"Atomic Instructions",id:"atomic-instructions",level:2},{value:"Mutual Exclusion",id:"mutual-exclusion",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"7-concurrency-2"},"7. Concurrency (2)"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"18/10/22")),(0,i.kt)("h2",{id:"mutual-exclusions"},"Mutual Exclusions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Software based: Peterson's solution"),(0,i.kt)("li",{parentName:"ul"},"Hardware based: disabling interrupts, test_and_set(), swap_and_compare()"),(0,i.kt)("li",{parentName:"ul"},"OS based: Mutexes, Semaphones"),(0,i.kt)("li",{parentName:"ul"},"Monitors: Software construct within the programming langues")),(0,i.kt)("h2",{id:"petersons-solution"},"Peterson's Solution"),(0,i.kt)("h3",{id:"software-solution"},"Software solution"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Peterson solution is a software based solution which worked well on older machines."),(0,i.kt)("li",{parentName:"ul"},"Two shared variables are used:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"turn"),": indicates which process is next to enter its critical section"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"boolean flag[2]"),": indicates that a process is ready to enter its critical section."))),(0,i.kt)("li",{parentName:"ul"},"Can be generalised to multiple processes")),(0,i.kt)("p",null,"Peterson's solution for process ",(0,i.kt)("inlineCode",{parentName:"p"},"i")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"\ndo{\n    flag[i] = true; // i wants to enter critical section\n    turn = j; // allow j to access first\n    while (flag[j] && turn == j);\n    // CRITICAL SECTION, e.g. counter++\n    flag[i] = false;\n    //reminder section\n} while (...);\n")),(0,i.kt)("p",null,"Peterson's solution for process ",(0,i.kt)("inlineCode",{parentName:"p"},"j")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"do{\n    flag[j] = true; // j wants to enter critical section\n    turn = i; //allow i to access first\n    while (flag[i] && turn == i);\n    // CRITICAL SECTION, e.g. counter++\n    flag[j] = false;\n    // reminder section\n} while (...);\n")),(0,i.kt)("p",null,"Mutexes is a spin block which will apply a wait time"),(0,i.kt)("h3",{id:"mutual-exclusion-requirement"},"Mutual exclusion requirement"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Peterson\'s solution for two processes satisfies all "critical section requirements" (mutual exclusion, progress, fairness)'),(0,i.kt)("li",{parentName:"ul"},"Only want one process on the thread accessing the critical section at once"),(0,i.kt)("li",{parentName:"ul"},"Mutual exclusion requirement: the variable turn can have at most one value at a time",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Both ",(0,i.kt)("inlineCode",{parentName:"li"},"flag[i]")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"flag[j]")," are ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," when they want to enter their critical section"),(0,i.kt)("li",{parentName:"ul"},"Turn is a ",(0,i.kt)("strong",{parentName:"li"},"singular variable")," that can store ",(0,i.kt)("strong",{parentName:"li"},"only one value")),(0,i.kt)("li",{parentName:"ul"},"Hence, either ",(0,i.kt)("inlineCode",{parentName:"li"},"while(flag[i] && turn == i)")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"while(flag[j] && turn == j)")," is true and at most one process can enter its critical section (mutual exclusion) ")))),(0,i.kt)("h3",{id:"progress-requirement"},"Progress requirement"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Progress: any process must be able to enter its critical section at some point in time",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'Process/threads in the "remaining code" do not influence access to critical sections'),(0,i.kt)("li",{parentName:"ul"},"If process ",(0,i.kt)("inlineCode",{parentName:"li"},"j")," does not want to enter section:")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"flag[j] == false\nwhile(flag[j] && turn == j) //will terminate for process i \n//i Enters critical section\n")),(0,i.kt)("h3",{id:"fairnessbounded-waiting"},"Fairness/bounded waiting"),(0,i.kt)("p",null,"Fairly distributed waiting times/processes cannot be made to wait indefinitely "),(0,i.kt)("h2",{id:"disable-interrupts"},"Disable interrupts"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Disable interrupts whilst executing a critical section and prevent interruption."),(0,i.kt)("li",{parentName:"ul"},"Disabling interrupts ",(0,i.kt)("em",{parentName:"li"},"may")," be appropriate on a single CPU machine."),(0,i.kt)("li",{parentName:"ul"},"This is insufficient on modern multi-core/multi processor machines")),(0,i.kt)("h2",{id:"atomic-instructions"},"Atomic Instructions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Implement ",(0,i.kt)("inlineCode",{parentName:"li"},"test_and_set()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"swap_and_compare()")," instructions as a set of atomic (= uninterruptible) instructions",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'Reading and setting the variables is done as one "complete" set of instructions'),(0,i.kt)("li",{parentName:"ul"},"If they are called simultaneously, they will be executed sequentially ")))),(0,i.kt)("h2",{id:"mutual-exclusion"},"Mutual Exclusion"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test_and_set()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"swap_and_compare()")," are hardware instructions and (usually) not directly accessible to the user. OS hides the bare metal from the user"),(0,i.kt)("li",{parentName:"ul"},"Other disadvantages include:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Busy waiting")," is used"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Deadlock")," is possible"))),(0,i.kt)("li",{parentName:"ul"},"The OS uses the hardware instructions to implement higher level mechanisms/instructions for mutual exclusion i.e mutexes and semaphores")))}p.isMDXComponent=!0}}]);