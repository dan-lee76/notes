"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[1160],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},36442:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={},l="10. Default class members, conversion constructors, conversion operators",i={unversionedId:"Year2/2006/10",id:"Year2/2006/10",title:"10. Default class members, conversion constructors, conversion operators",description:"07/03/23",source:"@site/docs/Year2/2006/10.md",sourceDirName:"Year2/2006",slug:"/Year2/2006/10",permalink:"/Year2/2006/10",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"9. Function pointers & Virtual/non-virtual functions",permalink:"/Year2/2006/09"},next:{title:"11. Casting and Operator overloading",permalink:"/Year2/2006/11"}},s={},c=[{value:"Default Member Functions",id:"default-member-functions",level:2},{value:"General Rules",id:"general-rules",level:3},{value:"Conversion Constructors",id:"conversion-constructors",level:2},{value:"Forcing explicit construction",id:"forcing-explicit-construction",level:3},{value:"Conversion Operators",id:"conversion-operators",level:2},{value:"Friends",id:"friends",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"10-default-class-members-conversion-constructors-conversion-operators"},"10. Default class members, conversion constructors, conversion operators"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"07/03/23")),(0,o.kt)("h2",{id:"default-member-functions"},"Default Member Functions"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Default constructor (no parameters needed)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Constructor which takes no parameters."),(0,o.kt)("li",{parentName:"ul"},"The generated default constructor is empty"),(0,o.kt)("li",{parentName:"ul"},"Why you can still create objects even when classes appear to have no constructors"),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"ClassName() = default;")," to stop it"))),(0,o.kt)("li",{parentName:"ol"},"Copy constructor (cone one object to another)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Used to initialise one object from another of the same type."),(0,o.kt)("li",{parentName:"ul"},"Returning object by value from a function"),(0,o.kt)("li",{parentName:"ul"},"A copy constructor is created by default"),(0,o.kt)("li",{parentName:"ul"},"Default behaviour copies each member in turn."))),(0,o.kt)("li",{parentName:"ol"},"An assignment operator (= operator)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Used when value of one object is assigned to another."),(0,o.kt)("li",{parentName:"ul"},"Create your own using operator overloading"),(0,o.kt)("li",{parentName:"ul"},"Takes a reference to the one we are getting values from"))),(0,o.kt)("li",{parentName:"ol"},"A destructor",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Created if you do not create one"),(0,o.kt)("li",{parentName:"ul"},"Gets called as members get destroyed"),(0,o.kt)("li",{parentName:"ul"},"Basic data types just get destroyed"),(0,o.kt)("li",{parentName:"ul"},"Pointers just get destroyed")))),(0,o.kt)("h3",{id:"general-rules"},"General Rules"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If need a copy constructor, or an assignment operator, then probably need to create the other, plus a destructor as well")),(0,o.kt)("h2",{id:"conversion-constructors"},"Conversion Constructors"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Conversion constructor is a constructor with one parameter"),(0,o.kt)("li",{parentName:"ul"},"Converts from one type of object to another"),(0,o.kt)("li",{parentName:"ul"},"Very similar to the copy constructor")),(0,o.kt)("h3",{id:"forcing-explicit-construction"},"Forcing explicit construction"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Providing a one-parameter constructor provides a conversion constructor"),(0,o.kt)("li",{parentName:"ul"},"Allows compiler to use it to convert to the type whenever it wants/needs to do so"),(0,o.kt)("li",{parentName:"ul"},"Use the keyword ",(0,o.kt)("inlineCode",{parentName:"li"},"explicit"))),(0,o.kt)("h2",{id:"conversion-operators"},"Conversion Operators"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Convert from a class into something else"),(0,o.kt)("li",{parentName:"ul"},"Uses operator overloading syntax"),(0,o.kt)("li",{parentName:"ul"},"Instead of an operator symbol, the new type name and ",(0,o.kt)("inlineCode",{parentName:"li"},"()")," are used")),(0,o.kt)("h2",{id:"friends"},"Friends"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Members can be private, protected or public"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Usually")," only class members can access private data"),(0,o.kt)("li",{parentName:"ul"},"Class can grant access to their ",(0,o.kt)("inlineCode",{parentName:"li"},"private")," member data and functions to their ",(0,o.kt)("inlineCode",{parentName:"li"},"friends")),(0,o.kt)("li",{parentName:"ul"},"The class still maintains control over which classes and functions have access"),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"friends")," of a class are treated as class members for access purposes - although they are not members"),(0,o.kt)("li",{parentName:"ul"},"Declare your friends within your class body and use the keyword ",(0,o.kt)("inlineCode",{parentName:"li"},"friend"))))}p.isMDXComponent=!0}}]);