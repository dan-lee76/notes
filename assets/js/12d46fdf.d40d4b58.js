"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[8632],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=i,h=u["".concat(s,".").concat(g)]||u[g]||p[g]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89850:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={},o="22.03.21 - Evolution Maintenance",l={unversionedId:"Year1/Software Engineer/22.03.21 - Evolution_Maintenance",id:"Year1/Software Engineer/22.03.21 - Evolution_Maintenance",title:"22.03.21 - Evolution Maintenance",description:"Change is Inevitable",source:"@site/docs/Year1/1003 - Software Engineer/22.03.21 - Evolution_Maintenance.md",sourceDirName:"Year1/1003 - Software Engineer",slug:"/Year1/Software Engineer/22.03.21 - Evolution_Maintenance",permalink:"/Year1/Software Engineer/22.03.21 - Evolution_Maintenance",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"22.03.15 - Advanced Version Control",permalink:"/Year1/Software Engineer/22.03.15 - Advanced Version Control"},next:{title:"22.03.28 - Agile vs Traditional",permalink:"/Year1/Software Engineer/22.03.28 - Agile vs Traditional"}},s={},c=[{value:"Change is Inevitable",id:"change-is-inevitable",level:2},{value:"3 Types of change",id:"3-types-of-change",level:3},{value:"Change is expensive",id:"change-is-expensive",level:2},{value:"Poor development practises",id:"poor-development-practises",level:3},{value:"Part 2 - Change Management",id:"part-2---change-management",level:2},{value:"Requirements Change Management",id:"requirements-change-management",level:3},{value:"Problem Analysis and Change Specifications",id:"problem-analysis-and-change-specifications",level:4},{value:"Change analysis and Costing",id:"change-analysis-and-costing",level:4},{value:"Change Implementation",id:"change-implementation",level:4},{value:"Emergency Changes",id:"emergency-changes",level:2},{value:"Refactoring",id:"refactoring",level:2},{value:"Starting Code Again",id:"starting-code-again",level:2},{value:"Part 3 - Is evolution really different to SE",id:"part-3---is-evolution-really-different-to-se",level:2},{value:"Change during development",id:"change-during-development",level:2},{value:"Change after delivery",id:"change-after-delivery",level:2}],d={toc:c};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"220321---evolution-maintenance"},"22.03.21 - Evolution Maintenance"),(0,i.kt)("h2",{id:"change-is-inevitable"},"Change is Inevitable"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"1bf208161bd178de59ddd569d91b8d8e.png",src:n(20068).Z,width:"474",height:"199"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Need to change code to keep it unique and not a copy cat when programming mobile games. "),(0,i.kt)("li",{parentName:"ul"},"Change is inevitable as company needs will change and so will the managers"),(0,i.kt)("li",{parentName:"ul"},"Some people will keep using the same software as the software is big and good. Companies are more likely to update their current software "),(0,i.kt)("li",{parentName:"ul"},"Building whole new piece of software is risky, errors might occur. ")),(0,i.kt)("h3",{id:"3-types-of-change"},"3 Types of change"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Fault Repairs - fix coding errors"),(0,i.kt)("li",{parentName:"ol"},"Environmental Adaption - Updates to new OS"),(0,i.kt)("li",{parentName:"ol"},"Functionality Addition - to meet business changes#")),(0,i.kt)("h2",{id:"change-is-expensive"},"Change is expensive"),(0,i.kt)("p",null,"This is costly, teams change, staff skills change, the age of the program and has to be redesigned more. Poor development practices"),(0,i.kt)("h3",{id:"poor-development-practises"},"Poor development practises"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Need to have good requirements as wont be able to tell whats changed. "),(0,i.kt)("li",{parentName:"ul"},"Low readability code makes it hard to figure out"),(0,i.kt)("li",{parentName:"ul"},"Undocumented designs means cant be understood"),(0,i.kt)("li",{parentName:"ul"},"Poor code = limited documentation")),(0,i.kt)("p",null,"Companies cut corners at development to speed up, but this creates cost"),(0,i.kt)("h2",{id:"part-2---change-management"},"Part 2 - Change Management"),(0,i.kt)("p",null,"Changes are new requirements which change everything\nHave to start with requirements change management\nNeed to think of all the knock on effects from the change"),(0,i.kt)("h3",{id:"requirements-change-management"},"Requirements Change Management"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Process of understanding and controlling changes to requirements"),(0,i.kt)("li",{parentName:"ul"},"Tracing which requirements have changed, in light of new requirements"),(0,i.kt)("li",{parentName:"ul"},"Need unique ids to they can be cross-referenced "),(0,i.kt)("li",{parentName:"ul"},"Impact on Specs/Designs can only be understood if specify which reqs and specs supported in the first space")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"31f783bb0b1be988dec6afc127e43303.png",src:n(95751).Z,width:"1030",height:"115"})),(0,i.kt)("h4",{id:"problem-analysis-and-change-specifications"},"Problem Analysis and Change Specifications"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Specification changes, doesn't get created again"),(0,i.kt)("li",{parentName:"ul"},"Analysing a specific proposed change request, see how it will change the spec")),(0,i.kt)("h4",{id:"change-analysis-and-costing"},"Change analysis and Costing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Trace changes to specs - estimate the size of change"),(0,i.kt)("li",{parentName:"ul"},"Estimate a cost - with project manager and design manager"),(0,i.kt)("li",{parentName:"ul"},"Decide whether to proceed given the cost")),(0,i.kt)("h4",{id:"change-implementation"},"Change Implementation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Change the requirements not coding"),(0,i.kt)("li",{parentName:"ul"},"Change all of the documentation"),(0,i.kt)("li",{parentName:"ul"},"End with a new system design")),(0,i.kt)("p",null,"Basically dont change arbitrarily, dont start with the code straight away.\nUnderstand the change and the cost. Then can decide whos paying and if its within the contracts term"),(0,i.kt)("h2",{id:"emergency-changes"},"Emergency Changes"),(0,i.kt)("p",null,"Often happens really quickly, and updating the code takes priority over documentation\nBest do document emergency changes\nLater, 'proper' solutions to changes can be designed for the next release\nReal danger, multiple subsequent emergency repairs occur, which mask the fixes of the original emergency repairs"),(0,i.kt)("h2",{id:"refactoring"},"Refactoring"),(0,i.kt)("p",null,"Look at the code, and realise they can do the code structure better"),(0,i.kt)("p",null,"Better to male intelligent change to the code than to just make a fix.\nMany ways the code can be improved:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Duplicate/similar code - should be a method to call"),(0,i.kt)("li",{parentName:"ul"},"Long methods - which should be broken down"),(0,i.kt)("li",{parentName:"ul"},"Data clumping - when patterns of functions -> a new class"),(0,i.kt)("li",{parentName:"ul"},"Speculative generality - speculative future code - remove it")),(0,i.kt)("p",null,"Concern is that all changes are deviations from the original plan - so all changes are reducing code quality"),(0,i.kt)("h2",{id:"starting-code-again"},"Starting Code Again"),(0,i.kt)("p",null,"Some point the cost of change gets high, can be cheaper to rebuild the code. Software company and client need to discuss long-term strategy"),(0,i.kt)("p",null,"Overtime messy code takes longer and longer to understand and read. Keep making more and more messes, driving the productivity ever further toward zero.\nSometimes its better to start again"),(0,i.kt)("h2",{id:"part-3---is-evolution-really-different-to-se"},"Part 3 - Is evolution really different to SE"),(0,i.kt)("h2",{id:"change-during-development"},"Change during development"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Happens as you show "),(0,i.kt)("li",{parentName:"ul"},"Cheaper because its before the maintenance phase actually"),(0,i.kt)("li",{parentName:"ul"},"More agile software engineering approaches are designed to get the client as involved as early as possible. So changes are part of the process")),(0,i.kt)("h2",{id:"change-after-delivery"},"Change after delivery"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This is the maintenance/delivery phase"),(0,i.kt)("li",{parentName:"ul"},"Changes now might mean significant 're-working'"),(0,i.kt)("li",{parentName:"ul"},"Change management is important for future maintenance"),(0,i.kt)("li",{parentName:"ul"},"Starting a new software engineering process from the top")),(0,i.kt)("p",null,"Software Evolution - Moving from V1 to V2 is just another iteration. Most projects are spiral-for-years."))}p.isMDXComponent=!0},20068:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/1bf208161bd178de59ddd569d91b8d8e-0c3cad17f1a760624938c7fd2ce1f3e7.png"},95751:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/31f783bb0b1be988dec6afc127e43303-cd3d03b480c6e7b4949f01b5a6dfe548.png"}}]);