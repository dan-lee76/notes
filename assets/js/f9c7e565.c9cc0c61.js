"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[9084],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},18768:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},l="7.  Monads II",i={unversionedId:"Year2/2003/07",id:"Year2/2003/07",title:"7.  Monads II",description:"27/02/23",source:"@site/docs/Year2/2003/07.md",sourceDirName:"Year2/2003",slug:"/Year2/2003/07",permalink:"/Year2/2003/07",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"6. Monads I",permalink:"/Year2/2003/06"},next:{title:"0.  Introduction",permalink:"/Year2/2006/00"}},p={},s=[{value:"Formal defenition of Monads",id:"formal-defenition-of-monads",level:2},{value:"Example - Maybe",id:"example---maybe",level:2},{value:"Example - Lists",id:"example---lists",level:2},{value:"Example - State",id:"example---state",level:2},{value:"Making ST into the monad state",id:"making-st-into-the-monad-state",level:3}],c={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"7--monads-ii"},"7.  Monads II"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"27/02/23")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"(>>=)")," - Sequencing  ... General time of the bind operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"do")," - "),(0,r.kt)("h2",{id:"formal-defenition-of-monads"},"Formal defenition of Monads"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"class Applicative m => Monad m where\n    (>>=) :: m a -> (a->m b) -> m b\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"return")," - used for class theory. Also used when handling monads in do"),(0,r.kt)("h2",{id:"example---maybe"},"Example - Maybe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Monad Maybe where\n    -- (>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b\n    Nothing >>= f = Nothing\n    Just x >>= f = f x\n")),(0,r.kt)("h2",{id:"example---lists"},"Example - Lists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Monad [] where\n    -- (>>=) :: [a] -> (a -> [b]) -> [b]\n    xs >>= f = concat (map f xs)\n--           = [y | x <- xs, y <- f x] (alternative)\n")),(0,r.kt)("h2",{id:"example---state"},"Example - State"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Most important monad in the course")),(0,r.kt)("p",null,"Can have any types of ",(0,r.kt)("inlineCode",{parentName:"p"},"State")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"type State = ..\ntype ST a = State -> (a, State)\n")),(0,r.kt)("p",null,"Can use ",(0,r.kt)("inlineCode",{parentName:"p"},"newtype")," for a single constructor."),(0,r.kt)("h3",{id:"making-st-into-the-monad-state"},"Making ST into the monad state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Monad ST where\n    -- return :: a -> ST a\n    return x = S(\\s -> (?,?))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"-- (>>=) :: ST a -> (a -> ST b) -> ST b\nst >>= f = S(\\s -> \n                let (x,s') = app st s\n                in app(f x) s')\n")))}m.isMDXComponent=!0}}]);