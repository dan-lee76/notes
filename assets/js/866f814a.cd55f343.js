"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[102],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(o,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(g,l(l({ref:t},c),{},{components:n})):a.createElement(g,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80887:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},l="17. Basics of Graphs",s={unversionedId:"Year2/2009/ADE/17",id:"Year2/2009/ADE/17",title:"17. Basics of Graphs",description:"- A graph is a set of nodes, or vertices, connected by edges",source:"@site/docs/Year2/2009/ADE/17.md",sourceDirName:"Year2/2009/ADE",slug:"/Year2/2009/ADE/17",permalink:"/Year2/2009/ADE/17",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"16.  Heuristics and dynamic programming",permalink:"/Year2/2009/ADE/16"},next:{title:"Coursework 02 Revision",permalink:"/Year2/2009/ADE/cw02"}},o={},p=[{value:"Implementation of graph",id:"implementation-of-graph",level:2},{value:"Adjacency Matrix",id:"adjacency-matrix",level:3},{value:"Disadvantages",id:"disadvantages",level:4},{value:"Adjacency List",id:"adjacency-list",level:3},{value:"Spanning Tree",id:"spanning-tree",level:2},{value:"Minimum Spanning Tree",id:"minimum-spanning-tree",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"17-basics-of-graphs"},"17. Basics of Graphs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A graph is a set of ",(0,r.kt)("em",{parentName:"li"},"nodes"),", or ",(0,r.kt)("em",{parentName:"li"},"vertices"),", connected by edges"),(0,r.kt)("li",{parentName:"ul"},"Graphs can be used to represent; networks, flow charts etc"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Directed")," - Edges have direction"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Undirected")," - Edges don't have direction. Can be represented as directed graphs where for each edge there is a corresponding edge"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Weighted")," - Edges have weights"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unweighted")," - "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cycle")," - Path from a vertex to itself"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Acyclic")," - If it does not have cycles")),(0,r.kt)("h2",{id:"implementation-of-graph"},"Implementation of graph"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Several approaches, but most common options are: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'Static indexed data structure "Adjacency Matrix"'),(0,r.kt)("li",{parentName:"ul"},'Dynamic data structure "Adjacency Lists"')))),(0,r.kt)("h3",{id:"adjacency-matrix"},"Adjacency Matrix"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Store node in an array - each node is associated with an integer (array index)"),(0,r.kt)("li",{parentName:"ul"},"Represent information about the edges using a 2d array where ",(0,r.kt)("inlineCode",{parentName:"li"},"array[i][j] == 1")),(0,r.kt)("li",{parentName:"ul"},"For weighted graphs, place weights in the matrix")),(0,r.kt)("h4",{id:"disadvantages"},"Disadvantages"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sparse graphs with few edges for number that are possible result in many zero entries in adjacency matrix",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Wastes space and makes many algorithms less efficient"))),(0,r.kt)("li",{parentName:"ul"},"Also, if the number of nodes in the graph may change, matrix representation is too inflexible")),(0,r.kt)("h3",{id:"adjacency-list"},"Adjacency List"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For every vertex, keep a list of adjacent vertices"),(0,r.kt)("li",{parentName:"ul"},"Keep a list of vertices, or keep vertices in a Map as keys and lists of adjacent vertices as values")),(0,r.kt)("h2",{id:"spanning-tree"},"Spanning Tree"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Input: Connected, undirected graph"),(0,r.kt)("li",{parentName:"ul"},"Output: A tree which connects all vertices in the graph using only the edges present in the graph")),(0,r.kt)("h3",{id:"minimum-spanning-tree"},"Minimum Spanning Tree"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Input: Connected, undirected, weighted graph"),(0,r.kt)("li",{parentName:"ul"},"Output: A spanning tree. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Connects all vertices in the graph using only the edges present in the graph"),(0,r.kt)("li",{parentName:"ul"},"Minimum is the sense that the sum of weights of the edges in the smallest possible for any spanning tree")))),(0,r.kt)("p",null,"..."))}u.isMDXComponent=!0}}]);