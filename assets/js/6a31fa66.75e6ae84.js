"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[9606],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),d=i,h=u["".concat(o,".").concat(d)]||u[d]||m[d]||r;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var c=2;c<r;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8032:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const r={},l="18. Revision",s={unversionedId:"Year2/2013/18",id:"Year2/2013/18",title:"18. Revision",description:"Introduction",source:"@site/docs/Year2/2013/18.md",sourceDirName:"Year2/2013",slug:"/Year2/2013/18",permalink:"/Year2/2013/18",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"17. Open Source Software",permalink:"/Year2/2013/17"},next:{title:"00",permalink:"/Year2/2014/00"}},o={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Java Collections Framework",id:"java-collections-framework",level:2},{value:"Implementation of OOP concepts in Java",id:"implementation-of-oop-concepts-in-java",level:2},{value:"UML",id:"uml",level:2},{value:"Object Oriented Analysis",id:"object-oriented-analysis",level:2},{value:"Object Oriented Design",id:"object-oriented-design",level:2},{value:"Activity Diagrams",id:"activity-diagrams",level:3},{value:"Sequence Diagrams",id:"sequence-diagrams",level:3},{value:"State Machine Diagrams",id:"state-machine-diagrams",level:3},{value:"Class Diagram",id:"class-diagram",level:3},{value:"Multiplicity Indicators",id:"multiplicity-indicators",level:3},{value:"Relationships",id:"relationships",level:3},{value:"Association",id:"association",level:5},{value:"Aggregation (<em>is part of</em> relationship)",id:"aggregation-is-part-of-relationship",level:4},{value:"Composition",id:"composition",level:4},{value:"Realisation",id:"realisation",level:4},{value:"Generalisation",id:"generalisation",level:4},{value:"Documenting Code",id:"documenting-code",level:2},{value:"OOD in Depth",id:"ood-in-depth",level:2},{value:"Client/Server Model and Terminology",id:"clientserver-model-and-terminology",level:3},{value:"Software Design - Responsibilities",id:"software-design---responsibilities",level:2},{value:"Collaborations",id:"collaborations",level:2},{value:"Software Hierarchies",id:"software-hierarchies",level:2},{value:"Subsystems",id:"subsystems",level:2},{value:"Protocols",id:"protocols",level:2},{value:"Software Design Patterns",id:"software-design-patterns",level:2},{value:"Creational Patterns",id:"creational-patterns",level:3},{value:"Structural Patterns",id:"structural-patterns",level:3},{value:"Behavioural Patterns",id:"behavioural-patterns",level:3},{value:"MVC",id:"mvc",level:3},{value:"Build Tools",id:"build-tools",level:2},{value:"GUIS",id:"guis",level:2},{value:"Peers GUI guidance",id:"peers-gui-guidance",level:3},{value:"Open Source Software",id:"open-source-software",level:2},{value:"Software Licence",id:"software-licence",level:3},{value:"Bobs Coding Conventions",id:"bobs-coding-conventions",level:2},{value:"Object-Oriented Software Design",id:"object-oriented-software-design",level:2},{value:"Programming in Java",id:"programming-in-java",level:2},{value:"UML",id:"uml-1",level:2},{value:"Design Patterns",id:"design-patterns",level:2},{value:"Open Source Software",id:"open-source-software-1",level:2}],p={toc:c};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"18-revision"},"18. Revision"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Core attributes of maintainable software "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Readable code"),(0,i.kt)("li",{parentName:"ul"},"Strong documentation"),(0,i.kt)("li",{parentName:"ul"},"Consistent variable/functions conventions"),(0,i.kt)("li",{parentName:"ul"},"Standard code layout"),(0,i.kt)("li",{parentName:"ul"},"Testability")),(0,i.kt)("p",null,"Main principles for developing software"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Maintainability benefits most from adhearing to simple guidelines"),(0,i.kt)("li",{parentName:"ul"},"Maintainability is not an afterthought should be addressed from the very beginning of a development project"),(0,i.kt)("li",{parentName:"ul"},"Some violation are worse than others; the more a software system compiles with the guidelines for more maintainable it is")),(0,i.kt)("p",null,"Software maintenance involves - The process for managing and executing software maintenance activities is described. Also need to consider how we can reduce the effort of maintenance"),(0,i.kt)("p",null,"Main Categories"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Corrective maintenance")," - Finding and fixing errors in the system"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Adaptive Maintenance")," - The system has to be adapted to change in the environment in which it operates"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Perfective + Preventive Maintenance")," - Users of the system have new or changed requirements. Ways identified to increase the quality or prevent future bugs.")),(0,i.kt)("h2",{id:"basic-concepts"},"Basic Concepts"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Abstraction")," - Simple things like objects represent more complex underlying code and data",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cannot be used to instantiate objects but references to abstract classes are legal."),(0,i.kt)("li",{parentName:"ul"},"Classes can have instance methods that implement a default behaviour. May contain non-final variables"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Encapsulation")," - Ability to protect some components of the object from external access. ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Making public variables private"),(0,i.kt)("li",{parentName:"ul"},"Hiding the implementation details of a class"),(0,i.kt)("li",{parentName:"ul"},"Helps with program maintenance (doesn't affect other classes)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Inheritance")," - Ability for a class to extend or override functionality of another class"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Polymorphism")," - The provision of a single interface to entities of different types. ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Compile time - Method overloading - Same name co-exists in the same class but they must have different method signatures"),(0,i.kt)("li",{parentName:"ul"},"Run time - Method overriding - Same name is declared in super and sub class"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"this")," - Refers to the implicit parameter inside the class"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Constructors")," - Invoked using the ",(0,i.kt)("inlineCode",{parentName:"li"},"new")," operator"),(0,i.kt)("li",{parentName:"ul"},"Passing Data - Can either pass by value or pass by reference"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Overloaded Methods")," - Methods of the same class that have the same name but different numbers/types. Compiler will treat them as completely different methods"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Static Field")," - Shared by all objects of the class. Normally stored with the class code. Not initialised in constructors."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Non-Static Field")," - Belongs to an individual object"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Static Methods")," - Access and manipulate class statics fields. Belongs to the class, not an instance of it. Cannot access instance fields or call methods of the class."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instance Methods")," - Can access all fields and call all methods of their class (Static and non-static).")),(0,i.kt)("h2",{id:"java-collections-framework"},"Java Collections Framework"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Collection is an object that represents a group of objects. This contains data structures and algorithmic operations"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Collection")," - Something that holds a dynamic collection of objects"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Map")," - Defines mapping between keys and objects"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Iterable")," - Collections are able to return an iterator object that can scan over the contents of a collection one object at a time"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Queue")," - Represents FIFO queues and LIFO stacks"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Deque")," - Represents a double ended queue"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Set")," - A collection that cannot contain duplicate elements"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"List")," - An ordered sequence of elements that allows duplicate elements"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Typesafe collection with 'Generics'")," - Classes support generics by allowing a type variable to be included in their declaration; type are declared for the reference and constructor. Cannot type a collection using a primitive type"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"TreeSet Class")," - Provides an implementation of the set interface that uses a tree for storage (ascending order)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"HashMap Class")," - Hash table implementation of the map interface. The implementation provides all of the optional map operations, and permits null values and the null key")),(0,i.kt)("h2",{id:"implementation-of-oop-concepts-in-java"},"Implementation of OOP concepts in Java"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Aggregation")," - Object of class B is ",(0,i.kt)("strong",{parentName:"p"},"part of")," an object of class A but the object of class B can be shared and if the object of class A is deleted, class B is not deleted\n",(0,i.kt)("img",{src:a(6089).Z,width:"495",height:"135"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Composition")," - An object of class A ",(0,i.kt)("strong",{parentName:"p"},"owns")," an object of class B and the object of class B cannot be shared and if the object of class A is deleted, the object of class B is also deleted\n",(0,i.kt)("img",{src:a(1491).Z,width:"603",height:"135"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Inheritance")," - Forming new classes based on existing ones. (is-a relationship)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"superclass")," - parent class being extended"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"subclass")," - child class that inherits behaviour from the parent class")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Interfaces")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Methods are implicitly abstract, cannot have implementations but rather are implemented. Is an abstract type that is used to describe a behaviour that classes must implement. Implements an interface must implement all of the non-default methods describe in the interface. Less restrictive when it comes to inheritance ")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/Year2/2013/03#java_versions"},"Java Changes")),(0,i.kt)("h2",{id:"uml"},"UML"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A specification defining a graphical language for visualising, specifying, constructing and documenting the artefacts of distributed object systems")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Advantages")," - Enhances communication and ensures the right communication. Captures logical software independent. Helps to manage the complexity. Enables reuse of design"),(0,i.kt)("h2",{id:"object-oriented-analysis"},"Object Oriented Analysis"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use Case Diagrams")," - Set of actions that some system(s) should or can perform in collaboration with one or more external users of the system or systems"),(0,i.kt)("h2",{id:"object-oriented-design"},"Object Oriented Design"),(0,i.kt)("h3",{id:"activity-diagrams"},"Activity Diagrams"),(0,i.kt)("p",null,"Graphical representations of workflows of step wise activities and actions related to an individual use case or across many use cases. Supports representation of parallel behaviour\n",(0,i.kt)("img",{src:a(8824).Z,width:"643",height:"702"})),(0,i.kt)("h3",{id:"sequence-diagrams"},"Sequence Diagrams"),(0,i.kt)("p",null,"Temporal representation of objects and their interactions\n",(0,i.kt)("img",{src:a(4757).Z,width:"902",height:"439"})),(0,i.kt)("h3",{id:"state-machine-diagrams"},"State Machine Diagrams"),(0,i.kt)("p",null,"Show the possible states of a single object. Only reactive objects require a state machine diagram\n",(0,i.kt)("img",{src:a(6397).Z,width:"1205",height:"762"})),(0,i.kt)("h3",{id:"class-diagram"},"Class Diagram"),(0,i.kt)("p",null,"Shows the existence of classes and their structures and relationship in the logical view of a system"),(0,i.kt)("p",null,"Depicted as rectangles with three compartments; class name, attributes(), operations "),(0,i.kt)("p",null,"Associations between classes - Associated if an instance of a class A (source) has to know about an instance of class B (target class)"),(0,i.kt)("h3",{id:"multiplicity-indicators"},"Multiplicity Indicators"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null}))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"exactly 1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"*"),(0,i.kt)("td",{parentName:"tr",align:null},"unlimited number (zero or more)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..*"),(0,i.kt)("td",{parentName:"tr",align:null},"zero or more")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1..*"),(0,i.kt)("td",{parentName:"tr",align:null},"one or more")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..1"),(0,i.kt)("td",{parentName:"tr",align:null},"zero or 1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3..7"),(0,i.kt)("td",{parentName:"tr",align:null},"specified range (3-7)")))),(0,i.kt)("h3",{id:"relationships"},"Relationships"),(0,i.kt)("h5",{id:"association"},"Association"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reference based relationship between two classes")),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(9806).Z,width:"1407",height:"344"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dependency")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Created when you receive a reference to a class as part of a particular method")),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(2259).Z,width:"1532",height:"344"})),(0,i.kt)("h4",{id:"aggregation-is-part-of-relationship"},"Aggregation (",(0,i.kt)("em",{parentName:"h4"},"is part of")," relationship)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Same as association and often seen as redundant relationship. Used when an object logically pr physically contains other; the container is called 'aggregate'; the components of the aggregate can be shared with others")),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(3888).Z,width:"1419",height:"378"})),(0,i.kt)("h4",{id:"composition"},"Composition"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Relates to instance recreational responsibility "),(0,i.kt)("li",{parentName:"ul"},"When class B is composed by class A, class A instance owns the creation of controls lifetime of instance of class B")),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(138).Z,width:"1456",height:"301"})),(0,i.kt)("h4",{id:"realisation"},"Realisation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Specialised abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other representing an implementation (the client) of the specification")),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(8094).Z,width:"1456",height:"169"})),(0,i.kt)("h4",{id:"generalisation"},"Generalisation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Directed relationship between a more general classifier (subclass) and a more specific classifier (subclass)")),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(5244).Z,width:"1456",height:"290"})),(0,i.kt)("h2",{id:"documenting-code"},"Documenting Code"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Source code comments are essential for maintenance as they are key to having another person be able to understand what you have done. There are some semi-automatic services such as Doxygen and Javadoc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"IDEs")," - Many tools are built into IDEs, and is great for helping to create maintainable code including in built testing help")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Useful Javadoc Tags")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@param")," - explain a method parameter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@return")," - to annotate a method return value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@throws"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"@exception")," - for your exception handling"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@deprecated")," - bits of the code you no longer use"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{@code}")," - puts syntax in your documentation ")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Version Control")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Allows you to recover old versions and examine source code history."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Repository")," - Stores a file system tree. Remembers every change "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Concurrency Management")," - Simultaneous occurrence; coincidence. Ways to deal with concurrency; lock-modify-unlock, copy-modify-merge "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Lock-Modify-Unlock Solution")," - Serialisation. There is no protection for breaking dependencies between files, false sense of security. For all types"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Copy-modify-merge")," - For text file. Users work in parallel, concurrent changes are automatically merged, conflicts can generally be managed"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Working Copy")," - Regular directory tree, wont do anything unless told to.")),(0,i.kt)("h2",{id:"ood-in-depth"},"OOD in Depth"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Object")," - Set of closely related data and methods that operate on the data (or services). Knows what it is, its responsibilities and how to fulfil them. Has a role to play in the system and knows how to do it"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method")," - Function performed by an object as a result of a valid message (Verbs)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Signature")," - Method name, parameters and types, values returned"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Class")," - Set of objects that share same behaviour (Nouns)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instance")," - Member of a class")),(0,i.kt)("h3",{id:"clientserver-model-and-terminology"},"Client/Server Model and Terminology"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"OO model is a client/server model"),(0,i.kt)("li",{parentName:"ul"},"Object collaborations are one way",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Client object requests service"),(0,i.kt)("li",{parentName:"ul"},"Server object receives request and provides service"),(0,i.kt)("li",{parentName:"ul"},"Interactions is defined by a contract"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Contract")," - Client/Server are roles that objects play. Can take either or both roles at different times. Concepts keep track of the relationship between 2 objects at a specific time")),(0,i.kt)("h2",{id:"software-design---responsibilities"},"Software Design - Responsibilities"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Knowledge maintained by object"),(0,i.kt)("li",{parentName:"ul"},"Actions an object can perform"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"System Intelligence")," - What system knows, what it it can perform."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Class Intelligence"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Server View")," - What class knows, what actions it can perform"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Client View")," - How many other classes does the class know. How much does it need to know about those server classes."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Centralised Intelligence"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Taken to extreme - One object incorporates most/all of system intelligence"),(0,i.kt)("li",{parentName:"ul"},"Centralised control - Top-down design with the main program under complete control and other objects serving as simple data structure entities"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Advantage")," - Easier to get initial understanding of overall control flow"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Disadvantage")," - Hard-wires system behaviour. Integrates multiple design decisions into a single class. Less code/design sharing, big issue when working with teams"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Distributed Intelligence")," - Distribute it evenly as possible. Minimise number of intelligent classes, and aim is all classes are equally intelligent")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Is-a-Kind-of (Inheritance)")," - Look for parent/child relationship. Shared attributes or behaviour can imply"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Is-Part-Of(Composition)")," - No shared behaviour implied. Defines an object hierarchy, not a class hierarchy. Object often composed of parts and has responsibilities for those parts."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Unassigned Responsibilities")," - Difficulties in assigning  responsibilities can occur because a class is missing, or responsibility could be assigned to more than other class."),(0,i.kt)("h2",{id:"collaborations"},"Collaborations"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Composite Objects")," - Each component has a different role to play in composite(responsible for parts). Provides services to composite, but don't know about it. Composite collaborations with its components "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Container Objects")," - Elements in a container are functionally identical, all serve same role. Containers may need to collaborate with their elements"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Recording Collaborations")," - Write collaborating server classes. If client responsibility needs 2 collaborations with same server class, write twice. If responsibility requires collaboration with another instance of same (or parent) class, includes it"),(0,i.kt)("h2",{id:"software-hierarchies"},"Software Hierarchies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Hierarchy Graphics")," - Extend notation slightly to explicitly identify abstract classes. (Fill in top left corner of a box of an abstract class)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Multiple Inheritance")," - Can also be included in a hierarchy graph"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Venn Diagrams")," - Can represent responsibilities of a class as a set, so shared responsibilities show up in a venn diagram.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Guidelines")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Model",(0,i.kt)("em",{parentName:"li"},"is-kind-of")," or ",(0,i.kt)("em",{parentName:"li"},"is-type-of")," hierarchies"),(0,i.kt)("li",{parentName:"ol"},"Factor common responsibilities as high as possible"),(0,i.kt)("li",{parentName:"ol"},"Don't allow abstract classes to inherit from concrete ones"),(0,i.kt)("li",{parentName:"ol"},"Eliminate non-functional classes")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Is-kind-of Hierarchy")," - Class A is derived from B, only if supports all its responsibilities"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Abstract Classes in Hierarchy")," "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Abstract class behaviour - Implementation-independent"),(0,i.kt)("li",{parentName:"ul"},"Concrete class behaviour - implementation-dependent"),(0,i.kt)("li",{parentName:"ul"},"Characterisation is violated if an abstract class inherits from a concrete one")),(0,i.kt)("p",null,"Eliminate Classes - Classes that add no new functionality are normally eliminated. Could have no new responsibilities, but still add functionality. "),(0,i.kt)("h2",{id:"subsystems"},"Subsystems"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Initial design - classes, responsibilities, collaborations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Secondary stage - analyse hierarchies, identify contract")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"New goals - simplify patterns of communication, identify subsystems, design good interface to subsystems and classes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Subsystems")," - Groups of classes that collaborate amount themselves to support a set of contracts")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"From outside")," - The classes work closely together to provide a clearly defined unit of functionality")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"From inside")," - Classes can have some complex interrelationships of collaborations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Superclass")," - Groups a set of classes with identical responsibilities")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Subsystem")," - Group of classes with different responsibilities that can work together to fulfil a greater responsibilities. Can also support contracts. Used early in design, start out a class. "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Contract used for collaboration becomes a subsystem contract. This delegates contact to the class that supports it"),(0,i.kt)("li",{parentName:"ul"},"Subsystems are also ",(0,i.kt)("strong",{parentName:"li"},"conceptual")," - they don't exist at execution time but their classes do. Don't directly fulfil responsibilities "),(0,i.kt)("li",{parentName:"ul"},"Identifying them can be done by looking for strongly coupled classes(how much they depend on each other. "))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Coupling")," - Frequently used collaborations. A web of many collaborations among a set of classes that are connected to reset of the graph with fewer collaborations"))),(0,i.kt)("p",null,"Simplifying Interactions - Area of complexity in graph should be focus of effort. Proposed change should simplify graph"),(0,i.kt)("h2",{id:"protocols"},"Protocols"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Protocols")," - Final step of design first step of implementation, set of signatures to which a class responds. Goal is to produce precise and complete design"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Make them general")," - Protocol for a contract must cover the full generality of each responsibility in contract. Simple responsibility may only need one signature. General responsibility may need many signature"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method Names")," - Need to preserve encapsulation and general class utility. Each method name should imply a unique intent, use same name everywhere for conceptual operation. Classes that fulfil same responsibility should inherit it"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Reasonable Defaults")," - Classes can be reused if protocols are designed to reflect their different uses more accurately "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters")," - Order of parameters is based on probability that client will want to specify parameters"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return Values")," - Do not just return ",(0,i.kt)("inlineCode",{parentName:"li"},"void")," methods. Instead specify ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")," by default. ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," for success and ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," if error occurs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Hierarchy Graphs")," - Single page system overview is highly desirable, includes all hierarchy 'roots' on this page and all subsystems, include all first level children. ")),(0,i.kt)("h2",{id:"software-design-patterns"},"Software Design Patterns"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Name - Usable handle to describe a design problem"),(0,i.kt)("li",{parentName:"ol"},"Problem - When to apply a pattern"),(0,i.kt)("li",{parentName:"ol"},"Solution - Describes the elements that make up the design and the relaitonship"),(0,i.kt)("li",{parentName:"ol"},"Consequences - Describes the result and trade-offs of applying the pattern")),(0,i.kt)("p",null,"Purpose - Reflects what the pattern does\nScope - Specifies whether the pattern applies to classes or objects"),(0,i.kt)("h3",{id:"creational-patterns"},"Creational Patterns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Abstract factory  - Interface to create related objects without declaring the concrete class"),(0,i.kt)("li",{parentName:"ul"},"Builder - The same construction process can create different representations"),(0,i.kt)("li",{parentName:"ul"},"Factory Method - Defers instantiation to sub classes"),(0,i.kt)("li",{parentName:"ul"},"Prototype - Create new objects by copying the prototype"),(0,i.kt)("li",{parentName:"ul"},"Singleton - Ensures that one and only one instance of a class is created")),(0,i.kt)("h3",{id:"structural-patterns"},"Structural Patterns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Adaptor - Provides compatible interfaces for classes that couldn't work together otherwise"),(0,i.kt)("li",{parentName:"ul"},"Bridge - Decoupling of abstraction and implementation so that the two can be independent"),(0,i.kt)("li",{parentName:"ul"},"Composite - Put objects into a tree structure to represent the hierarchies"),(0,i.kt)("li",{parentName:"ul"},"Decorator - Lets individual instances have addition of dynamically adding new function"),(0,i.kt)("li",{parentName:"ul"},"Facade - Providing a unified interface to a set of interfaces"),(0,i.kt)("li",{parentName:"ul"},"Flyweight - Use sharing to support large numbers of complex objects"),(0,i.kt)("li",{parentName:"ul"},"Proxy - Provide a placeholder for another object to access its controls")),(0,i.kt)("h3",{id:"behavioural-patterns"},"Behavioural Patterns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Chain of responsibility - Give more than one object the change to handle a request"),(0,i.kt)("li",{parentName:"ul"},"Command - Encapsulate a request as an object"),(0,i.kt)("li",{parentName:"ul"},"Interpreter - Convert problems expressed in natural langue into a representation"),(0,i.kt)("li",{parentName:"ul"},"Iterator - Access to objects without exposing underlying representation"),(0,i.kt)("li",{parentName:"ul"},"Mediator - Promotes loose coupling by preventing objects from referring to each other"),(0,i.kt)("li",{parentName:"ul"},"Memento - Capture and display an objects internal state"),(0,i.kt)("li",{parentName:"ul"},"Observer - Define a one to many relationship so that when one object changes state, all its dependants are notified."),(0,i.kt)("li",{parentName:"ul"},"State - Allow an object to alter its behaviour when its internal state changes"),(0,i.kt)("li",{parentName:"ul"},"Strategy - Define and encapsulate a family of algorithm. Let the algorithm vary independently of who is using it"),(0,i.kt)("li",{parentName:"ul"},"Template Method - Define the skeleton of an algorithm, and let sub classes redefine certain steps without changing the structure of the algorithm"),(0,i.kt)("li",{parentName:"ul"},"Visitor - Define a new operation without changing the classes")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Singleton")," - Instance of a class exist in the system. Ensure a class only has one instance, and provide a single point of access to it. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Benefits")," - Controlled access to sole instance, reduced namespace, can transform into concrete factory. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Challenges")," - Concurrent requests, threading.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Factory Patterns")," - Abstract and encapsulates the object instantiation process. Can save you from awkward dependencies in OOD by letting you define an interface for creating an object.\n",(0,i.kt)("strong",{parentName:"p"},"Abstract Factories")," - Factory of factories. Used when you need an interface for creating related objects without specifying their classes. Declare an interface for operations that create abstract products\n",(0,i.kt)("strong",{parentName:"p"},"Concrete Factory")," - Implements operations to create concrete products\n",(0,i.kt)("strong",{parentName:"p"},"Abstract Product")," - Declares an interface for a type of product objects\n",(0,i.kt)("strong",{parentName:"p"},"Product")," - Defines a product to be created by the corresponding concrete factory; implements the abstract product interface\n",(0,i.kt)("strong",{parentName:"p"},"Client")," - Uses the interfaces declared by the abstract factory and abstract product classes"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Adaptor Pattern (Structural)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Class adaptor - Relies on multiple inheritance"),(0,i.kt)("li",{parentName:"ul"},"Object adaptor - Relies on object composition")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Observer Pattern")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Used when there is one-to-many relationship between objects such as if one object is modified, its dependent objects are to be notified automatically. ")),(0,i.kt)("h3",{id:"mvc"},"MVC"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Model(Data Interface)")," - Communicates with data source to read and write data. Catches relevant notifications and updates"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"View (Visual Representation of Data)")," - Requests model for data and prevents it in a user-friendly visual display. Tells controller what happened"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Controller (User Interface)")," - Listens to the user in order to request data or state in the GUI and notify the model or view accordingly. Inform the model what to do"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Benefits")," - Organisation of code, ease of development, and flexibility")),(0,i.kt)("h2",{id:"build-tools"},"Build Tools"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Maven - Follows a lifecycle using phases, with each life cycle. Validate -> Compile -> Test -> Package -> Install -> Eploy",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Default")," - Your normal life cycle"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Clean")," - issued during the mvn cleanup command"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Site")," - issued during the mvn site command"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"POM")," - Uses project objects model which contains config"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Gradle")," - Replaces XML in favour for ",(0,i.kt)("em",{parentName:"li"},"groovy"),". Can implement control flow. More cleanly accomplishes required tasks of a typical development project, from compilation through testing and development")),(0,i.kt)("h2",{id:"guis"},"GUIS"),(0,i.kt)("h3",{id:"peers-gui-guidance"},"Peers GUI guidance"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Keep it simple"),(0,i.kt)("li",{parentName:"ol"},"Create consistency and use common elements"),(0,i.kt)("li",{parentName:"ol"},"Be purposeful in page layout"),(0,i.kt)("li",{parentName:"ol"},"Strategically use colour and texture"),(0,i.kt)("li",{parentName:"ol"},"Use typography to create hierarchy and clarity"),(0,i.kt)("li",{parentName:"ol"},"Make sure that the system communicates whats happening"),(0,i.kt)("li",{parentName:"ol"},"Think about the defaults")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Stage")," - Think of it as an application windows, depends on OS\n",(0,i.kt)("strong",{parentName:"p"},"Scene")," - Equivalent to a content pane"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Lambda")," - Short blocks of code which take in parameters and return a value\nFrom:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'btn.setOnAction(new EventHandler<ActionEvent>() {\n    @Override\n    public void handle(ActionEvent event) {\n        System.out.println("Bye!");\n        System.exit(0);\n    }\n})\n')),(0,i.kt)("p",null,"To:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'btn.setOnAction(e->{\n    System.out.println("Bye!");\n    System.exit(0);\n})\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/Year2/2013/14"},"Built-in Layout Panes")),(0,i.kt)("h2",{id:"open-source-software"},"Open Source Software"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"JAR File - Post-compilation"),(0,i.kt)("li",{parentName:"ul"},"API - Pre-compilation\nOpen source software is free software that uses a license approved by the Open Source Imitative from their list of approved open source licenses")),(0,i.kt)("h3",{id:"software-licence"},"Software Licence"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Apache Licence 2.0 > Permissive Licence"),(0,i.kt)("li",{parentName:"ul"},'BSD 3-Clause "New" or "Revised" licence > Permissive licence'),(0,i.kt)("li",{parentName:"ul"},"GNU General Public Licence (GPL) > CopyLeft licence"),(0,i.kt)("li",{parentName:"ul"},"MIT Licence > Permissive Licence"),(0,i.kt)("li",{parentName:"ul"},"Mozilla Public Licence 2.0 > Permissive Licence ")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Permissive Licence")," - Free-software license, carries only minimal restrictions on how the software can be used, modified etc. Could edit and make it closed source afterwards. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Copyleft Licence")," - Freedom to modify and use it, but when distributing, have to keep the same freedoms"),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"spreadsheet-revision"},"Spreadsheet Revision"),(0,i.kt)("h2",{id:"bobs-coding-conventions"},"Bobs Coding Conventions"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"All methods are 75 lines or less. Visible on a single screen/page."),(0,i.kt)("li",{parentName:"ol"},"No methods shall use more than ",(0,i.kt)("em",{parentName:"li"},"five")," levels of indentation"),(0,i.kt)("li",{parentName:"ol"},"No line of code shall exceed 80 characters"),(0,i.kt)("li",{parentName:"ol"},"All class variables start with the two character sequence ",(0,i.kt)("inlineCode",{parentName:"li"},"m_")," . Symbolic constants should be written in  ",(0,i.kt)("inlineCode",{parentName:"li"},"ALL_CAPITALS")),(0,i.kt)("li",{parentName:"ol"},"All class variables are accessed through accessor methods  (getters and setters)"),(0,i.kt)("li",{parentName:"ol"},"Accessor methods come at the top of both header files and implementation files"),(0,i.kt)("li",{parentName:"ol"},"All member class variables are private"),(0,i.kt)("li",{parentName:"ol"},"Private methods begin with a lower-case letter whereas public methods begin with an upper-case"),(0,i.kt)("li",{parentName:"ol"},"In general, methods should not take more than five parameters"),(0,i.kt)("li",{parentName:"ol"},"Do not use numbers in your code, but rather symbolic constants ")),(0,i.kt)("h2",{id:"object-oriented-software-design"},"Object-Oriented Software Design"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Inheritance")," - Class can be a specialisation of another class. Use ",(0,i.kt)("inlineCode",{parentName:"li"},"extends"),". ",(0,i.kt)("em",{parentName:"li"},"IS-AN")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Abstraction")," - Simple things like objects represent more complex underlying code and data. Cannot be used to instantiate objects"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Encapsulation")," - Hiding implementation details of a class. (Use getters and setters)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Subclass")," - Child class that inherits behaviour from the parent class"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Superclass")," - Parent class being extended"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Polymorphism")," - Means many forms. Not fixed to specific types"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Overloading")," - Methods of the same class that have the same name but different numbers/types. Compiler will treat them as completely different methods"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Aggregation (is-part-of collection)")," - Object of B is ",(0,i.kt)("strong",{parentName:"li"},"part of")," an object of class A. But class b can be shared"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Composition (is-part-of as composite)")," - Class A owns class B and cannot be shared, and if A is deleted, so is B"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method Overloading")," - Same name co-exists in the same class but they must have different method signatures"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method Overriding")," - Same name is declared in super and sub class"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Subsystems")," - Groups of classes that collaborate amount themselves to support a set of contracts"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Client")," - Requests services from server"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Server")," - Receives request and provides service"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Composite")," - Each component has a different role to play in composite"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Container")," - Elements in a container are functionally identical")),(0,i.kt)("h2",{id:"programming-in-java"},"Programming in Java"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Concurrency")," - Simultaneous occurrence")),(0,i.kt)("h2",{id:"uml-1"},"UML"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Structural Diagram")," - Emphasises the static structure of the system using objects, attributes, operations and relationships (Class diagrams and composite structure diagrams)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Behavioural Diagram")," - Emphasise the dynamic behaviour of the system by showing collaborations among objects and changes to the internal states of objects (sequence diagrams, activity diagrams, state machine diagrams)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Class Diagrams")," - "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Use Case Diagram")," - Describe set of actions that some system(s) should or can perform in collaboration with one another"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Activity Diagram")," - Graphical representations of workflows of step wise activities and actions related to an individual use case."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Sequence Diagram")," - Temporal representation of objects and their interactions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"State Machine Diagram")," - Possible states of a single object, how they transition between one another etc"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Association")," - Reference based relationship between two classes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dependency")," - Created when you receive a reference to a class as part of a particular method"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Aggregation")," - Like association, but form of a list"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Composition")," - Relates to instance recreational responsibility (uses ",(0,i.kt)("inlineCode",{parentName:"li"},"new")," and creates new reference to object)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Realisation")," - One representing a specification, and the other representing an implementation of the specification (use of ",(0,i.kt)("inlineCode",{parentName:"li"},"implements"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Generalisation")," - Directed relationship between a more general classifier (subclass) and a more specific classifier(subclass). (2 classes ",(0,i.kt)("inlineCode",{parentName:"li"},"extends")," from another one)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Subsystems")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Wirfs-Brock et al")," - Person who created some design, call for language features that limit outside influence to the behaviour of a class"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Class Cards"))),(0,i.kt)("h2",{id:"design-patterns"},"Design Patterns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Creational")," - Related to the creation of objects (Singleton and Factory)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Structural")," - Adapter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Behavioural")," - Oberserver"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Factory")," - Creates/manufactures other objects. Don't need to know which precise sub-class it will create, factory decides"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Observer")," - Tell me when something happens"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Singleton")," - Create one instance when needed. Uses ",(0,i.kt)("inlineCode",{parentName:"li"},"static")," method"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Strategy")," - Lets another object modify the behaviour of an object"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Iterator")," - Lets you iterate through the contents"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"MVC")," - Model, View, Controller. Helps organise code, ease development and flexibility"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Adaptor")," - Provides compatible interfaces for classes that couldn't work together oteherwise ")),(0,i.kt)("h2",{id:"open-source-software-1"},"Open Source Software"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Permissive Licence")," - Free-software license, carries only minimal restrictions on how the software can be used, modified etc. Could edit and make it closed source afterwards."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Copyleft Licence")," - Freedom to modify and use it, but when distributing, have to keep the same freedoms")))}m.isMDXComponent=!0},6089:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221010172148-3a14c5b16e80e0237192eed2e6b91441.png"},1491:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221010172329-6c055760c8cf30cbf51c70e0e8c0cefb.png"},8824:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221017171225-9f086db09b7a5d0e05f2414faabb99bc.png"},4757:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221017171401-e3b242660fe78b7c512c0f2d09837123.png"},6397:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221017171431-7102780534168f8eba0b70e79f578208.png"},9806:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221017174533-5244ecf1215361ee101b07f8c1056b26.png"},2259:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221017174550-9fd1695874e753b2e17290207444cdf9.png"},3888:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221017174611-00dd57d7f1a23a447f1ad87dc8278b11.png"},138:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221017174630-91494d5124e26879d54d898d52b35cdc.png"},8094:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221017174837-c9bd2b624e6a670638500828d0841863.png"},5244:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/20221017174852-9090165e51fd5f084a076e77f81ad7a8.png"}}]);