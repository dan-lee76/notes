"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[4388],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,g=u["".concat(p,".").concat(d)]||u[d]||c[d]||s;return n?a.createElement(g,i(i({ref:t},m),{},{components:n})):a.createElement(g,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5754:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),i=["components"],o={},p=void 0,l={unversionedId:"Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions",id:"Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions",title:"22.02.16 - List Comprehensions",description:"Set Comprehensions",source:"@site/docs/Year1/1009 - Programming Paradigms/Haskell/22.02.16 - List Comprehensions.md",sourceDirName:"Year1/1009 - Programming Paradigms/Haskell",slug:"/Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions",permalink:"/Year1/Programming Paradigms/Haskell/22.02.16 - List Comprehensions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year1",previous:{title:"Functions",permalink:"/Year1/Programming Paradigms/Haskell/22.02.14 - Defining Functions"},next:{title:"22.02.21 - Recursive Functions",permalink:"/Year1/Programming Paradigms/Haskell/22.02.21 - Recursive Functions"}},m={},c=[{value:"Set Comprehensions",id:"set-comprehensions",level:2},{value:"Dependant generators",id:"dependant-generators",level:2},{value:"Guards",id:"guards",level:2},{value:"The zip function",id:"the-zip-function",level:2},{value:"String Comprehensions-",id:"string-comprehensions-",level:2}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"set-comprehensions"},"Set Comprehensions"),(0,s.kt)("p",null," Comprehension notation can be used to construct new sets from old sets\n",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"x"),(0,s.kt)("mn",{parentName:"msup"},"2")),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),(0,s.kt)("mi",{parentName:"mrow"},"x"),(0,s.kt)("mo",{parentName:"mrow"},"\u2208"),(0,s.kt)("mn",{parentName:"mrow"},"1..5")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{x^2 | x \\in {1..5}}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u2223"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2208"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},"1..5")))))))),(0,s.kt)("p",null," In haskell can be done with list comprehension"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},"[x^2 | x <- [1..5]]\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The expression ",(0,s.kt)("inlineCode",{parentName:"li"},"x <- [1..5]")," is a generator, states how to generate values for x. Can be used multiple times separated by commas."),(0,s.kt)("li",{parentName:"ul"},"Changing the order of the generators changes the order of the elements in the final list."),(0,s.kt)("li",{parentName:"ul"},"Multiple generators are like nested loops, with later generators being more deeply nested loops")),(0,s.kt)("h2",{id:"dependant-generators"},"Dependant generators"),(0,s.kt)("p",null,"Later generators can depend on the variables that are introduced by earlier generators\nUsing a dependent generator we can define the library function that concatenates a lists of lists"),(0,s.kt)("h2",{id:"guards"},"Guards"),(0,s.kt)("p",null,"Use guards to restrict the values produced by earlier generators\n",(0,s.kt)("inlineCode",{parentName:"p"},"[x | x <- [1..10], even x]"),"\nUsing a guard we can define a function that maps a positive integer to its list of factors"),(0,s.kt)("h2",{id:"the-zip-function"},"The zip function"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-haskell"},"zip :: [a] -> [b] -> [(a,b)]\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Maps two lists to a lists of pairs of their corresponding elements."),(0,s.kt)("li",{parentName:"ul"},"Define a function that returns the list of app pairs of adjacent elements from a list "),(0,s.kt)("li",{parentName:"ul"},"Using pairs can define a function that decides if the elements in a list are sorted"),(0,s.kt)("li",{parentName:"ul"},"Using zip can define a function that returns the list of all positions of a value in a list")),(0,s.kt)("h2",{id:"string-comprehensions-"},"String Comprehensions-"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A string is a sequence of characters enclosed in double quotes. Internally, strings are represented as a lists of characters. "),(0,s.kt)("li",{parentName:"ul"},"Any polymorphic function that operates on lists can also be applied to strings"),(0,s.kt)("li",{parentName:"ul"},"List comprehensions can also work them")))}d.isMDXComponent=!0}}]);