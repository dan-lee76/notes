"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[4886],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},39829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={},o="8. Monads III",i={unversionedId:"Year2/2003/08",id:"Year2/2003/08",title:"8. Monads III",description:"02/03/23",source:"@site/docs/Year2/2003/08.md",sourceDirName:"Year2/2003",slug:"/Year2/2003/08",permalink:"/Year2/2003/08",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"7.  Monads II",permalink:"/Year2/2003/07"},next:{title:"9. Monads IV",permalink:"/Year2/2003/09"}},s={},p=[{value:"Recap",id:"recap",level:2},{value:"The State Monad",id:"the-state-monad",level:2},{value:"Declaring States",id:"declaring-states",level:2},{value:"Example: relabelling trees",id:"example-relabelling-trees",level:2},{value:"Slow way (with state)",id:"slow-way-with-state",level:3},{value:"Better way (with monads)",id:"better-way-with-monads",level:3},{value:"Top Level Function",id:"top-level-function",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"8-monads-iii"},"8. Monads III"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"02/03/23")),(0,r.kt)("h2",{id:"recap"},"Recap"),(0,r.kt)("p",null,"If you want to be a Monad, you have to be an Applicative functor.\n(>>=) bind - gives you a generic way of sequencing things"),(0,r.kt)("h2",{id:"the-state-monad"},"The State Monad"),(0,r.kt)("p",null,"[Add Code]"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"State - a value which changes overtime. Key part insert a stte and modify it"),(0,r.kt)("li",{parentName:"ul"},"Helper function helps streamline the code and changes ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," into the function.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Char -> Int")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Char -> ST Int"),"\n","[Insert Image]"),(0,r.kt)("h2",{id:"declaring-states"},"Declaring States"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Monad ST where\n    -- return :: a -> ST a\n    return x = S(\\s -> (x,s))\n")),(0,r.kt)("p",null,"Look at the type of a, get the same type out. State is involved, but is hidden"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"-- (>>=) :: ST a -> (a -> ST b) -> ST b\nst >>= f = S(\\s -> Let(x,s') = app st s\n             in app (f x) s')\n")),(0,r.kt)("p",null,"Approproate form of sequencing for the state monard"),(0,r.kt)("h2",{id:"example-relabelling-trees"},"Example: relabelling trees"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"data Tree = Leaf a | Node (Tree a) (Tree a)\n\nt :: Tree Char\nt = Node (Node ( Leaf 'a') (Leave b')) left 'c')\n\nTree a -> Int -> (Tree Int, Int)\n\n")),(0,r.kt)("h3",{id:"slow-way-with-state"},"Slow way (with state)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"rlabel :: Tree a -> Int -> (Tree Int, Int)\nrlabel (Leaf x) n = (Leaf n, n+1)\nrlabel (Node L r) n =   (Node l' r', n'')\n                where\n                    (l',n') = rlabel l n\n                    (r', n'') = rlabel r n'\n")),(0,r.kt)("h3",{id:"better-way-with-monads"},"Better way (with monads)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fresh :: ST Int\nfresh = S (\\n -> (n, n+1))\n\nmlabel :: Tree a -> ST(Tree Int)\nmlabel (Leaf x) = do n <- fresh\n               return (Leaf n)\nmlabel (Node L r) = do L' <- mlabel L\n                 r' <- mlabel r\n                 return (Node L' r')\n")),(0,r.kt)("h3",{id:"top-level-function"},"Top Level Function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"label :: Tree a -> Tree Int\nlabel t = fst(app(mlabel t) 0)\n")))}u.isMDXComponent=!0}}]);