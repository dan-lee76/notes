"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[4270],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>d});var r=t(7294);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,s=function(n,e){if(null==n)return{};var t,r,s={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var l=r.createContext({}),c=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=c(n.components);return r.createElement(l.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,s=n.mdxType,o=n.originalType,l=n.parentName,p=a(n,["components","mdxType","originalType","parentName"]),u=c(t),d=s,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(f,i(i({ref:e},p),{},{components:t})):r.createElement(f,i({ref:e},p))}));function d(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var o=t.length,i=new Array(o);i[0]=u;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=n,a.mdxType="string"==typeof n?n:s,i[1]=a;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5404:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=t(7462),s=(t(7294),t(3905));const o={},i="14. Reverse, Definition of Sorted",a={unversionedId:"Year2/2009/14",id:"Year2/2009/14",title:"14. Reverse, Definition of Sorted",description:"21/11/22",source:"@site/docs/Year2/2009/14.md",sourceDirName:"Year2/2009",slug:"/Year2/2009/14",permalink:"/Year2/2009/14",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"13. Lists, Basic properties, Monoid",permalink:"/Year2/2009/13"},next:{title:"15. Collatz & Sorting",permalink:"/Year2/2009/15"}},l={},c=[],p={toc:c};function m(n){let{components:e,...t}=n;return(0,s.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"14-reverse-definition-of-sorted"},"14. Reverse, Definition of Sorted"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"21/11/22")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lean"},"set_option pp.structure_projections false\n\n\n/- \ninductive list(A : Type)\n| nil : list\n-- | cons : A \u2192 list \u2192 list\n| snoc : list \u2192 A \u2192 list\n\n\n\n\nopen list\nlocal notation (name := cons) a :: b := cons a b\n\n1 :: 2 :: 3 :: nil\n[1,2,3]\n-/\n\nvariables {A B C : Type}\n\n/-\ndef append : list A \u2192 list A \u2192 list A\n| [] bs := bs\n| {a :: as} bs := a :: (append as bs)\n\n[1,2] ++ [3,4] = [1,2,3,4]\n\nlocal notation (name := append) as ++ bs := append as bs\n-/\n\n\n/-\nproof is using induction over lists\n(list A, ++, [])\ncommutative monoid?\n[1,2]++[3] \u2260 [3]++[1,2]\nlists are the free monoid\nwhat is the free commutative monoid\n\nmultisets, bags\n{1,1} \u2260 {1}\n{1,2,3} = {3,2,1}\n\nforget multisets, back to lists...#check\nrev [1,2,3] = [3,2,1]\n\n-/\n--snoc [1,2] 3 = [1,2,3]\n\ndef snoc : list A \u2192 A \u2192 list A\n| [] a := [a]\n| (b :: bs) a := b :: (snoc bs a)\n\n-- rev [1,2,3] = snoc(rev [2,3])\n-- snoc [3,2] 1 = [3,2,1]\ndef rev : list A \u2192 list A\n| [] := []\n| (a :: as) := snoc (rev as) a\n\n#eval (rev [1,2,3])\n#eval rev (rev [1,2,3])\n\nopen list\n\nlemma revsnoc : \u2200 as : list A, \u2200 a : A, rev (snoc as a) = a :: rev as :=\nbegin\n  assume as a,\n  induction as with b as' ih,\n  dsimp[snoc,rev],\n  refl,\n  dsimp[snoc,rev],\n  rw ih,\n  dsimp[snoc],\n  refl,\nend\n\ntheorem revrev : \u2200 as : list A, rev(rev as) = as :=\nbegin\n  assume as,\n  induction as with a as' ih,\n  dsimp [rev],\n  refl,\n  dsimp[rev],\n  rw revsnoc,\n  rw ih,\nend\n\n\n---\n\n-- sort : list \u2115 \u2192 list \u2115 \n-- sort [5,3,2,2,1] \u2192 [1,2,2,3,5]\n\nopen nat\n\ndef leb : \u2115 \u2192 \u2115 \u2192 bool\n| 0 n := tt\n| (succ n) 0 := ff\n| (succ m) (succ n) := leb m n\n\ntheorem leb_ok : \u2200 m n : \u2115, m \u2264 n \u2194 leb m n = tt :=\nbegin\n  sorry,\nend\n\ndef ins : \u2115 \u2192 list \u2115 \u2192 list \u2115 \n| n [] := [n]\n| n (m :: ms) :=\n  if (leb n m) then n :: m :: ms\n  else m :: (ins n ms)\n\n\ndef sort : list \u2115 \u2192 list \u2115 \n| [] := []\n| (n :: ns) := ins n (sort ns)\n\n#eval (sort [ 5,3,2,4,1])\n\n-- sort sorts\n-- Sorted : list \u2115 \u2192 Prop\n\n\ninductive Le_list : \u2115 \u2192 list \u2115 \u2192 Prop\n| le_nil : \u2200 n : \u2115, Le_list n []\n| le_cons : \u2200 m n : \u2115, \u2200 ns : list \u2115 , m \u2264 n \u2192 Le_list m ns \u2192 Le_list m (n :: ns)\n\ninductive Sorted : list \u2115 \u2192 Prop\n| sorted_nil : Sorted []\n| sorted_cons : \u2200 ms : list \u2115, \u2200 n : \u2115, Le_list n ms \u2192 Sorted ms \u2192 Sorted (n :: ms)\n\ntheorem sort_sorts : \u2200 ns : list \u2115 , Sorted (sort ns) :=\nbegin\n  sorry,\nend\n")))}m.isMDXComponent=!0}}]);