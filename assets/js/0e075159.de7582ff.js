"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[9635],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),f=a,g=m["".concat(s,".").concat(f)]||m[f]||u[f]||l;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},56647:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const l={},o="4. Programming with Effects",i={unversionedId:"Year2/2003/04",id:"Year2/2003/04",title:"4. Programming with Effects",description:"16/02/23",source:"@site/docs/Year2/2003/04.md",sourceDirName:"Year2/2003",slug:"/Year2/2003/04",permalink:"/Year2/2003/04",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"3.  Coursework - Connect 4",permalink:"/Year2/2003/03"},next:{title:"5. Applicative Functors",permalink:"/Year2/2003/05"}},s={},p=[{value:"Abstracting programming patterns",id:"abstracting-programming-patterns",level:2},{value:"Generalising Further",id:"generalising-further",level:2},{value:"List Functor",id:"list-functor",level:3},{value:"Maybe Functor",id:"maybe-functor",level:3},{value:"The tree functor",id:"the-tree-functor",level:2},{value:"Why use functors?",id:"why-use-functors",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"4-programming-with-effects"},"4. Programming with Effects"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"16/02/23")),(0,a.kt)("p",null,"Grahams question about life and programming:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Shall we be pure or impure?")),(0,a.kt)("p",null,"pure = programs are mathematical functions\nimpure = programs can have side effects"),(0,a.kt)("p",null,"can we combine the two approaches (monads)\nMonads - Extracting a common pattern"),(0,a.kt)("h2",{id:"abstracting-programming-patterns"},"Abstracting programming patterns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"inc :: [Int] -> [Int]\ninc [] = []\ninc (n:ns) = n+1 : inc ns\n\nsqr :: [Int] -> [Int]\nsqr [] = []\nsqr (n:ns) = n^s : sqr ns\n")),(0,a.kt)("p",null,"Have similar functions, can use ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," to recursively execute same operation on all items in the list"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"map :: (a->b) -> [a] -> [b]\nmap f [] = []\nmap f (x:xs) = fx : map f xs\n")),(0,a.kt)("p",null,"Can define ",(0,a.kt)("inlineCode",{parentName:"p"},"inc")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"sqr")," in shorter way\n",(0,a.kt)("inlineCode",{parentName:"p"},"inc = map(+1)")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"sqr = map(n^2)")),(0,a.kt)("h2",{id:"generalising-further"},"Generalising Further"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"class Functor f where\n        fmap :: (a->b) -> fa -> fb -- f is a member of the functor class if it follows the fmap rule successfully \n")),(0,a.kt)("h3",{id:"list-functor"},"List Functor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Functor [] where\n    -- fmap :: (a->b) -> [a] -> [b]\n    fmap = map\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[]")," - parameterised type of list. It does not mean empty list"),(0,a.kt)("h3",{id:"maybe-functor"},"Maybe Functor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"data Maybe a = Nothing | Just a\n\ninstance Functor Maybe where\n    -- fmap :: (a->b) -> Maybe a -> Maybe b\n    fmap g Nothing = Nothing\n    fmap g (Just x) = Just (g x)\n")),(0,a.kt)("h2",{id:"the-tree-functor"},"The tree functor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"data Tree a = Leaf a\n            | Node (Tree a) (Tree a)\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Functor Tree where\n    -- fmap :: (a->b) -> Tree a -> Tree b\n    fmap g (Leaf x) = Leaf(g x)\n    fmap g (Node L r) = Node (fmap g l) (fmap g r)\n\n    g :: a->b\n    x :: a\n    L,r :: Tree a\n")),(0,a.kt)("h2",{id:"why-use-functors"},"Why use functors?"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Can use same name, for functions that are essentially the same")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"inc :: Functor f => f Int -> f Int\ninc = fmap(+1)\n\n")))}u.isMDXComponent=!0}}]);