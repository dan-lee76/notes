"use strict";(self.webpackChunknottes=self.webpackChunknottes||[]).push([[886],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=s(n),m=a,g=f["".concat(u,".").concat(m)]||f[m]||p[m]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},81449:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={},o="7. Minimisation of Finite Automata",l={unversionedId:"Year2/2012/07",id:"Year2/2012/07",title:"7. Minimisation of Finite Automata",description:"23/02/23",source:"@site/docs/Year2/2012/07.md",sourceDirName:"Year2/2012",slug:"/Year2/2012/07",permalink:"/Year2/2012/07",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"year2",previous:{title:"6.",permalink:"/Year2/2012/06"},next:{title:"8. Disproving Regularity",permalink:"/Year2/2012/08"}},u={},s=[],c={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"7-minimisation-of-finite-automata"},"7. Minimisation of Finite Automata"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"23/02/23")),(0,a.kt)("p",null,"Regular language is"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The language of a regular expression"),(0,a.kt)("li",{parentName:"ul"},"The language of a NFA"),(0,a.kt)("li",{parentName:"ul"},"The language of a DFA")),(0,a.kt)("p",null,"When converting NFAs into DFAs, they're not always in their simplest form. Because the minimal DFAs are unique, the languages are equal if and only iff the minimal DFAs are equal."),(0,a.kt)("p",null,"If two states are not equivalent, then they are distinguishable "),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"table-filling algorithm")," recursively constructs the set of distinguishable pairs of state for a DFA. When all distinguishable state pairs have been identified, any remaining pairs of states must be equivalent. Such states can be merged, thereby minimising the automation."))}p.isMDXComponent=!0}}]);